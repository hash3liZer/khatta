import{S as No,i as qo,s as Go,U as ql,y as Je,z as Xe,A as ze,V as Ho,W as Co,g as Ke,d as Ve,B as Ye,X as To,k as r,q as t,a as F,Y as b,l as p,m as i,r as a,h as s,c,Z as C,n as te,b as n,D as l,E as jo}from"../chunks/index.725d15e1.js";import{P as Qo}from"../chunks/post_layout.b6bd0bbf.js";import{I as bs}from"../chunks/post_card.004e8740.js";function Zo(G){let f,y,A,T,d,h,$,Cs,Ts,es,S,ae,$s,Ss,ne,Os,ss,L,H,Ls,ls,j,P,os,u,Ps,re,Is,Us,pe,xs,Ws,ie,Ms,Ns,Fe,qs,Gs,ce,Hs,js,ts,de,So=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" go="true"><div class="language-id">go</div><div class='code-container'><code><div class='line'><span style="color: #EEFFFF">password </span><span style="color: #89DDFF">:=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">[]</span><span style="color: #82AAFF">rune</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">user</span><span style="color: #89DDFF">.</span><span style="color: #EEFFFF">Password</span><span style="color: #89DDFF">)</span></div></code></div></pre>`,fe,Q,Qs,as,ue,Oo=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" go="true"><div class="language-id">go</div><div class='code-container'><code><div class='line'><span style="color: #89DDFF">if</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">len</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">user</span><span style="color: #89DDFF">.</span><span style="color: #EEFFFF">Password</span><span style="color: #89DDFF">)</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #EEFFFF"> </span><span style="color: #F78C6C">6</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">&#123;</span></div><div class='line'><span style="color: #EEFFFF">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Error</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">Password too short</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">        resp </span><span style="color: #89DDFF">:=</span><span style="color: #EEFFFF"> c</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">JSON</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">http</span><span style="color: #89DDFF">.</span><span style="color: #EEFFFF">StatusConflict</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> helper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">ErrorLog</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">http</span><span style="color: #89DDFF">.</span><span style="color: #EEFFFF">StatusConflict</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">Password too short</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">EXT_REF</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">))</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">return</span><span style="color: #EEFFFF"> resp</span></div><div class='line'><span style="color: #89DDFF">&#125;</span></div></code></div></pre>`,ye,v,Zs,Ee,Bs,Rs,he,Js,Xs,ns,De,Lo=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" go="true"><div class="language-id">go</div><div class='code-container'><code><div class='line'><span style="color: #EEFFFF">password </span><span style="color: #89DDFF">:=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">[]</span><span style="color: #82AAFF">rune</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">user</span><span style="color: #89DDFF">.</span><span style="color: #EEFFFF">Password</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">result</span><span style="color: #89DDFF">.</span><span style="color: #EEFFFF">Token </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> helper</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">JwtGenerator</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">result</span><span style="color: #89DDFF">.</span><span style="color: #EEFFFF">Username</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> result</span><span style="color: #89DDFF">.</span><span style="color: #EEFFFF">Firstname</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> result</span><span style="color: #89DDFF">.</span><span style="color: #EEFFFF">Lastname</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> os</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Getenv</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">SECRET</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">))</span></div><div class='line'><span style="color: #89DDFF">if</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">len</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">password</span><span style="color: #89DDFF">)</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">&lt;</span><span style="color: #EEFFFF"> </span><span style="color: #F78C6C">6</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">&#123;</span></div><div class='line'><span style="color: #EEFFFF">        flag </span><span style="color: #89DDFF">:=</span><span style="color: #EEFFFF"> os</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Getenv</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">FLAG</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">        res </span><span style="color: #89DDFF">:=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">&</span><span style="color: #EEFFFF">Flag</span><span style="color: #89DDFF">&#123;</span></div><div class='line'><span style="color: #EEFFFF">                Flag</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> flag</span><span style="color: #89DDFF">,</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">&#125;</span></div><div class='line'><span style="color: #EEFFFF">        resp </span><span style="color: #89DDFF">:=</span><span style="color: #EEFFFF"> c</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">JSON</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">http</span><span style="color: #89DDFF">.</span><span style="color: #EEFFFF">StatusOK</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> res</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">        log</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Info</span><span style="color: #89DDFF">()</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">return</span><span style="color: #EEFFFF"> resp</span></div><div class='line'><span style="color: #89DDFF">&#125;</span></div></code></div></pre>`,ve,D,zs,me,Ks,Vs,we,Ys,el,I,rs,Z,sl,ps,_e,Po=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" json="true"><div class="language-id">json</div><div class='code-container'><code><div class='line'><span style="color: #89DDFF">&#123;</span></div><div class='line'><span style="color: #EEFFFF">  </span><span style="color: #89DDFF">"</span><span style="color: #C792EA">username</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">hash3liZer</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">,</span></div><div class='line'><span style="color: #EEFFFF">  </span><span style="color: #89DDFF">"</span><span style="color: #C792EA">password</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">世界</span><span style="color: #89DDFF">"</span></div><div class='line'><span style="color: #89DDFF">&#125;</span></div></code></div></pre>`,ge,B,ll,is,ke,Io=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'><span style="color: #EEFFFF">curl -X POST -H </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">Content-Type: application/json</span><span style="color: #89DDFF">"</span><span style="color: #EEFFFF"> -d </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">&#123;"username": "hash3liZer", "password":"世界"&#125;</span><span style="color: #89DDFF">'</span><span style="color: #EEFFFF"> http://targeturlhere/login</span></div></code></div></pre>`,Ae,U,ol,be,tl,Fs,x,R,al,cs,J,W,ds,X,nl,fs,z,M,us,m,rl,Ce,pl,il,Te,Fl,cl,ys,w,$e,dl,fl,Se,ul,yl,Oe,El,Es,_,hl,Le,Dl,vl,Pe,ml,wl,hs,Ie,Uo=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF"><div class='code-container'><code><div class='line'><span style="color: undefined">echo 'base64string' | base64 -d</span></div></code></div></pre>`,Ue,O,_l,xe,gl,kl,Ds,We,xo=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF"><div class='code-container'><code><div class='line'><span style="color: undefined">&#123;"otp":"THECODEHERE"&#125; M12SOME�8</span></div></code></div></pre>`,Me,g,Al,Ne,bl,Cl,qe,Tl,$l,vs,k,Sl,Ge,Ol,Ll,He,Pl,Il,ms,je,Wo=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" sql="true"><div class="language-id">sql</div><div class='code-container'><code><div class='line'><span style="color: #EEFFFF">username</span><span style="color: #89DDFF">=</span><span style="color: #F78C6C">admin</span><span style="color: #89DDFF">'</span><span style="color: #C3E88D"> OR 1=1 --&password=something&otp=2343</span></div></code></div></pre>`,Qe,K,Ul,ws,Ze,Mo=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" sql="true"><div class="language-id">sql</div><div class='code-container'><code><div class='line'><span style="color: #EEFFFF">username</span><span style="color: #89DDFF">=</span><span style="color: #F78C6C">admin</span><span style="color: #89DDFF">'</span><span style="color: #C3E88D"> UNION SELECT NULL, NULL --&password=password&otp=OTPHERE</span></div></code></div></pre>`,Be,N,xl,Re,Wl,_s;return P=new bs({props:{src:"https://github.com/hash3liZer/khatta/assets/29171692/10ee8e70-1ea2-4742-b1c9-e9ad483cc1b8",alt:"image"}}),I=new bs({props:{src:"https://github.com/hash3liZer/khatta/assets/29171692/29759264-6548-4db9-8f0f-9906066e1ece",alt:"image"}}),W=new bs({props:{src:"https://github.com/hash3liZer/khatta/assets/29171692/f8eea34e-83fd-4ce1-ae17-723ba052ad4d",alt:"image"}}),M=new bs({props:{src:"https://github.com/hash3liZer/khatta/assets/29171692/10870615-7f93-43a6-9d70-0b1fad713811",alt:"image"}}),{c(){f=r("h2"),y=r("a"),A=t("Introduction"),T=F(),d=r("p"),h=t("The 2 of the easy challenges from "),$=r("strong"),Cs=t("BlackhatMEA CTF Qualifiers"),Ts=t(" which was held online were:"),es=F(),S=r("ul"),ae=r("li"),$s=t("Authy"),Ss=F(),ne=r("li"),Os=t("Warm Me Up"),ss=F(),L=r("h3"),H=r("a"),Ls=t("Authy"),ls=F(),j=r("p"),Je(P.$$.fragment),os=F(),u=r("p"),Ps=t("The source code was provided with the challenge. So, i downloaded the source code. The password for the archived file was "),re=r("code"),Is=t("flagyard"),Us=t(". After extracting the files, i started reading the code to find any clues. At first, i started looking for any kind of "),pe=r("code"),xs=t("parameter pollution"),Ws=t(" or any logical vulnerability that could lead to login without "),ie=r("code"),Ms=t("password authentication"),Ns=t(". But eventually no success. Upon reading the source code more carefully, i discovered the difference between the length check at "),Fe=r("code"),qs=t("LoginController"),Gs=t(" and "),ce=r("code"),Hs=t("SignupController"),js=t(". At the login controller we had the password stored something like this:"),ts=F(),de=new b(!1),fe=F(),Q=r("p"),Qs=t("However, that was totally not the case with the signup functionality. The check was rather simple:"),as=F(),ue=new b(!1),ye=F(),v=r("p"),Zs=t("So, eventually reading out on the functions i found out that with "),Ee=r("code"),Bs=t("rune"),Rs=t(" the unicode characters are ignored and not counted when you would run the "),he=r("code"),Js=t("len"),Xs=t(" function on the variable. So, in short our vulnerable part of the code is:"),ns=F(),De=new b(!1),ve=F(),D=r("p"),zs=t("To exploit the code i simply signed with uncode characters in my password that eventually would turn out to be less than 6 characters with "),me=r("code"),Ks=t("rune"),Vs=t(" function. So, my payload was: "),we=r("code"),Ys=t("世界"),el=t(`. I crafted a quick program to verify it:
`),Je(I.$$.fragment),rs=F(),Z=r("p"),sl=t("Looks good, so signed up with the unicode password:"),ps=F(),_e=new b(!1),ge=F(),B=r("p"),ll=t("And then login:"),is=F(),ke=new b(!1),Ae=F(),U=r("p"),ol=t("And got the "),be=r("strong"),tl=t("FLAG!"),Fs=F(),x=r("h3"),R=r("a"),al=t("Warm Me Up"),cs=F(),J=r("p"),Je(W.$$.fragment),ds=F(),X=r("p"),nl=t("With this one, there were no source files. There was just a plain login interface. The interface was:"),fs=F(),z=r("p"),Je(M.$$.fragment),us=F(),m=r("p"),rl=t("Intially, i went for some recon and enumeration. Looked for juicy information that i could find at common directories like "),Ce=r("code"),pl=t("/robots.txt"),il=t(" or "),Te=r("code"),Fl=t(".gitignore"),cl=t(" but found nothing actually. So, time to move on. Now, looking at the login page, we have 3 parameters:"),ys=F(),w=r("ul"),$e=r("li"),dl=t("username[]"),fl=F(),Se=r("li"),ul=t("password[]"),yl=F(),Oe=r("li"),El=t("otp[]"),Es=F(),_=r("p"),hl=t("At first i tried going with the default credentials or multiple parameters in the using "),Le=r("code"),Dl=t(","),vl=t(" as a separator and again no luck. Now, looking at the response i found out the "),Pe=r("code"),ml=t("session"),wl=t(" token in cookies. It looked like a base64 string. So, i decoded it:"),hs=F(),Ie=new b(!1),Ue=F(),O=r("p"),_l=t("It turned out to an OTP code. At first it didn’t make much sense to me. But much after discovering the "),xe=r("code"),gl=t("SQLi"),kl=t(" in the credentials parameters, i discovered that this is actually connected with the login authentication. So, to login correctly we need this OTP code. The base64 decoded string turned out of be something like this:"),Ds=F(),We=new b(!1),Me=F(),g=r("p"),Al=t("Looking further, i found the SQLi injection in the "),Ne=r("code"),bl=t("credentials"),Cl=t(" parameters. The application didn’t throw any error but the "),qe=r("code"),Tl=t("Login Failed"),$l=t(" or server issues. So, it was a blind SQL."),vs=F(),k=r("p"),Sl=t("A quick payload with a single "),Ge=r("code"),Ol=t("'"),Ll=t(" triggered the error. I also verified a valid payload which gave the "),He=r("code"),Pl=t("200"),Il=t(" response as expected:"),ms=F(),je=new b(!1),Qe=F(),K=r("p"),Ul=t("So, my final payload was:"),ws=F(),Ze=new b(!1),Be=F(),N=r("p"),xl=t("With OTP from the one i found in the cookies. Upon send the post request, i got the "),Re=r("strong"),Wl=t("FLAG!"),this.h()},l(e){f=p(e,"H2",{id:!0});var o=i(f);y=p(o,"A",{href:!0});var Gl=i(y);A=a(Gl,"Introduction"),Gl.forEach(s),o.forEach(s),T=c(e),d=p(e,"P",{});var gs=i(d);h=a(gs,"The 2 of the easy challenges from "),$=p(gs,"STRONG",{});var Hl=i($);Cs=a(Hl,"BlackhatMEA CTF Qualifiers"),Hl.forEach(s),Ts=a(gs," which was held online were:"),gs.forEach(s),es=c(e),S=p(e,"UL",{});var ks=i(S);ae=p(ks,"LI",{});var jl=i(ae);$s=a(jl,"Authy"),jl.forEach(s),Ss=c(ks),ne=p(ks,"LI",{});var Ql=i(ne);Os=a(Ql,"Warm Me Up"),Ql.forEach(s),ks.forEach(s),ss=c(e),L=p(e,"H3",{id:!0});var Zl=i(L);H=p(Zl,"A",{href:!0});var Bl=i(H);Ls=a(Bl,"Authy"),Bl.forEach(s),Zl.forEach(s),ls=c(e),j=p(e,"P",{});var Rl=i(j);Xe(P.$$.fragment,Rl),Rl.forEach(s),os=c(e),u=p(e,"P",{});var E=i(u);Ps=a(E,"The source code was provided with the challenge. So, i downloaded the source code. The password for the archived file was "),re=p(E,"CODE",{});var Jl=i(re);Is=a(Jl,"flagyard"),Jl.forEach(s),Us=a(E,". After extracting the files, i started reading the code to find any clues. At first, i started looking for any kind of "),pe=p(E,"CODE",{});var Xl=i(pe);xs=a(Xl,"parameter pollution"),Xl.forEach(s),Ws=a(E," or any logical vulnerability that could lead to login without "),ie=p(E,"CODE",{});var zl=i(ie);Ms=a(zl,"password authentication"),zl.forEach(s),Ns=a(E,". But eventually no success. Upon reading the source code more carefully, i discovered the difference between the length check at "),Fe=p(E,"CODE",{});var Kl=i(Fe);qs=a(Kl,"LoginController"),Kl.forEach(s),Gs=a(E," and "),ce=p(E,"CODE",{});var Vl=i(ce);Hs=a(Vl,"SignupController"),Vl.forEach(s),js=a(E,". At the login controller we had the password stored something like this:"),E.forEach(s),ts=c(e),de=C(e,!1),fe=c(e),Q=p(e,"P",{});var Yl=i(Q);Qs=a(Yl,"However, that was totally not the case with the signup functionality. The check was rather simple:"),Yl.forEach(s),as=c(e),ue=C(e,!1),ye=c(e),v=p(e,"P",{});var V=i(v);Zs=a(V,"So, eventually reading out on the functions i found out that with "),Ee=p(V,"CODE",{});var eo=i(Ee);Bs=a(eo,"rune"),eo.forEach(s),Rs=a(V," the unicode characters are ignored and not counted when you would run the "),he=p(V,"CODE",{});var so=i(he);Js=a(so,"len"),so.forEach(s),Xs=a(V," function on the variable. So, in short our vulnerable part of the code is:"),V.forEach(s),ns=c(e),De=C(e,!1),ve=c(e),D=p(e,"P",{});var q=i(D);zs=a(q,"To exploit the code i simply signed with uncode characters in my password that eventually would turn out to be less than 6 characters with "),me=p(q,"CODE",{});var lo=i(me);Ks=a(lo,"rune"),lo.forEach(s),Vs=a(q," function. So, my payload was: "),we=p(q,"CODE",{});var oo=i(we);Ys=a(oo,"世界"),oo.forEach(s),el=a(q,`. I crafted a quick program to verify it:
`),Xe(I.$$.fragment,q),q.forEach(s),rs=c(e),Z=p(e,"P",{});var to=i(Z);sl=a(to,"Looks good, so signed up with the unicode password:"),to.forEach(s),ps=c(e),_e=C(e,!1),ge=c(e),B=p(e,"P",{});var ao=i(B);ll=a(ao,"And then login:"),ao.forEach(s),is=c(e),ke=C(e,!1),Ae=c(e),U=p(e,"P",{});var Ml=i(U);ol=a(Ml,"And got the "),be=p(Ml,"STRONG",{});var no=i(be);tl=a(no,"FLAG!"),no.forEach(s),Ml.forEach(s),Fs=c(e),x=p(e,"H3",{id:!0});var ro=i(x);R=p(ro,"A",{href:!0});var po=i(R);al=a(po,"Warm Me Up"),po.forEach(s),ro.forEach(s),cs=c(e),J=p(e,"P",{});var io=i(J);Xe(W.$$.fragment,io),io.forEach(s),ds=c(e),X=p(e,"P",{});var Fo=i(X);nl=a(Fo,"With this one, there were no source files. There was just a plain login interface. The interface was:"),Fo.forEach(s),fs=c(e),z=p(e,"P",{});var co=i(z);Xe(M.$$.fragment,co),co.forEach(s),us=c(e),m=p(e,"P",{});var Y=i(m);rl=a(Y,"Intially, i went for some recon and enumeration. Looked for juicy information that i could find at common directories like "),Ce=p(Y,"CODE",{});var fo=i(Ce);pl=a(fo,"/robots.txt"),fo.forEach(s),il=a(Y," or "),Te=p(Y,"CODE",{});var uo=i(Te);Fl=a(uo,".gitignore"),uo.forEach(s),cl=a(Y," but found nothing actually. So, time to move on. Now, looking at the login page, we have 3 parameters:"),Y.forEach(s),ys=c(e),w=p(e,"UL",{});var ee=i(w);$e=p(ee,"LI",{});var yo=i($e);dl=a(yo,"username[]"),yo.forEach(s),fl=c(ee),Se=p(ee,"LI",{});var Eo=i(Se);ul=a(Eo,"password[]"),Eo.forEach(s),yl=c(ee),Oe=p(ee,"LI",{});var ho=i(Oe);El=a(ho,"otp[]"),ho.forEach(s),ee.forEach(s),Es=c(e),_=p(e,"P",{});var se=i(_);hl=a(se,"At first i tried going with the default credentials or multiple parameters in the using "),Le=p(se,"CODE",{});var Do=i(Le);Dl=a(Do,","),Do.forEach(s),vl=a(se," as a separator and again no luck. Now, looking at the response i found out the "),Pe=p(se,"CODE",{});var vo=i(Pe);ml=a(vo,"session"),vo.forEach(s),wl=a(se," token in cookies. It looked like a base64 string. So, i decoded it:"),se.forEach(s),hs=c(e),Ie=C(e,!1),Ue=c(e),O=p(e,"P",{});var As=i(O);_l=a(As,"It turned out to an OTP code. At first it didn’t make much sense to me. But much after discovering the "),xe=p(As,"CODE",{});var mo=i(xe);gl=a(mo,"SQLi"),mo.forEach(s),kl=a(As," in the credentials parameters, i discovered that this is actually connected with the login authentication. So, to login correctly we need this OTP code. The base64 decoded string turned out of be something like this:"),As.forEach(s),Ds=c(e),We=C(e,!1),Me=c(e),g=p(e,"P",{});var le=i(g);Al=a(le,"Looking further, i found the SQLi injection in the "),Ne=p(le,"CODE",{});var wo=i(Ne);bl=a(wo,"credentials"),wo.forEach(s),Cl=a(le," parameters. The application didn’t throw any error but the "),qe=p(le,"CODE",{});var _o=i(qe);Tl=a(_o,"Login Failed"),_o.forEach(s),$l=a(le," or server issues. So, it was a blind SQL."),le.forEach(s),vs=c(e),k=p(e,"P",{});var oe=i(k);Sl=a(oe,"A quick payload with a single "),Ge=p(oe,"CODE",{});var go=i(Ge);Ol=a(go,"'"),go.forEach(s),Ll=a(oe," triggered the error. I also verified a valid payload which gave the "),He=p(oe,"CODE",{});var ko=i(He);Pl=a(ko,"200"),ko.forEach(s),Il=a(oe," response as expected:"),oe.forEach(s),ms=c(e),je=C(e,!1),Qe=c(e),K=p(e,"P",{});var Ao=i(K);Ul=a(Ao,"So, my final payload was:"),Ao.forEach(s),ws=c(e),Ze=C(e,!1),Be=c(e),N=p(e,"P",{});var Nl=i(N);xl=a(Nl,"With OTP from the one i found in the cookies. Upon send the post request, i got the "),Re=p(Nl,"STRONG",{});var bo=i(Re);Wl=a(bo,"FLAG!"),bo.forEach(s),Nl.forEach(s),this.h()},h(){te(y,"href","#introduction"),te(f,"id","introduction"),te(H,"href","#authy"),te(L,"id","authy"),de.a=fe,ue.a=ye,De.a=ve,_e.a=ge,ke.a=Ae,te(R,"href","#warm-me-up"),te(x,"id","warm-me-up"),Ie.a=Ue,We.a=Me,je.a=Qe,Ze.a=Be},m(e,o){n(e,f,o),l(f,y),l(y,A),n(e,T,o),n(e,d,o),l(d,h),l(d,$),l($,Cs),l(d,Ts),n(e,es,o),n(e,S,o),l(S,ae),l(ae,$s),l(S,Ss),l(S,ne),l(ne,Os),n(e,ss,o),n(e,L,o),l(L,H),l(H,Ls),n(e,ls,o),n(e,j,o),ze(P,j,null),n(e,os,o),n(e,u,o),l(u,Ps),l(u,re),l(re,Is),l(u,Us),l(u,pe),l(pe,xs),l(u,Ws),l(u,ie),l(ie,Ms),l(u,Ns),l(u,Fe),l(Fe,qs),l(u,Gs),l(u,ce),l(ce,Hs),l(u,js),n(e,ts,o),de.m(So,e,o),n(e,fe,o),n(e,Q,o),l(Q,Qs),n(e,as,o),ue.m(Oo,e,o),n(e,ye,o),n(e,v,o),l(v,Zs),l(v,Ee),l(Ee,Bs),l(v,Rs),l(v,he),l(he,Js),l(v,Xs),n(e,ns,o),De.m(Lo,e,o),n(e,ve,o),n(e,D,o),l(D,zs),l(D,me),l(me,Ks),l(D,Vs),l(D,we),l(we,Ys),l(D,el),ze(I,D,null),n(e,rs,o),n(e,Z,o),l(Z,sl),n(e,ps,o),_e.m(Po,e,o),n(e,ge,o),n(e,B,o),l(B,ll),n(e,is,o),ke.m(Io,e,o),n(e,Ae,o),n(e,U,o),l(U,ol),l(U,be),l(be,tl),n(e,Fs,o),n(e,x,o),l(x,R),l(R,al),n(e,cs,o),n(e,J,o),ze(W,J,null),n(e,ds,o),n(e,X,o),l(X,nl),n(e,fs,o),n(e,z,o),ze(M,z,null),n(e,us,o),n(e,m,o),l(m,rl),l(m,Ce),l(Ce,pl),l(m,il),l(m,Te),l(Te,Fl),l(m,cl),n(e,ys,o),n(e,w,o),l(w,$e),l($e,dl),l(w,fl),l(w,Se),l(Se,ul),l(w,yl),l(w,Oe),l(Oe,El),n(e,Es,o),n(e,_,o),l(_,hl),l(_,Le),l(Le,Dl),l(_,vl),l(_,Pe),l(Pe,ml),l(_,wl),n(e,hs,o),Ie.m(Uo,e,o),n(e,Ue,o),n(e,O,o),l(O,_l),l(O,xe),l(xe,gl),l(O,kl),n(e,Ds,o),We.m(xo,e,o),n(e,Me,o),n(e,g,o),l(g,Al),l(g,Ne),l(Ne,bl),l(g,Cl),l(g,qe),l(qe,Tl),l(g,$l),n(e,vs,o),n(e,k,o),l(k,Sl),l(k,Ge),l(Ge,Ol),l(k,Ll),l(k,He),l(He,Pl),l(k,Il),n(e,ms,o),je.m(Wo,e,o),n(e,Qe,o),n(e,K,o),l(K,Ul),n(e,ws,o),Ze.m(Mo,e,o),n(e,Be,o),n(e,N,o),l(N,xl),l(N,Re),l(Re,Wl),_s=!0},p:jo,i(e){_s||(Ke(P.$$.fragment,e),Ke(I.$$.fragment,e),Ke(W.$$.fragment,e),Ke(M.$$.fragment,e),_s=!0)},o(e){Ve(P.$$.fragment,e),Ve(I.$$.fragment,e),Ve(W.$$.fragment,e),Ve(M.$$.fragment,e),_s=!1},d(e){e&&s(f),e&&s(T),e&&s(d),e&&s(es),e&&s(S),e&&s(ss),e&&s(L),e&&s(ls),e&&s(j),Ye(P),e&&s(os),e&&s(u),e&&s(ts),e&&de.d(),e&&s(fe),e&&s(Q),e&&s(as),e&&ue.d(),e&&s(ye),e&&s(v),e&&s(ns),e&&De.d(),e&&s(ve),e&&s(D),Ye(I),e&&s(rs),e&&s(Z),e&&s(ps),e&&_e.d(),e&&s(ge),e&&s(B),e&&s(is),e&&ke.d(),e&&s(Ae),e&&s(U),e&&s(Fs),e&&s(x),e&&s(cs),e&&s(J),Ye(W),e&&s(ds),e&&s(X),e&&s(fs),e&&s(z),Ye(M),e&&s(us),e&&s(m),e&&s(ys),e&&s(w),e&&s(Es),e&&s(_),e&&s(hs),e&&Ie.d(),e&&s(Ue),e&&s(O),e&&s(Ds),e&&We.d(),e&&s(Me),e&&s(g),e&&s(vs),e&&s(k),e&&s(ms),e&&je.d(),e&&s(Qe),e&&s(K),e&&s(ws),e&&Ze.d(),e&&s(Be),e&&s(N)}}}function Bo(G){let f,y;const A=[G[0],$o];let T={$$slots:{default:[Zo]},$$scope:{ctx:G}};for(let d=0;d<A.length;d+=1)T=ql(T,A[d]);return f=new Qo({props:T}),{c(){Je(f.$$.fragment)},l(d){Xe(f.$$.fragment,d)},m(d,h){ze(f,d,h),y=!0},p(d,[h]){const $=h&1?Ho(A,[h&1&&Co(d[0]),h&0&&Co($o)]):{};h&2&&($.$$scope={dirty:h,ctx:d}),f.$set($)},i(d){y||(Ke(f.$$.fragment,d),y=!0)},o(d){Ve(f.$$.fragment,d),y=!1},d(d){Ye(f,d)}}}const $o={title:"Blackhat MEA CTF Qualifiers Web Authy and Warm Me Up Writeup",tags:["blackhatmea","ctf","authy","warmme-up","unicode","broken-logic"],categories:["CTF","Writeups"],summary:"Writeups for 2 of web challenges from Blackhat MEA Qualifier CTF Round namely Authy and Warm Me Up",created:"2023-11-13T00:00:00.000Z",lastmod:"2023-11-13T00:00:00.000Z",flags:[],updated:"2025-02-03T19:35:52.328Z",slug:"/blog/2023/blackhatmea-ctf-web-authy-writeup/+page.md",path:"/blog/2023/blackhatmea-ctf-web-authy-writeup",toc:[{depth:2,title:"Introduction",slug:"introduction"},{depth:3,title:"Authy",slug:"authy"},{depth:3,title:"Warm Me Up",slug:"warm-me-up"}]};function Ro(G,f,y){return G.$$set=A=>{y(0,f=ql(ql({},f),To(A)))},f=To(f),[f]}class Ko extends No{constructor(f){super(),qo(this,f,Ro,Bo,Go,{})}}export{Ko as component};
