import{S as kl,i as Pl,s as _l,U as ga,y as Kl,z as Il,A as Ml,V as gl,W as dl,g as Tl,d as xl,B as Sl,X as El,k as n,q as c,a as F,Y as I,l as t,m as p,r as i,h as a,c as r,Z as M,n as C,b as o,D as e,E as Wl}from"../chunks/index.725d15e1.js";import{P as Ll}from"../chunks/post_layout.b6bd0bbf.js";function Hl(g){let y,d,v,m,D,f,b,A,J,Vs,Ys,Q,js,Gs,ss,Zs,bs,T,zs,ks,k,x,Xs,Ps,S,Js,_s,E,as,Qs,sa,ls,aa,la,es,ea,oa,os,na,Ks,W,ta,Is,L,pa,Ms,P,H,Fa,gs,O,ra,Ts,ns,Al=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" python="true"><div class="language-id">python</div><div class='code-container'><code><div class='line'><span style="color: #EEFFFF">_PMK_ </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">PBKDF2</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">SHA1</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> Pre</span><span style="color: #89DDFF">-</span><span style="color: #82AAFF">Shared</span><span style="color: #89DDFF">-</span><span style="color: #82AAFF">Key</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> SSID</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> </span><span style="color: #F78C6C">4096</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> </span><span style="color: #F78C6C">256</span><span style="color: #89DDFF">)</span></div></code></div></pre>`,ts,R,ca,xs,ps,ul=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" python="true"><div class="language-id">python</div><div class='code-container'><code><div class='line'><span style="color: #546E7A">#!/usr/bin/python</span></div><div class='line'><span style="color: #89DDFF">from</span><span style="color: #EEFFFF"> pbkdf2 </span><span style="color: #89DDFF">import</span><span style="color: #EEFFFF"> PBKDF2</span></div><div class='line'></div><div class='line'><span style="color: #546E7A"># Supposing Values Here.</span></div><div class='line'><span style="color: #EEFFFF">ssid </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">shellvoide</span><span style="color: #89DDFF">"</span><span style="color: #EEFFFF">      </span></div><div class='line'><span style="color: #EEFFFF">psk </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">mypassword</span><span style="color: #89DDFF">"</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">pmk </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">PBKDF2</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">psk</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> ssid</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> </span><span style="color: #F78C6C">4096</span><span style="color: #89DDFF">).</span><span style="color: #82AAFF">read</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">32</span><span style="color: #89DDFF">)</span></div></code></div></pre>`,Fs,B,ia,Ss,_,N,ya,Ws,q,Da,Ls,h,rs,ha,da,cs,Ea,fa,is,Aa,ua,ys,va,ma,Ds,wa,Hs,$,Ca,Os,hs,vl=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" python="true"><div class="language-id">python</div><div class='code-container'><code><div class='line'><span style="color: #C792EA">def</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">customPRF512</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">key</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF">A</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF">B</span><span style="color: #89DDFF">):</span></div><div class='line'><span style="color: #EEFFFF">    blen </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #F78C6C">64</span></div><div class='line'><span style="color: #EEFFFF">    i    </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #F78C6C">0</span></div><div class='line'><span style="color: #EEFFFF">    R    </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">''</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">while</span><span style="color: #EEFFFF"> i</span><span style="color: #89DDFF">&lt;=((</span><span style="color: #EEFFFF">blen</span><span style="color: #89DDFF">*</span><span style="color: #F78C6C">8</span><span style="color: #89DDFF">+</span><span style="color: #F78C6C">159</span><span style="color: #89DDFF">)/</span><span style="color: #F78C6C">160</span><span style="color: #89DDFF">):</span></div><div class='line'><span style="color: #EEFFFF">        hmacsha1 </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> hmac</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">new</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">key</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF">A</span><span style="color: #89DDFF">+</span><span style="color: #82AAFF">chr</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">0x</span><span style="color: #F78C6C">00</span><span style="color: #89DDFF">)+</span><span style="color: #82AAFF">B</span><span style="color: #89DDFF">+</span><span style="color: #82AAFF">chr</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">i</span><span style="color: #89DDFF">),</span><span style="color: #82AAFF">hashlib</span><span style="color: #89DDFF">.</span><span style="color: #F07178">sha1</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">        i</span><span style="color: #89DDFF">+=</span><span style="color: #F78C6C">1</span></div><div class='line'><span style="color: #EEFFFF">        R </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> R</span><span style="color: #89DDFF">+</span><span style="color: #EEFFFF">hmacsha1</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">digest</span><span style="color: #89DDFF">()</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">return</span><span style="color: #EEFFFF"> R</span><span style="color: #89DDFF">[:</span><span style="color: #EEFFFF">blen</span><span style="color: #89DDFF">]</span></div></code></div></pre>`,ds,U,ba,Rs,Es,ml=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" python="true"><div class="language-id">python</div><div class='code-container'><code><div class='line'><span style="color: #89DDFF">from</span><span style="color: #EEFFFF"> pbkdf2 </span><span style="color: #89DDFF">import</span><span style="color: #EEFFFF"> PBKDF2</span></div><div class='line'><span style="color: #89DDFF">import</span><span style="color: #EEFFFF"> hmac</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> binascii</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> hmac</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> hashlib</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> sha</span></div><div class='line'></div><div class='line'><span style="color: #C792EA">def</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">customPRF512</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">key</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF">A</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF">B</span><span style="color: #89DDFF">):</span></div><div class='line'><span style="color: #EEFFFF">    blen </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #F78C6C">64</span></div><div class='line'><span style="color: #EEFFFF">    i    </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #F78C6C">0</span></div><div class='line'><span style="color: #EEFFFF">    R    </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">''</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">while</span><span style="color: #EEFFFF"> i</span><span style="color: #89DDFF">&lt;=((</span><span style="color: #EEFFFF">blen</span><span style="color: #89DDFF">*</span><span style="color: #F78C6C">8</span><span style="color: #89DDFF">+</span><span style="color: #F78C6C">159</span><span style="color: #89DDFF">)/</span><span style="color: #F78C6C">160</span><span style="color: #89DDFF">):</span></div><div class='line'><span style="color: #EEFFFF">        hmacsha1 </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> hmac</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">new</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">key</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF">A</span><span style="color: #89DDFF">+</span><span style="color: #82AAFF">chr</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">0x</span><span style="color: #F78C6C">00</span><span style="color: #89DDFF">)+</span><span style="color: #82AAFF">B</span><span style="color: #89DDFF">+</span><span style="color: #82AAFF">chr</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">i</span><span style="color: #89DDFF">),</span><span style="color: #82AAFF">hashlib</span><span style="color: #89DDFF">.</span><span style="color: #F07178">sha1</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">        i</span><span style="color: #89DDFF">+=</span><span style="color: #F78C6C">1</span></div><div class='line'><span style="color: #EEFFFF">        R </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> R</span><span style="color: #89DDFF">+</span><span style="color: #EEFFFF">hmacsha1</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">digest</span><span style="color: #89DDFF">()</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">return</span><span style="color: #EEFFFF"> R</span><span style="color: #89DDFF">[:</span><span style="color: #EEFFFF">blen</span><span style="color: #89DDFF">]</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">ssid </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">shellvoide</span><span style="color: #89DDFF">"</span><span style="color: #EEFFFF">      </span></div><div class='line'><span style="color: #EEFFFF">psk </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">mypassword</span><span style="color: #89DDFF">"</span></div><div class='line'><span style="color: #EEFFFF">mac_ap </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> binascii</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">unhexlify</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">000ef4ded961</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">mac_cl </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> binascii</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">unhexlify</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">9840bb444f49</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">anonce </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> binascii</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">unhexlify</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">26c7a2cf7d9d0657980e9d077562f5ae3f17929a66e870569980dc5fc2fcf238</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">cnonce </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> binascii</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">unhexlify</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">80ccbcbea79e39b4d88cf43478b19f32649cce78bc4942f4f51ba31207a9f2cf</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">)</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">key_data </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">min</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">mac_ap</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> mac_cl</span><span style="color: #89DDFF">)</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">+</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">max</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">mac_ap</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> mac_cl</span><span style="color: #89DDFF">)</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">+</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">min</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">anonce</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF">snonce</span><span style="color: #89DDFF">)</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">+</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">max</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">anonce</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF">snonce</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">pke </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">Pairwise key expansion</span><span style="color: #89DDFF">"</span><span style="color: #EEFFFF">    </span><span style="color: #546E7A"># Standard Set Value</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">pmk </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">PBKDF2</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">psk</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> ssid</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> </span><span style="color: #F78C6C">4096</span><span style="color: #89DDFF">).</span><span style="color: #82AAFF">read</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">32</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">ptk </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">customPRF512</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">pmk</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> PKE</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> key_data</span><span style="color: #89DDFF">)</span></div></code></div></pre>`,fs,K,V,ka,Bs,Y,Pa,Ns,As,wl=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" python="true"><div class="language-id">python</div><div class='code-container'><code><div class='line'><span style="color: #82AAFF">HMAC</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">KCK</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> payload</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> MD5</span><span style="color: #89DDFF">/</span><span style="color: #82AAFF">SHA128</span><span style="color: #89DDFF">)</span></div></code></div></pre>`,us,j,_a,qs,vs,Cl=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" python="true"><div class="language-id">python</div><div class='code-container'><code><div class='line'><span style="color: #EEFFFF">mic </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> hmac</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">new</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">ptk</span><span style="color: #89DDFF">[</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">:</span><span style="color: #F78C6C">16</span><span style="color: #89DDFF">],</span><span style="color: #82AAFF"> payload</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> hashlib</span><span style="color: #89DDFF">.</span><span style="color: #F07178">md5</span><span style="color: #89DDFF">).</span><span style="color: #82AAFF">hexdigest</span><span style="color: #89DDFF">()</span><span style="color: #EEFFFF"> </span><span style="color: #546E7A">#WPA1</span></div><div class='line'><span style="color: #EEFFFF">mic </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> hmac</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">new</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">ptk</span><span style="color: #89DDFF">[</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">:</span><span style="color: #F78C6C">16</span><span style="color: #89DDFF">],</span><span style="color: #82AAFF"> payload</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> hashlib</span><span style="color: #89DDFF">.</span><span style="color: #F07178">sha1</span><span style="color: #89DDFF">).</span><span style="color: #82AAFF">hexdigest</span><span style="color: #89DDFF">()</span><span style="color: #EEFFFF"> </span><span style="color: #546E7A">#WPA2</span></div></code></div></pre>`,ms,G,Ka,$s,ws,bl=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" python="true"><div class="language-id">python</div><div class='code-container'><code><div class='line'><span style="color: #89DDFF">from</span><span style="color: #EEFFFF"> pbkdf2 </span><span style="color: #89DDFF">import</span><span style="color: #EEFFFF"> PBKDF2</span></div><div class='line'><span style="color: #89DDFF">import</span><span style="color: #EEFFFF"> hmac</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> binascii</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> hmac</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> hashlib</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> sha</span></div><div class='line'></div><div class='line'><span style="color: #C792EA">def</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">customPRF512</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">key</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF">A</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF">B</span><span style="color: #89DDFF">):</span></div><div class='line'><span style="color: #EEFFFF">    blen </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #F78C6C">64</span></div><div class='line'><span style="color: #EEFFFF">    i    </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #F78C6C">0</span></div><div class='line'><span style="color: #EEFFFF">    R    </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">''</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">while</span><span style="color: #EEFFFF"> i</span><span style="color: #89DDFF">&lt;=((</span><span style="color: #EEFFFF">blen</span><span style="color: #89DDFF">*</span><span style="color: #F78C6C">8</span><span style="color: #89DDFF">+</span><span style="color: #F78C6C">159</span><span style="color: #89DDFF">)/</span><span style="color: #F78C6C">160</span><span style="color: #89DDFF">):</span></div><div class='line'><span style="color: #EEFFFF">        hmacsha1 </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> hmac</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">new</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">key</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF">A</span><span style="color: #89DDFF">+</span><span style="color: #82AAFF">chr</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">0x</span><span style="color: #F78C6C">00</span><span style="color: #89DDFF">)+</span><span style="color: #82AAFF">B</span><span style="color: #89DDFF">+</span><span style="color: #82AAFF">chr</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">i</span><span style="color: #89DDFF">),</span><span style="color: #82AAFF">hashlib</span><span style="color: #89DDFF">.</span><span style="color: #F07178">sha1</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">        i</span><span style="color: #89DDFF">+=</span><span style="color: #F78C6C">1</span></div><div class='line'><span style="color: #EEFFFF">        R </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> R</span><span style="color: #89DDFF">+</span><span style="color: #EEFFFF">hmacsha1</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">digest</span><span style="color: #89DDFF">()</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">return</span><span style="color: #EEFFFF"> R</span><span style="color: #89DDFF">[:</span><span style="color: #EEFFFF">blen</span><span style="color: #89DDFF">]</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">ssid </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">shellvoide</span><span style="color: #89DDFF">"</span><span style="color: #EEFFFF">      </span></div><div class='line'><span style="color: #EEFFFF">psk </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">mypassword</span><span style="color: #89DDFF">"</span></div><div class='line'><span style="color: #EEFFFF">mac_ap </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> binascii</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">unhexlify</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">000ef4ded961</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">mac_cl </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> binascii</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">unhexlify</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">9840bb444f49</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">anonce </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> binascii</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">unhexlify</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">26c7a2cf7d9d0657980e9d077562f5ae3f17929a66e870569980dc5fc2fcf238</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">cnonce </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> binascii</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">unhexlify</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">80ccbcbea79e39b4d88cf43478b19f32649cce78bc4942f4f51ba31207a9f2cf</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">)</span></div><div class='line'></div><div class='line'><span style="color: #546E7A"># Supposing payload. You'll have to extract it.</span></div><div class='line'><span style="color: #EEFFFF">payload </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> binascii</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">unhexlify</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">)</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">key_data </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">min</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">mac_ap</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> mac_cl</span><span style="color: #89DDFF">)</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">+</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">max</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">mac_ap</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> mac_cl</span><span style="color: #89DDFF">)</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">+</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">min</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">anonce</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF">snonce</span><span style="color: #89DDFF">)</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">+</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">max</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">anonce</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF">snonce</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">pke </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">Pairwise key expansion</span><span style="color: #89DDFF">"</span><span style="color: #EEFFFF">    </span><span style="color: #546E7A"># Standard Set Value</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">pmk </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">PBKDF2</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">psk</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> ssid</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> </span><span style="color: #F78C6C">4096</span><span style="color: #89DDFF">).</span><span style="color: #82AAFF">read</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">32</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">ptk </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">customPRF512</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">pmk</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> PKE</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> key_data</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">mic </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> hmac</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">new</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">ptk</span><span style="color: #89DDFF">[</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">:</span><span style="color: #F78C6C">16</span><span style="color: #89DDFF">],</span><span style="color: #82AAFF"> payload</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> hashlib</span><span style="color: #89DDFF">.</span><span style="color: #F07178">md5</span><span style="color: #89DDFF">).</span><span style="color: #82AAFF">hexdigest</span><span style="color: #89DDFF">()</span></div><div class='line'></div><div class='line'><span style="color: #82AAFF">print</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">MIC: </span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">+</span><span style="color: #EEFFFF">mic</span></div></code></div></pre>`,Cs,Z,Ia,Us,z,Ma;return{c(){y=n("p"),d=n("strong"),v=c("After the discovery of the PMKID hash crack vulnerability, I spent some time understanding the process and WPA/WPA2 protocol & came across this idea to publish how the real hash cracking works. This article is all about how you can build up something like aircrack-ng or coWPAtty or in other words your own cracking tool. Since a lot of articles have been published on the 4-way handshake and how basic MIC cracking works, the aim here is to get to know how things work at the lower level."),m=F(),D=n("p"),f=c("Well, in basic, there are three major keys that we have to compute:"),b=F(),A=n("ul"),J=n("li"),Vs=c("Pairwise Master Keys (PMK)"),Ys=F(),Q=n("li"),js=c("Pairwise Transient Keys (PTK)"),Gs=F(),ss=n("li"),Zs=c("Message Integrity Code (MIC)"),bs=F(),T=n("p"),zs=c("These three of them are computed in the same sequence as given. The idea behind the 4-way handshake is that two connecting stations have to prove that they know the key by not transmitting the actual key. Instead, the key is strongly encrypted and verified on Authenticator’s (AP) Side. Various functions are used in this process to securely encrypt the passphrase key."),ks=F(),k=n("h2"),x=n("a"),Xs=c("The Handshake Process"),Ps=F(),S=n("p"),Js=c("Before the actual handshake takes place, i.e. EAPOL packets are transmitted, Open authentication and association steps are performed which in short verifies the compatibility of both interconnecting stations. In short, the following happens after successful association:"),_s=F(),E=n("ul"),as=n("li"),Qs=c("ANONCE, a randomly generated value is sent by Access Point to the connecting station."),sa=F(),ls=n("li"),aa=c("The Station then sends SNONCE along with Pairwise Transient Key (PTK) and MIC to AP. While PTK is derived from PMK."),la=F(),es=n("li"),ea=c("On receiving the second EAPOL, access point computes Group Transient Key (GTK)."),oa=F(),os=n("li"),na=c("Lastly, AP sends an acknowledgement to the station which also contains a MIC code."),Ks=F(),W=n("p"),ta=c("From the above process, our main objective is to get the MIC hash. You see, MIC is transmitted at second and fourth step. Tools like aircrack-ng and coWPAtty use the MIC at the fourth step to crack the hash. While here we will look for the second frame MIC."),Is=F(),L=n("p"),pa=c("Calculating the MIC of the 2nd EAPOL frame can also be more useful, like a half captured handshake can be used in the process. Half handshakes can be captured and further manipulated by hosting a rogue access point. Let’s come back to where we were."),Ms=F(),P=n("h3"),H=n("a"),Fa=c("(PML) Pairwise Master Key Computation"),gs=F(),O=n("p"),ra=c("In sequence we have PMK on the first side. PMK is used to derive PTK and is never sent over the air. instead, the derived PTK is transmitted to AP. PMK is computed using the Password-Based Key Derivation Function 2 (PBKDF2) which uses the HMAC-SHA1 hash algorithm to encode data. In result, a 256-bit hash will be created to this function. Well, in general, we could logically write this up:"),Ts=F(),ns=new I(!1),ts=F(),R=n("p"),ca=c("Where Pre-Shared-Key (PSK) is the actual plaintext password and SSID is used here as a salt for hashing. In the classic sense of Python, we could write:"),xs=F(),ps=new I(!1),Fs=F(),B=n("p"),ia=c("Make sure you have pbkdf2 library in path. Install it using python-pip if you don’t have it already."),Ss=F(),_=n("h3"),N=n("a"),ya=c("(PTK) Pairwise Transient Key Computation"),Ws=F(),q=n("p"),Da=c("The next hash in sequence is PTK which is transmitted in 2nd EAPOL frame. The construction of PTK is pretty tricky but thanks to stackoverfow from where i found the code. The PTK is dependant on ANONCE, SNONCE, AP MAC, Station MAC and PMK which are first concatenated and must exist in hex form. In result, a 512 bit string will be constructed which is the combination of various other keys. These keys are:"),Ls=F(),h=n("ul"),rs=n("li"),ha=c("Key Confirmation Key (KCK): 128 bits."),da=F(),cs=n("li"),Ea=c("Key Encryption Key (KEK): 128 bits."),fa=F(),is=n("li"),Aa=c("Temporal Key (TK): 128 bits."),ua=F(),ys=n("li"),va=c("MIC Tx: 64 bits."),ma=F(),Ds=n("li"),wa=c("MIC Rx: 64 bits."),Hs=F(),$=n("p"),Ca=c("While searching on web, i came across two implemenations of the function “PRF512” which is another pseudo random function for computing PTK. This one worked perfectly:"),Os=F(),hs=new I(!1),ds=F(),U=n("p"),ba=c("And now putting the pieces together:"),Rs=F(),Es=new I(!1),fs=F(),K=n("h3"),V=n("a"),ka=c("(MIC) Message Integrity Code"),Bs=F(),Y=n("p"),Pa=c("Until now, we have two of our keys. MIC is a pain in the butt and it took me over a week to figure the right sequence. However, as I’ve already told that the MIC that we are going to compute is the MIC from the second EAPOL. From until to this point and all the previous proceedings, it’s worth mentioning about this article which helped me a lot to reach this point. Remember that the PTK is the combination of various other keys and the first of them is KCK which will be used as a salt for MIC."),Ns=F(),As=new I(!1),us=F(),j=n("p"),_a=c("Where KCK, as you know, can be extracted from PTK and MD5/SHA1 are the hashes which are available through hashlib library. The only thing we are left with is payload. Here, the payload is referred to the whole data captured in the 2nd EAPOL frame. Well, doing it the Python way:"),qs=F(),vs=new I(!1),ms=F(),G=n("p"),Ka=c("Let’s recall the whole script:"),$s=F(),ws=new I(!1),Cs=F(),Z=n("p"),Ia=c("If you give everything correctly, this code will produce the MIC and will print in on screen. You can then verify by comparing this MIC from MIC produced by coWPAtty and aircrack."),Us=F(),z=n("p"),Ma=c("As of my understandings, the only thing that’s probably can cause some issue is step 3 while looking at the payload. If you are writing something on this, you can first go for each hash independently and then bind them together. While implementing the functions, note which version of WPA you are computing MIC for. WPA use MD5 algorithm while WPA2 use SHA1 algorithm."),this.h()},l(s){y=t(s,"P",{});var l=p(y);d=t(l,"STRONG",{});var Ta=p(d);v=i(Ta,"After the discovery of the PMKID hash crack vulnerability, I spent some time understanding the process and WPA/WPA2 protocol & came across this idea to publish how the real hash cracking works. This article is all about how you can build up something like aircrack-ng or coWPAtty or in other words your own cracking tool. Since a lot of articles have been published on the 4-way handshake and how basic MIC cracking works, the aim here is to get to know how things work at the lower level."),Ta.forEach(a),l.forEach(a),m=r(s),D=t(s,"P",{});var xa=p(D);f=i(xa,"Well, in basic, there are three major keys that we have to compute:"),xa.forEach(a),b=r(s),A=t(s,"UL",{});var X=p(A);J=t(X,"LI",{});var Sa=p(J);Vs=i(Sa,"Pairwise Master Keys (PMK)"),Sa.forEach(a),Ys=r(X),Q=t(X,"LI",{});var Wa=p(Q);js=i(Wa,"Pairwise Transient Keys (PTK)"),Wa.forEach(a),Gs=r(X),ss=t(X,"LI",{});var La=p(ss);Zs=i(La,"Message Integrity Code (MIC)"),La.forEach(a),X.forEach(a),bs=r(s),T=t(s,"P",{});var Ha=p(T);zs=i(Ha,"These three of them are computed in the same sequence as given. The idea behind the 4-way handshake is that two connecting stations have to prove that they know the key by not transmitting the actual key. Instead, the key is strongly encrypted and verified on Authenticator’s (AP) Side. Various functions are used in this process to securely encrypt the passphrase key."),Ha.forEach(a),ks=r(s),k=t(s,"H2",{id:!0});var Oa=p(k);x=t(Oa,"A",{href:!0});var Ra=p(x);Xs=i(Ra,"The Handshake Process"),Ra.forEach(a),Oa.forEach(a),Ps=r(s),S=t(s,"P",{});var Ba=p(S);Js=i(Ba,"Before the actual handshake takes place, i.e. EAPOL packets are transmitted, Open authentication and association steps are performed which in short verifies the compatibility of both interconnecting stations. In short, the following happens after successful association:"),Ba.forEach(a),_s=r(s),E=t(s,"UL",{});var w=p(E);as=t(w,"LI",{});var Na=p(as);Qs=i(Na,"ANONCE, a randomly generated value is sent by Access Point to the connecting station."),Na.forEach(a),sa=r(w),ls=t(w,"LI",{});var qa=p(ls);aa=i(qa,"The Station then sends SNONCE along with Pairwise Transient Key (PTK) and MIC to AP. While PTK is derived from PMK."),qa.forEach(a),la=r(w),es=t(w,"LI",{});var $a=p(es);ea=i($a,"On receiving the second EAPOL, access point computes Group Transient Key (GTK)."),$a.forEach(a),oa=r(w),os=t(w,"LI",{});var Ua=p(os);na=i(Ua,"Lastly, AP sends an acknowledgement to the station which also contains a MIC code."),Ua.forEach(a),w.forEach(a),Ks=r(s),W=t(s,"P",{});var Va=p(W);ta=i(Va,"From the above process, our main objective is to get the MIC hash. You see, MIC is transmitted at second and fourth step. Tools like aircrack-ng and coWPAtty use the MIC at the fourth step to crack the hash. While here we will look for the second frame MIC."),Va.forEach(a),Is=r(s),L=t(s,"P",{});var Ya=p(L);pa=i(Ya,"Calculating the MIC of the 2nd EAPOL frame can also be more useful, like a half captured handshake can be used in the process. Half handshakes can be captured and further manipulated by hosting a rogue access point. Let’s come back to where we were."),Ya.forEach(a),Ms=r(s),P=t(s,"H3",{id:!0});var ja=p(P);H=t(ja,"A",{href:!0});var Ga=p(H);Fa=i(Ga,"(PML) Pairwise Master Key Computation"),Ga.forEach(a),ja.forEach(a),gs=r(s),O=t(s,"P",{});var Za=p(O);ra=i(Za,"In sequence we have PMK on the first side. PMK is used to derive PTK and is never sent over the air. instead, the derived PTK is transmitted to AP. PMK is computed using the Password-Based Key Derivation Function 2 (PBKDF2) which uses the HMAC-SHA1 hash algorithm to encode data. In result, a 256-bit hash will be created to this function. Well, in general, we could logically write this up:"),Za.forEach(a),Ts=r(s),ns=M(s,!1),ts=r(s),R=t(s,"P",{});var za=p(R);ca=i(za,"Where Pre-Shared-Key (PSK) is the actual plaintext password and SSID is used here as a salt for hashing. In the classic sense of Python, we could write:"),za.forEach(a),xs=r(s),ps=M(s,!1),Fs=r(s),B=t(s,"P",{});var Xa=p(B);ia=i(Xa,"Make sure you have pbkdf2 library in path. Install it using python-pip if you don’t have it already."),Xa.forEach(a),Ss=r(s),_=t(s,"H3",{id:!0});var Ja=p(_);N=t(Ja,"A",{href:!0});var Qa=p(N);ya=i(Qa,"(PTK) Pairwise Transient Key Computation"),Qa.forEach(a),Ja.forEach(a),Ws=r(s),q=t(s,"P",{});var sl=p(q);Da=i(sl,"The next hash in sequence is PTK which is transmitted in 2nd EAPOL frame. The construction of PTK is pretty tricky but thanks to stackoverfow from where i found the code. The PTK is dependant on ANONCE, SNONCE, AP MAC, Station MAC and PMK which are first concatenated and must exist in hex form. In result, a 512 bit string will be constructed which is the combination of various other keys. These keys are:"),sl.forEach(a),Ls=r(s),h=t(s,"UL",{});var u=p(h);rs=t(u,"LI",{});var al=p(rs);ha=i(al,"Key Confirmation Key (KCK): 128 bits."),al.forEach(a),da=r(u),cs=t(u,"LI",{});var ll=p(cs);Ea=i(ll,"Key Encryption Key (KEK): 128 bits."),ll.forEach(a),fa=r(u),is=t(u,"LI",{});var el=p(is);Aa=i(el,"Temporal Key (TK): 128 bits."),el.forEach(a),ua=r(u),ys=t(u,"LI",{});var ol=p(ys);va=i(ol,"MIC Tx: 64 bits."),ol.forEach(a),ma=r(u),Ds=t(u,"LI",{});var nl=p(Ds);wa=i(nl,"MIC Rx: 64 bits."),nl.forEach(a),u.forEach(a),Hs=r(s),$=t(s,"P",{});var tl=p($);Ca=i(tl,"While searching on web, i came across two implemenations of the function “PRF512” which is another pseudo random function for computing PTK. This one worked perfectly:"),tl.forEach(a),Os=r(s),hs=M(s,!1),ds=r(s),U=t(s,"P",{});var pl=p(U);ba=i(pl,"And now putting the pieces together:"),pl.forEach(a),Rs=r(s),Es=M(s,!1),fs=r(s),K=t(s,"H3",{id:!0});var Fl=p(K);V=t(Fl,"A",{href:!0});var rl=p(V);ka=i(rl,"(MIC) Message Integrity Code"),rl.forEach(a),Fl.forEach(a),Bs=r(s),Y=t(s,"P",{});var cl=p(Y);Pa=i(cl,"Until now, we have two of our keys. MIC is a pain in the butt and it took me over a week to figure the right sequence. However, as I’ve already told that the MIC that we are going to compute is the MIC from the second EAPOL. From until to this point and all the previous proceedings, it’s worth mentioning about this article which helped me a lot to reach this point. Remember that the PTK is the combination of various other keys and the first of them is KCK which will be used as a salt for MIC."),cl.forEach(a),Ns=r(s),As=M(s,!1),us=r(s),j=t(s,"P",{});var il=p(j);_a=i(il,"Where KCK, as you know, can be extracted from PTK and MD5/SHA1 are the hashes which are available through hashlib library. The only thing we are left with is payload. Here, the payload is referred to the whole data captured in the 2nd EAPOL frame. Well, doing it the Python way:"),il.forEach(a),qs=r(s),vs=M(s,!1),ms=r(s),G=t(s,"P",{});var yl=p(G);Ka=i(yl,"Let’s recall the whole script:"),yl.forEach(a),$s=r(s),ws=M(s,!1),Cs=r(s),Z=t(s,"P",{});var Dl=p(Z);Ia=i(Dl,"If you give everything correctly, this code will produce the MIC and will print in on screen. You can then verify by comparing this MIC from MIC produced by coWPAtty and aircrack."),Dl.forEach(a),Us=r(s),z=t(s,"P",{});var hl=p(z);Ma=i(hl,"As of my understandings, the only thing that’s probably can cause some issue is step 3 while looking at the payload. If you are writing something on this, you can first go for each hash independently and then bind them together. While implementing the functions, note which version of WPA you are computing MIC for. WPA use MD5 algorithm while WPA2 use SHA1 algorithm."),hl.forEach(a),this.h()},h(){C(x,"href","#the-handshake-process"),C(k,"id","the-handshake-process"),C(H,"href","#pml-pairwise-master-key-computation"),C(P,"id","pml-pairwise-master-key-computation"),ns.a=ts,ps.a=Fs,C(N,"href","#ptk-pairwise-transient-key-computation"),C(_,"id","ptk-pairwise-transient-key-computation"),hs.a=ds,Es.a=fs,C(V,"href","#mic-message-integrity-code"),C(K,"id","mic-message-integrity-code"),As.a=us,vs.a=ms,ws.a=Cs},m(s,l){o(s,y,l),e(y,d),e(d,v),o(s,m,l),o(s,D,l),e(D,f),o(s,b,l),o(s,A,l),e(A,J),e(J,Vs),e(A,Ys),e(A,Q),e(Q,js),e(A,Gs),e(A,ss),e(ss,Zs),o(s,bs,l),o(s,T,l),e(T,zs),o(s,ks,l),o(s,k,l),e(k,x),e(x,Xs),o(s,Ps,l),o(s,S,l),e(S,Js),o(s,_s,l),o(s,E,l),e(E,as),e(as,Qs),e(E,sa),e(E,ls),e(ls,aa),e(E,la),e(E,es),e(es,ea),e(E,oa),e(E,os),e(os,na),o(s,Ks,l),o(s,W,l),e(W,ta),o(s,Is,l),o(s,L,l),e(L,pa),o(s,Ms,l),o(s,P,l),e(P,H),e(H,Fa),o(s,gs,l),o(s,O,l),e(O,ra),o(s,Ts,l),ns.m(Al,s,l),o(s,ts,l),o(s,R,l),e(R,ca),o(s,xs,l),ps.m(ul,s,l),o(s,Fs,l),o(s,B,l),e(B,ia),o(s,Ss,l),o(s,_,l),e(_,N),e(N,ya),o(s,Ws,l),o(s,q,l),e(q,Da),o(s,Ls,l),o(s,h,l),e(h,rs),e(rs,ha),e(h,da),e(h,cs),e(cs,Ea),e(h,fa),e(h,is),e(is,Aa),e(h,ua),e(h,ys),e(ys,va),e(h,ma),e(h,Ds),e(Ds,wa),o(s,Hs,l),o(s,$,l),e($,Ca),o(s,Os,l),hs.m(vl,s,l),o(s,ds,l),o(s,U,l),e(U,ba),o(s,Rs,l),Es.m(ml,s,l),o(s,fs,l),o(s,K,l),e(K,V),e(V,ka),o(s,Bs,l),o(s,Y,l),e(Y,Pa),o(s,Ns,l),As.m(wl,s,l),o(s,us,l),o(s,j,l),e(j,_a),o(s,qs,l),vs.m(Cl,s,l),o(s,ms,l),o(s,G,l),e(G,Ka),o(s,$s,l),ws.m(bl,s,l),o(s,Cs,l),o(s,Z,l),e(Z,Ia),o(s,Us,l),o(s,z,l),e(z,Ma)},p:Wl,d(s){s&&a(y),s&&a(m),s&&a(D),s&&a(b),s&&a(A),s&&a(bs),s&&a(T),s&&a(ks),s&&a(k),s&&a(Ps),s&&a(S),s&&a(_s),s&&a(E),s&&a(Ks),s&&a(W),s&&a(Is),s&&a(L),s&&a(Ms),s&&a(P),s&&a(gs),s&&a(O),s&&a(Ts),s&&ns.d(),s&&a(ts),s&&a(R),s&&a(xs),s&&ps.d(),s&&a(Fs),s&&a(B),s&&a(Ss),s&&a(_),s&&a(Ws),s&&a(q),s&&a(Ls),s&&a(h),s&&a(Hs),s&&a($),s&&a(Os),s&&hs.d(),s&&a(ds),s&&a(U),s&&a(Rs),s&&Es.d(),s&&a(fs),s&&a(K),s&&a(Bs),s&&a(Y),s&&a(Ns),s&&As.d(),s&&a(us),s&&a(j),s&&a(qs),s&&vs.d(),s&&a(ms),s&&a(G),s&&a($s),s&&ws.d(),s&&a(Cs),s&&a(Z),s&&a(Us),s&&a(z)}}}function Ol(g){let y,d;const v=[g[0],fl];let m={$$slots:{default:[Hl]},$$scope:{ctx:g}};for(let D=0;D<v.length;D+=1)m=ga(m,v[D]);return y=new Ll({props:m}),{c(){Kl(y.$$.fragment)},l(D){Il(y.$$.fragment,D)},m(D,f){Ml(y,D,f),d=!0},p(D,[f]){const b=f&1?gl(v,[f&1&&dl(D[0]),f&0&&dl(fl)]):{};f&2&&(b.$$scope={dirty:f,ctx:D}),y.$set(b)},i(D){d||(Tl(y.$$.fragment,D),d=!0)},o(D){xl(y.$$.fragment,D),d=!1},d(D){Sl(y,D)}}}const fl={title:"WPA(2) PMKID Hash Cracking (MIC) Process Explained",tags:["wireless","wpa-wpa2","wifi"],categories:["Writeups"],summary:"A guide on what the MIC is and how the actual WPA(2) cracking happens at lower level",created:"2024-08-25T00:00:00.000Z",lastmod:"2024-08-25T00:00:00.000Z",image:"https://github.com/user-attachments/assets/51b06557-0a25-4ddd-a59d-6783add3a447",flags:[],updated:"2024-11-25T22:21:28.584Z",slug:"/blog/2023/wpa-hash-cracking-process-explained-in-detal/+page.md",path:"/blog/2023/wpa-hash-cracking-process-explained-in-detal",toc:[{depth:2,title:"The Handshake Process",slug:"the-handshake-process"},{depth:3,title:"(PML) Pairwise Master Key Computation",slug:"pml-pairwise-master-key-computation"},{depth:3,title:"(PTK) Pairwise Transient Key Computation",slug:"ptk-pairwise-transient-key-computation"},{depth:3,title:"(MIC) Message Integrity Code",slug:"mic-message-integrity-code"}]};function Rl(g,y,d){return g.$$set=v=>{d(0,y=ga(ga({},y),El(v)))},y=El(y),[y]}class ql extends kl{constructor(y){super(),Pl(this,y,Rl,Ol,_l,{})}}export{ql as component};
